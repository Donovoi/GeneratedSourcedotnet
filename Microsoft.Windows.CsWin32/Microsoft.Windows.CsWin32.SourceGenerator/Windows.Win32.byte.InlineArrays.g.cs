// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981
using global::System;
using global::System.Diagnostics;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Runtime.CompilerServices;
using global::System.Runtime.InteropServices;
using global::System.Runtime.Versioning;
using winmdroot = global::Windows.Win32;
namespace Windows.Win32
{
	internal partial struct __byte_80
	{
		private const int SpanLength = 80;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_80(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_80 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_512
	{
		private const int SpanLength = 512;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_512(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_512 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_20
	{
		private const int SpanLength = 20;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_20(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_20 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_18
	{
		private const int SpanLength = 18;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_18(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_18 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_38
	{
		private const int SpanLength = 38;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_38(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_38 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_16
	{
		private const int SpanLength = 16;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_16(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_16 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_2
	{
		private const int SpanLength = 2;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_2(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_2 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_12
	{
		private const int SpanLength = 12;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_12(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_12 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_8
	{
		private const int SpanLength = 8;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_8(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_8 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_50
	{
		private const int SpanLength = 50;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_50(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_50 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_30
	{
		private const int SpanLength = 30;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_30(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_30 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_1
	{
		private const int SpanLength = 1;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_1(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_1 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_32
	{
		private const int SpanLength = 32;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_32(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_32 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_6
	{
		private const int SpanLength = 6;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_6(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_6 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}

	internal partial struct __byte_3
	{
		private const int SpanLength = 3;

		/// <summary>The length of the inline array.</summary>
		internal readonly int Length => SpanLength;
		internal unsafe fixed byte Value[SpanLength];

		/// <summary>
		/// Gets a ref to an individual element of the inline array.
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
		/// </summary>
		[UnscopedRef]
		internal unsafe ref byte this[int index] => ref Value[index];

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe Span<byte> AsSpan() => MemoryMarshal.CreateSpan(ref Value[0], SpanLength);

		/// <summary>
		/// Gets this inline array as a span.
		/// </summary>
		/// <remarks>
		/// ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
		/// </remarks>
		[UnscopedRef]
		internal unsafe readonly ReadOnlySpan<byte> AsReadOnlySpan() => MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(Value[0]), SpanLength);

		internal readonly bool Equals(ReadOnlySpan<byte> value) => AsReadOnlySpan().SequenceEqual(value);
		public static implicit operator __byte_3(ReadOnlySpan<byte> value)
		{
			Unsafe.SkipInit(out __byte_3 result);
			value.CopyTo(result.AsSpan());
			int initLength = value.Length;
			result.AsSpan().Slice(initLength, SpanLength - initLength).Clear();
			return result;
		}
	}
}
