// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981
using global::System;
using global::System.Diagnostics;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Runtime.CompilerServices;
using global::System.Runtime.InteropServices;
using global::System.Runtime.Versioning;
using winmdroot = global::Windows.Win32;
namespace Windows.Win32
{
	namespace System.Diagnostics.ToolHelp
	{
		/// <summary>Describes an entry from a list of the processes residing in the system address space when a snapshot was taken.</summary>
		/// <remarks>
		/// <para>> [!NOTE] > The tlhelp32.h header defines PROCESSENTRY32 as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//tlhelp32/ns-tlhelp32-processentry32w#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[global::System.CodeDom.Compiler.GeneratedCode("Microsoft.Windows.CsWin32", "0.2.104-beta+6d86f35b75")]
		internal partial struct PROCESSENTRY32W
		{
			/// <summary>
			/// <para>The size of the structure, in bytes. Before calling the <a href="https://docs.microsoft.com/windows/desktop/api/tlhelp32/nf-tlhelp32-process32first">Process32First</a> function, set this member to <c>sizeof(PROCESSENTRY32)</c>. If you do not initialize <b>dwSize</b>, <b>Process32First</b> fails.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//tlhelp32/ns-tlhelp32-processentry32w#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal uint dwSize;
			/// <summary>This member is no longer used and is always set to zero.</summary>
			internal uint cntUsage;
			/// <summary>The process identifier.</summary>
			internal uint th32ProcessID;
			/// <summary>This member is no longer used and is always set to zero.</summary>
			internal nuint th32DefaultHeapID;
			/// <summary>This member is no longer used and is always set to zero.</summary>
			internal uint th32ModuleID;
			/// <summary>The number of execution threads started by the process.</summary>
			internal uint cntThreads;
			/// <summary>The identifier of the process that created this process (its parent process).</summary>
			internal uint th32ParentProcessID;
			/// <summary>The base priority of any threads created by this process.</summary>
			internal int pcPriClassBase;
			/// <summary>This member is no longer used, and is always set to zero.</summary>
			internal uint dwFlags;
			/// <summary>The name of the executable file for the process. To retrieve the full path to the executable file, call the <a href="https://docs.microsoft.com/windows/desktop/api/tlhelp32/nf-tlhelp32-module32first">Module32First</a> function and check the <b>szExePath</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/tlhelp32/ns-tlhelp32-moduleentry32">MODULEENTRY32</a> structure that is returned. However, if the calling process is a 32-bit process, you must call the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-queryfullprocessimagenamea">QueryFullProcessImageName</a> function to retrieve the full path of the executable file for a 64-bit process.</summary>
			internal winmdroot.__char_260 szExeFile;
		}
	}
}
