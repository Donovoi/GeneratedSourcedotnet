// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981
using global::System;
using global::System.Diagnostics;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Runtime.CompilerServices;
using global::System.Runtime.InteropServices;
using global::System.Runtime.Versioning;
using winmdroot = global::Windows.Win32;
namespace Windows.Win32
{
	namespace System.Diagnostics.ToolHelp
	{
		/// <summary>Describes an entry from a list of the modules belonging to the specified process.</summary>
		/// <remarks>
		/// <para>The <b>modBaseAddr</b> and <b>hModule</b> members are valid only in the context of the process specified by <i>th32ProcessID</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//tlhelp32/ns-tlhelp32-moduleentry32w#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[global::System.CodeDom.Compiler.GeneratedCode("Microsoft.Windows.CsWin32", "0.2.104-beta+6d86f35b75")]
		internal partial struct MODULEENTRY32W
		{
			/// <summary>
			/// <para>The size of the structure, in bytes. Before calling the <a href="https://docs.microsoft.com/windows/desktop/api/tlhelp32/nf-tlhelp32-module32first">Module32First</a> function, set this member to <c>sizeof(MODULEENTRY32)</c>. If you do not initialize <b>dwSize</b>, <b>Module32First</b> fails.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//tlhelp32/ns-tlhelp32-moduleentry32w#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal uint dwSize;
			/// <summary>This member is no longer used, and is always set to one.</summary>
			internal uint th32ModuleID;
			/// <summary>The identifier of the process whose modules are to be examined.</summary>
			internal uint th32ProcessID;
			/// <summary>The load count of the module, which is not generally meaningful, and usually equal to 0xFFFF.</summary>
			internal uint GlblcntUsage;
			/// <summary>The load count of the module (same as <i>GlblcntUsage</i>), which is not generally meaningful, and usually equal to 0xFFFF.</summary>
			internal uint ProccntUsage;
			/// <summary>The base address of the module in the context of the owning process.</summary>
			internal unsafe byte* modBaseAddr;
			/// <summary>The size of the module, in bytes.</summary>
			internal uint modBaseSize;
			/// <summary>A handle to the module in the context of the owning process.</summary>
			internal winmdroot.Foundation.HINSTANCE hModule;
			/// <summary>The module name.</summary>
			internal winmdroot.__char_256 szModule;
			/// <summary>The module path.</summary>
			internal winmdroot.__char_260 szExePath;
		}
	}
}
