// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981
using global::System;
using global::System.Diagnostics;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Runtime.CompilerServices;
using global::System.Runtime.InteropServices;
using global::System.Runtime.Versioning;
using winmdroot = global::Windows.Win32;
namespace Windows.Win32
{
	namespace Storage.FileSystem
	{
		/// <summary>Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile function.</summary>
		/// <remarks>
		/// <para>If a file has a long file name, the complete name appears in the <b>cFileName</b> member, and the 8.3 format truncated version of the name appears in the <b>cAlternateFileName</b> member. Otherwise, <b>cAlternateFileName</b> is empty. If the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findfirstfileexa">FindFirstFileEx</a> function was called with a value of <b>FindExInfoBasic</b> in the <i>fInfoLevelId</i> parameter, the <b>cAlternateFileName</b> member will always contain a <b>NULL</b> string value. This remains true for all subsequent calls to the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findnextfilea">FindNextFile</a> function. As an alternative method of retrieving the 8.3 format version of a file name, you can use the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-getshortpathnamew">GetShortPathName</a> function. For more information about file names, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/naming-a-file">File Names, Paths, and Namespaces</a>. Not all file systems can record creation and last access times, and not all file systems record them in the same manner. For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds, and access time has a resolution of 1 day. The NTFS file system delays updates to the last access time for a file by up to 1 hour after the last access. For more information, see <a href="https://docs.microsoft.com/windows/desktop/SysInfo/file-times">File Times</a>.</para>
		/// <para>> [!NOTE] > The minwinbase.h header defines WIN32_FIND_DATA as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[global::System.CodeDom.Compiler.GeneratedCode("Microsoft.Windows.CsWin32", "0.2.104-beta+6d86f35b75")]
		internal partial struct WIN32_FIND_DATAW
		{
			/// <summary>
			/// <para>The file attributes of a file. For possible values and their descriptions, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-attribute-constants">File Attribute Constants</a>. The <b>FILE_ATTRIBUTE_SPARSE_FILE</b> attribute on the file is set if any of the streams of the file have ever been sparse.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal uint dwFileAttributes;
			/// <summary>
			/// <para>A <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure that specifies when a file or directory was created. If the underlying file system does not support creation time, this member is zero.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal global::System.Runtime.InteropServices.ComTypes.FILETIME ftCreationTime;
			/// <summary>
			/// <para>A <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure. For a file, the structure specifies when the file was last read from, written to, or for executable files, run. For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero. On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal global::System.Runtime.InteropServices.ComTypes.FILETIME ftLastAccessTime;
			/// <summary>
			/// <para>A <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure. For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-writefile">WriteFile</a> or <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setendoffile">SetEndOfFile</a> are used. The date and time are not updated when file attributes or security descriptors are changed. For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal global::System.Runtime.InteropServices.ComTypes.FILETIME ftLastWriteTime;
			/// <summary>
			/// <para>The high-order <b>DWORD</b> value of the file size, in bytes. This value is zero unless the file size is greater than <b>MAXDWORD</b>. The size of the file is equal to (<b>nFileSizeHigh</b> * (<b>MAXDWORD</b>+1)) + <b>nFileSizeLow</b>.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal uint nFileSizeHigh;
			/// <summary>The low-order <b>DWORD</b> value of the file size, in bytes.</summary>
			internal uint nFileSizeLow;
			/// <summary>
			/// <para>If the <b>dwFileAttributes</b> member includes the <b>FILE_ATTRIBUTE_REPARSE_POINT</b> attribute, this member specifies the reparse point tag. Otherwise, this value is undefined and should not be used. For more information see <a href="https://docs.microsoft.com/windows/desktop/FileIO/reparse-point-tags">Reparse Point Tags</a>.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal uint dwReserved0;
			/// <summary>Reserved for future use.</summary>
			internal uint dwReserved1;
			/// <summary>The name of the file.</summary>
			internal winmdroot.__char_260 cFileName;
			/// <summary>
			/// <para>An alternative name for the file. This name is in the classic 8.3 file name format.</para>
			/// <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-win32_find_dataw#members">Read more on docs.microsoft.com</see>.</para>
			/// </summary>
			internal winmdroot.__char_14 cAlternateFileName;
		}
	}
}
