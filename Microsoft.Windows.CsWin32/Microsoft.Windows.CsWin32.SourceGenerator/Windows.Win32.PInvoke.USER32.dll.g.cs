// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981
using global::System;
using global::System.Diagnostics;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Runtime.CompilerServices;
using global::System.Runtime.InteropServices;
using global::System.Runtime.Versioning;
using winmdroot = global::Windows.Win32;
namespace Windows.Win32
{

	/// <content>
	/// Contains extern methods from "USER32.dll".
	/// </content>
	internal static partial class PInvoke
	{
		/// <summary>Plays a waveform sound. The waveform sound for each sound type is identified by an entry in the registry.</summary>
		/// <param name="uType">
		/// <para>The sound to be played. The sounds are set by the user through the Sound control panel application, and then stored in the registry.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messagebeep#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messagebeep">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL MessageBeep(winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_STYLE uType);

		/// <inheritdoc cref="UserHandleGrantAccess(winmdroot.Foundation.HANDLE, winmdroot.Foundation.HANDLE, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL UserHandleGrantAccess(SafeHandle hUserHandle, SafeHandle hJob, winmdroot.Foundation.BOOL bGrant)
		{
			bool hUserHandleAddRef = false;
			bool hJobAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hUserHandleLocal;
				if (hUserHandle is object)
				{
					hUserHandle.DangerousAddRef(ref hUserHandleAddRef);
					hUserHandleLocal = (winmdroot.Foundation.HANDLE)hUserHandle.DangerousGetHandle();
				}
				else
					hUserHandleLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.Foundation.HANDLE hJobLocal;
				if (hJob is object)
				{
					hJob.DangerousAddRef(ref hJobAddRef);
					hJobLocal = (winmdroot.Foundation.HANDLE)hJob.DangerousGetHandle();
				}
				else
					hJobLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.Foundation.BOOL __result = PInvoke.UserHandleGrantAccess(hUserHandleLocal, hJobLocal, bGrant);
				return __result;
			}
			finally
			{
				if (hUserHandleAddRef)
					hUserHandle.DangerousRelease();
				if (hJobAddRef)
					hJob.DangerousRelease();
			}
		}

		/// <summary>Grants or denies access to a handle to a User object to a job that has a user-interface restriction.</summary>
		/// <param name="hUserHandle">A handle to the User object.</param>
		/// <param name="hJob">
		/// <para>A handle to the job to be granted access to the User handle. The <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-createjobobjecta">CreateJobObject</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-openjobobjecta">OpenJobObject</a> function returns this handle.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-userhandlegrantaccess#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bGrant">If this parameter is TRUE, all processes associated with the job can recognize and use the handle. If the parameter is FALSE, the processes cannot use the handle.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-userhandlegrantaccess">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL UserHandleGrantAccess(winmdroot.Foundation.HANDLE hUserHandle, winmdroot.Foundation.HANDLE hJob, winmdroot.Foundation.BOOL bGrant);

		/// <summary>Unregisters the power setting notification.</summary>
		/// <param name="Handle">The handle returned from the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerpowersettingnotification">RegisterPowerSettingNotification</a> function.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterpowersettingnotification">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL UnregisterPowerSettingNotification(winmdroot.System.Power.HPOWERNOTIFY Handle);

		/// <inheritdoc cref="RegisterPowerSettingNotification(winmdroot.Foundation.HANDLE, global::System.Guid*, uint)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe UnregisterPowerSettingNotificationSafeHandle RegisterPowerSettingNotification(SafeHandle hRecipient, in global::System.Guid PowerSettingGuid, uint Flags)
		{
			bool hRecipientAddRef = false;
			try
			{
				fixed (global::System.Guid* PowerSettingGuidLocal = &PowerSettingGuid)
				{
					winmdroot.Foundation.HANDLE hRecipientLocal;
					if (hRecipient is object)
					{
						hRecipient.DangerousAddRef(ref hRecipientAddRef);
						hRecipientLocal = (winmdroot.Foundation.HANDLE)hRecipient.DangerousGetHandle();
					}
					else
						hRecipientLocal = default(winmdroot.Foundation.HANDLE);
					winmdroot.System.Power.HPOWERNOTIFY __result = PInvoke.RegisterPowerSettingNotification(hRecipientLocal, PowerSettingGuidLocal, Flags);
					return new UnregisterPowerSettingNotificationSafeHandle(__result, ownsHandle: true);
				}
			}
			finally
			{
				if (hRecipientAddRef)
					hRecipient.DangerousRelease();
			}
		}

		/// <summary>Registers the application to receive power setting notifications for the specific power setting event.</summary>
		/// <param name="hRecipient">
		/// <para>Handle indicating where the power setting notifications are to be sent. For interactive applications, the <i>Flags</i> parameter should be zero, and the <i>hRecipient</i> parameter should be a window handle. For services, the <i>Flags</i> parameter should be one, and the <i>hRecipient</i> parameter should be a <b>SERVICE_STATUS_HANDLE</b> as returned from <a href="https://docs.microsoft.com/windows/desktop/api/winsvc/nf-winsvc-registerservicectrlhandlerexa">RegisterServiceCtrlHandlerEx</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpowersettingnotification#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="PowerSettingGuid">
		/// <para>The <b>GUID</b> of the power setting for which notifications are to be sent. For more information see <a href="https://docs.microsoft.com/windows/desktop/Power/registering-for-power-events">Registering for Power Events</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpowersettingnotification#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Flags">
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpowersettingnotification#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Returns a notification handle for unregistering for power notifications. If the function fails, the return value is NULL. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpowersettingnotification">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.System.Power.HPOWERNOTIFY RegisterPowerSettingNotification(winmdroot.Foundation.HANDLE hRecipient, global::System.Guid* PowerSettingGuid, uint Flags);

		/// <inheritdoc cref="RegisterSuspendResumeNotification(winmdroot.Foundation.HANDLE, uint)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe UnregisterPowerSettingNotificationSafeHandle RegisterSuspendResumeNotification(SafeHandle hRecipient, uint Flags)
		{
			bool hRecipientAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hRecipientLocal;
				if (hRecipient is object)
				{
					hRecipient.DangerousAddRef(ref hRecipientAddRef);
					hRecipientLocal = (winmdroot.Foundation.HANDLE)hRecipient.DangerousGetHandle();
				}
				else
					hRecipientLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.System.Power.HPOWERNOTIFY __result = PInvoke.RegisterSuspendResumeNotification(hRecipientLocal, Flags);
				return new UnregisterPowerSettingNotificationSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hRecipientAddRef)
					hRecipient.DangerousRelease();
			}
		}

		/// <summary>Registers to receive notification when the system is suspended or resumed. Similar to PowerRegisterSuspendResumeNotification, but operates in user mode and can take a window handle.</summary>
		/// <param name="hRecipient">
		/// <para>This parameter contains parameters for subscribing to a power notification or a window handle representing the subscribing process. If <i>Flags</i> is <b>DEVICE_NOTIFY_CALLBACK</b>, <i>hRecipient</i> is interpreted as a pointer to a <a href="https://docs.microsoft.com/windows/win32/api/powrprof/ns-powrprof-device_notify_subscribe_parameters">DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS</a> structure. In this case, the callback function is <a href="https://docs.microsoft.com/windows/desktop/api/powrprof/nc-powrprof-device_notify_callback_routine">DeviceNotifyCallbackRoutine</a>. When the <b>Callback</b> function executes, the  <i>Type</i> parameter is set indicating the type of event that occurred. Possible values include <b>PBT_APMSUSPEND</b>, <b>PBT_APMRESUMESUSPEND</b>, and <b>PBT_APMRESUMEAUTOMATIC</b> - see  <a href="https://docs.microsoft.com/windows/desktop/Power/power-management-events">Power Management Events</a> for more info. The <i>Setting</i> parameter is not used with suspend/resume notifications. If <i>Flags</i> is <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>, <i>hRecipient</i> is a handle to the window to deliver events to.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registersuspendresumenotification#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Flags">This parameter can be <b>DEVICE_NOTIFY_WINDOW_HANDLE</b> or <b>DEVICE_NOTIFY_CALLBACK</b>.</param>
		/// <returns>
		/// <para>A handle to the registration. Use this handle to unregister for notifications. If the function fails, the return value is NULL. To get extended error information call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registersuspendresumenotification">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.System.Power.HPOWERNOTIFY RegisterSuspendResumeNotification(winmdroot.Foundation.HANDLE hRecipient, uint Flags);

		/// <inheritdoc cref="UnregisterSuspendResumeNotification(winmdroot.System.Power.HPOWERNOTIFY)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL UnregisterSuspendResumeNotification(SafeHandle Handle)
		{
			bool HandleAddRef = false;
			try
			{
				winmdroot.System.Power.HPOWERNOTIFY HandleLocal;
				if (Handle is object)
				{
					Handle.DangerousAddRef(ref HandleAddRef);
					HandleLocal = (winmdroot.System.Power.HPOWERNOTIFY)Handle.DangerousGetHandle();
				}
				else
					HandleLocal = default(winmdroot.System.Power.HPOWERNOTIFY);
				winmdroot.Foundation.BOOL __result = PInvoke.UnregisterSuspendResumeNotification(HandleLocal);
				return __result;
			}
			finally
			{
				if (HandleAddRef)
					Handle.DangerousRelease();
			}
		}

		/// <summary>Cancels a registration to receive notification when the system is suspended or resumed. Similar to PowerUnregisterSuspendResumeNotification but operates in user mode.</summary>
		/// <param name="Handle">A handle to a registration obtained by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registersuspendresumenotification">RegisterSuspendResumeNotification</a> function.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregistersuspendresumenotification">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL UnregisterSuspendResumeNotification(winmdroot.System.Power.HPOWERNOTIFY Handle);

		/// <inheritdoc cref="DdeSetQualityOfService(winmdroot.Foundation.HWND, winmdroot.Security.SECURITY_QUALITY_OF_SERVICE*, winmdroot.Security.SECURITY_QUALITY_OF_SERVICE*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DdeSetQualityOfService(winmdroot.Foundation.HWND hwndClient, in winmdroot.Security.SECURITY_QUALITY_OF_SERVICE pqosNew, ref winmdroot.Security.SECURITY_QUALITY_OF_SERVICE pqosPrev)
		{
			fixed (winmdroot.Security.SECURITY_QUALITY_OF_SERVICE* pqosPrevLocal = &pqosPrev)
			{
				fixed (winmdroot.Security.SECURITY_QUALITY_OF_SERVICE* pqosNewLocal = &pqosNew)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.DdeSetQualityOfService(hwndClient, pqosNewLocal, pqosPrevLocal);
					return __result;
				}
			}
		}

		/// <summary>Specifies the quality of service (QOS) a raw Dynamic Data Exchange (DDE) application desires for future DDE conversations it initiates.</summary>
		/// <param name="hwndClient">
		/// <para>Type: <b>HWND</b> A handle to the DDE client window that specifies the source of <a href="https://docs.microsoft.com/windows/desktop/dataxchg/wm-dde-initiate">WM_DDE_INITIATE</a> messages a client will send to start DDE conversations.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-ddesetqualityofservice#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pqosNew">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_quality_of_service">SECURITY_QUALITY_OF_SERVICE</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_quality_of_service">SECURITY_QUALITY_OF_SERVICE</a> structure for the desired quality of service values.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-ddesetqualityofservice#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pqosPrev">
		/// <para>Type: <b>PSECURITY_QUALITY_OF_SERVICE</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_quality_of_service">SECURITY_QUALITY_OF_SERVICE</a> structure that receives the previous quality of service values associated with the window identified by <i>hwndClient</i>. This parameter is optional. If an application has no interest in <i>hwndClient</i>'s previous QOS values, it should set <i>pqosPrev</i> to <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-ddesetqualityofservice#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-ddesetqualityofservice">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL DdeSetQualityOfService(winmdroot.Foundation.HWND hwndClient, winmdroot.Security.SECURITY_QUALITY_OF_SERVICE* pqosNew, winmdroot.Security.SECURITY_QUALITY_OF_SERVICE* pqosPrev);

		/// <summary>Enables a Dynamic Data Exchange (DDE) server application to impersonate a DDE client application's security context. This protects secure server data from unauthorized DDE clients.</summary>
		/// <param name="hWndClient">
		/// <para>Type: <b>HWND</b> A handle to the DDE client window to be impersonated. The client window must have established a DDE conversation with the server window identified by the <i>hWndServer</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-impersonateddeclientwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndServer">
		/// <para>Type: <b>HWND</b> A handle to the DDE server window. An application must create the server window before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-impersonateddeclientwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-impersonateddeclientwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ImpersonateDdeClientWindow(winmdroot.Foundation.HWND hWndClient, winmdroot.Foundation.HWND hWndServer);

		/// <summary>Packs a Dynamic Data Exchange (DDE) lParam value into an internal structure used for sharing DDE data between processes.</summary>
		/// <param name="msg">
		/// <para>Type: <b>UINT</b> The DDE message to be posted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-packddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiLo">
		/// <para>Type: <b>UINT_PTR</b> A value that corresponds to the 16-bit Windows low-order word of an <i>lParam</i> parameter for the DDE message being posted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-packddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiHi">
		/// <para>Type: <b>UINT_PTR</b> A value that corresponds to the 16-bit Windows high-order word of an <i>lParam</i> parameter for the DDE message being posted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-packddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPARAM</b> The return value is the <i>lParam</i> value.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-packddelparam">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LPARAM PackDDElParam(uint msg, nuint uiLo, nuint uiHi);

		/// <inheritdoc cref="UnpackDDElParam(uint, winmdroot.Foundation.LPARAM, nuint*, nuint*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL UnpackDDElParam(uint msg, winmdroot.Foundation.LPARAM lParam, out nuint puiLo, out nuint puiHi)
		{
			fixed (nuint* puiHiLocal = &puiHi)
			{
				fixed (nuint* puiLoLocal = &puiLo)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.UnpackDDElParam(msg, lParam, puiLoLocal, puiHiLocal);
					return __result;
				}
			}
		}

		/// <summary>Unpacks a Dynamic Data Exchange (DDE)lParam value received from a posted DDE message.</summary>
		/// <param name="msg">
		/// <para>Type: <b>UINT</b> The posted DDE message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-unpackddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> The <i>lParam</i> parameter of the posted DDE message that was received. The application must free the memory object specified by the <i>lParam</i> parameter by calling the <a href="https://docs.microsoft.com/windows/desktop/api/dde/nf-dde-freeddelparam">FreeDDElParam</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-unpackddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="puiLo">
		/// <para>Type: <b>PUINT_PTR</b> A pointer to a variable that receives the low-order word of <i>lParam</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-unpackddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="puiHi">
		/// <para>Type: <b>PUINT_PTR</b> A pointer to a variable that receives the high-order word of <i>lParam</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-unpackddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-unpackddelparam">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL UnpackDDElParam(uint msg, winmdroot.Foundation.LPARAM lParam, nuint* puiLo, nuint* puiHi);

		/// <summary>Frees the memory specified by the lParam parameter of a posted Dynamic Data Exchange (DDE) message. An application receiving a posted DDE message should call this function after it has used the UnpackDDElParam function to unpack the lParam value.</summary>
		/// <param name="msg">
		/// <para>Type: <b>UINT</b> The posted DDE message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-freeddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> The <i>lParam</i> parameter of the posted DDE message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-freeddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-freeddelparam">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL FreeDDElParam(uint msg, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Enables an application to reuse a packed Dynamic Data Exchange (DDE) lParam parameter, rather than allocating a new packed lParam. Using this function reduces reallocations for applications that pass packed DDE messages.</summary>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> The <i>lParam</i> parameter of the posted DDE message being reused.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-reuseddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="msgIn">
		/// <para>Type: <b>UINT</b> The identifier of the received DDE message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-reuseddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="msgOut">
		/// <para>Type: <b>UINT</b> The identifier of the DDE message to be posted. The DDE message will reuse the packed <i>lParam</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-reuseddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiLo">
		/// <para>Type: <b>UINT_PTR</b> The value to be packed into the low-order word of the reused <i>lParam</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-reuseddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiHi">
		/// <para>Type: <b>UINT_PTR</b> The value to be packed into the high-order word of the reused <i>lParam</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-reuseddelparam#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPARAM</b> The return value is the new <i>lParam</i> value.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//dde/nf-dde-reuseddelparam">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LPARAM ReuseDDElParam(winmdroot.Foundation.LPARAM lParam, uint msgIn, uint msgOut, nuint uiLo, nuint uiHi);

		/// <inheritdoc cref="DdeInitialize(uint*, winmdroot.System.DataExchange.PFNCALLBACK, winmdroot.System.DataExchange.DDE_INITIALIZE_COMMAND, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint DdeInitialize(ref uint pidInst, winmdroot.System.DataExchange.PFNCALLBACK pfnCallback, winmdroot.System.DataExchange.DDE_INITIALIZE_COMMAND afCmd, uint ulRes)
		{
			fixed (uint* pidInstLocal = &pidInst)
			{
				uint __result = PInvoke.DdeInitialize(pidInstLocal, pfnCallback, afCmd, ulRes);
				return __result;
			}
		}

		/// <summary>Registers an application with the Dynamic Data Exchange Management Library (DDEML). An application must call this function before calling any other Dynamic Data Exchange Management Library (DDEML) function.</summary>
		/// <param name="pidInst">
		/// <para>Type: <b>LPDWORD</b> The application instance identifier. At initialization, this parameter should point to 0. If the function succeeds, this parameter points to the instance identifier for the application. This value should be passed as the <i>idInst</i> parameter in all other DDEML functions that require it. If an application uses multiple instances of the DDEML dynamic-link library (DLL), the application should provide a different callback function for each instance. If <i>pidInst</i> points to a nonzero value, reinitialization of the DDEML is implied. In this case, <i>pidInst</i> must point to a valid application-instance identifier.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeinitializew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pfnCallback">
		/// <para>Type: <b>PFNCALLBACK</b> A pointer to the application-defined DDE callback function. This function processes DDE transactions sent by the system. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nc-ddeml-pfncallback">DdeCallback</a> callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeinitializew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="afCmd">
		/// <para>Type: <b>DWORD</b> A set of <b>APPCMD_</b>, <b>CBF_</b>, and <b>MF_</b> flags. The <b>APPCMD_</b> flags provide special instructions to <b>DdeInitialize</b>. The <b>CBF_</b> flags specify filters that prevent specific types of transactions from reaching the callback function. The <b>MF_</b> flags specify the types of DDE activity that a DDE monitoring application monitors. Using these flags enhances the performance of a DDE application by eliminating unnecessary calls to the callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeinitializew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="ulRes">
		/// <para>Type: <b>DWORD</b> Reserved; must be set to zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeinitializew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is <b>DMLERR_NO_ERROR</b>. If the function fails, the return value is one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeinitializew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DdeInitializeW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint DdeInitialize(uint* pidInst, winmdroot.System.DataExchange.PFNCALLBACK pfnCallback, winmdroot.System.DataExchange.DDE_INITIALIZE_COMMAND afCmd, uint ulRes);

		/// <summary>Frees all Dynamic Data Exchange Management Library (DDEML) resources associated with the calling application.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeuninitialize#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeuninitialize">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeUninitialize(uint idInst);

		/// <inheritdoc cref="DdeConnectList(uint, winmdroot.System.DataExchange.HSZ, winmdroot.System.DataExchange.HSZ, winmdroot.System.DataExchange.HCONVLIST, winmdroot.System.DataExchange.CONVCONTEXT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.System.DataExchange.HCONVLIST DdeConnectList(uint idInst, winmdroot.System.DataExchange.HSZ hszService, winmdroot.System.DataExchange.HSZ hszTopic, winmdroot.System.DataExchange.HCONVLIST hConvList, winmdroot.System.DataExchange.CONVCONTEXT? pCC)
		{
			winmdroot.System.DataExchange.CONVCONTEXT pCCLocal = pCC.HasValue ? pCC.Value : default(winmdroot.System.DataExchange.CONVCONTEXT);
			winmdroot.System.DataExchange.HCONVLIST __result = PInvoke.DdeConnectList(idInst, hszService, hszTopic, hConvList, pCC.HasValue ? &pCCLocal : null);
			return __result;
		}

		/// <summary>Establishes a conversation with all server applications that support the specified service name and topic name pair.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnectlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszService">
		/// <para>Type: <b>HSZ</b> A handle to the string that specifies the service name of the server application with which a conversation is to be established. If this parameter is 0L, the system attempts to establish conversations with all available servers that support the specified topic name.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnectlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszTopic">
		/// <para>Type: <b>HSZ</b> A handle to the string that specifies the name of the topic on which a conversation is to be established. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatestringhandlea">DdeCreateStringHandle</a> function. If this parameter is 0L, the system will attempt to establish conversations on all topics supported by the selected server (or servers).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnectlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hConvList">
		/// <para>Type: <b>HCONVLIST</b> A handle to the conversation list to be enumerated. This parameter should be 0L if a new conversation list is to be established.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnectlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pCC">
		/// <para>Type: <b>PCONVCONTEXT</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/ns-ddeml-convcontext">CONVCONTEXT</a> structure that contains conversation-context information. If this parameter is <b>NULL</b>, the server receives the default <b>CONVCONTEXT</b> structure during the <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-connect">XTYP_CONNECT</a> or <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-wildconnect">XTYP_WILDCONNECT</a> transaction.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnectlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCONVLIST</b> If the function succeeds, the return value is the handle to a new conversation list. If the function fails, the return value is 0L. The handle to the old conversation list is no longer valid. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnectlist">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.System.DataExchange.HCONVLIST DdeConnectList(uint idInst, winmdroot.System.DataExchange.HSZ hszService, winmdroot.System.DataExchange.HSZ hszTopic, winmdroot.System.DataExchange.HCONVLIST hConvList, [Optional] winmdroot.System.DataExchange.CONVCONTEXT* pCC);

		/// <summary>Retrieves the next conversation handle in the specified conversation list.</summary>
		/// <param name="hConvList">
		/// <para>Type: <b>HCONVLIST</b> A handle to the conversation list. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeconnectlist">DdeConnectList</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerynextserver#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hConvPrev">
		/// <para>Type: <b>HCONV</b> A handle to the conversation handle previously returned by this function. If this parameter is 0L, the function returns the first conversation handle in the list.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerynextserver#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCONV</b> If the list contains any more conversation handles, the return value is the next conversation handle in the list; otherwise, it is 0L.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerynextserver">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.DataExchange.HCONV DdeQueryNextServer(winmdroot.System.DataExchange.HCONVLIST hConvList, winmdroot.System.DataExchange.HCONV hConvPrev);

		/// <summary>Destroys the specified conversation list and terminates all conversations associated with the list.</summary>
		/// <param name="hConvList">
		/// <para>Type: <b>HCONVLIST</b> A handle to the conversation list. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeconnectlist">DdeConnectList</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddedisconnectlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddedisconnectlist">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeDisconnectList(winmdroot.System.DataExchange.HCONVLIST hConvList);

		/// <inheritdoc cref="DdeConnect(uint, winmdroot.System.DataExchange.HSZ, winmdroot.System.DataExchange.HSZ, winmdroot.System.DataExchange.CONVCONTEXT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.System.DataExchange.HCONV DdeConnect(uint idInst, winmdroot.System.DataExchange.HSZ hszService, winmdroot.System.DataExchange.HSZ hszTopic, winmdroot.System.DataExchange.CONVCONTEXT? pCC)
		{
			winmdroot.System.DataExchange.CONVCONTEXT pCCLocal = pCC.HasValue ? pCC.Value : default(winmdroot.System.DataExchange.CONVCONTEXT);
			winmdroot.System.DataExchange.HCONV __result = PInvoke.DdeConnect(idInst, hszService, hszTopic, pCC.HasValue ? &pCCLocal : null);
			return __result;
		}

		/// <summary>Establishes a conversation with a server application that supports the specified service name and topic name pair. If more than one such server exists, the system selects only one.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszService">
		/// <para>Type: <b>HSZ</b> A handle to the string that specifies the service name of the server application with which a conversation is to be established. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatestringhandlea">DdeCreateStringHandle</a> function. If this parameter is 0L, a conversation is established with any available server.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszTopic">
		/// <para>Type: <b>HSZ</b> A handle to the string that specifies the name of the topic on which a conversation is to be established. This handle must have been created by a previous call to <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatestringhandlea">DdeCreateStringHandle</a>. If this parameter is 0L, a conversation on any topic supported by the selected server is established.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pCC">
		/// <para>Type: <b>PCONVCONTEXT</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/ns-ddeml-convcontext">CONVCONTEXT</a> structure that contains conversation context information. If this parameter is <b>NULL</b>, the server receives the default <b>CONVCONTEXT</b> structure during the <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-connect">XTYP_CONNECT</a> or <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-wildconnect">XTYP_WILDCONNECT</a> transaction.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCONV</b> If the function succeeds, the return value is the handle to the established conversation. If the function fails, the return value is 0L. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeconnect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.System.DataExchange.HCONV DdeConnect(uint idInst, winmdroot.System.DataExchange.HSZ hszService, winmdroot.System.DataExchange.HSZ hszTopic, [Optional] winmdroot.System.DataExchange.CONVCONTEXT* pCC);

		/// <summary>Terminates a conversation started by either the DdeConnect or DdeConnectList function and invalidates the specified conversation handle.</summary>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the active conversation to be terminated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddedisconnect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddedisconnect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeDisconnect(winmdroot.System.DataExchange.HCONV hConv);

		/// <summary>Enables a client Dynamic Data Exchange Management Library (DDEML) application to attempt to reestablish a conversation with a service that has terminated a conversation with the client.</summary>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the conversation to be reestablished. A client must have obtained the conversation handle by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeconnect">DdeConnect</a> function or from an <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-disconnect">XTYP_DISCONNECT</a> transaction.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddereconnect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCONV</b> If the function succeeds, the return value is the handle to the reestablished conversation. If the function fails, the return value is 0L. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddereconnect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.DataExchange.HCONV DdeReconnect(winmdroot.System.DataExchange.HCONV hConv);

		/// <inheritdoc cref="DdeQueryConvInfo(winmdroot.System.DataExchange.HCONV, uint, winmdroot.System.DataExchange.CONVINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint DdeQueryConvInfo(winmdroot.System.DataExchange.HCONV hConv, uint idTransaction, ref winmdroot.System.DataExchange.CONVINFO pConvInfo)
		{
			fixed (winmdroot.System.DataExchange.CONVINFO* pConvInfoLocal = &pConvInfo)
			{
				uint __result = PInvoke.DdeQueryConvInfo(hConv, idTransaction, pConvInfoLocal);
				return __result;
			}
		}

		/// <summary>Retrieves information about a Dynamic Data Exchange (DDE) transaction and about the conversation in which the transaction takes place.</summary>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the conversation.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequeryconvinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idTransaction">
		/// <para>Type: <b>DWORD</b> The transaction. For asynchronous transactions, this parameter should be a transaction identifier returned by the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeclienttransaction">DdeClientTransaction</a> function. For synchronous transactions, this parameter should be QID_SYNC.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequeryconvinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pConvInfo">
		/// <para>Type: <b>PCONVINFO</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/ns-ddeml-convinfo">CONVINFO</a> structure that receives information about the transaction and conversation. The <i>cb</i> member of the <b>CONVINFO</b> structure must specify the length of the buffer allocated for the structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequeryconvinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is the number of bytes copied into the <a href="/windows/desktop/api/ddeml/ns-ddeml-convinfo">CONVINFO</a> structure. If the function fails, the return value is <b>FALSE</b>. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequeryconvinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint DdeQueryConvInfo(winmdroot.System.DataExchange.HCONV hConv, uint idTransaction, winmdroot.System.DataExchange.CONVINFO* pConvInfo);

		/// <summary>Associates an application-defined value with a conversation handle or a transaction identifier. This is useful for simplifying the processing of asynchronous transactions. An application can use the DdeQueryConvInfo function to retrieve this value.</summary>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the conversation.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddesetuserhandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="id">
		/// <para>Type: <b>DWORD</b> The transaction identifier to associate with the value specified by the <i>hUser</i> parameter. An application should set this parameter to QID_SYNC to associate <i>hUser</i> with the conversation identified by the <i>hConv</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddesetuserhandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hUser">
		/// <para>Type: <b>DWORD_PTR</b> The value to be associated with the conversation handle.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddesetuserhandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddesetuserhandle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeSetUserHandle(winmdroot.System.DataExchange.HCONV hConv, uint id, nuint hUser);

		/// <summary>Abandons the specified asynchronous transaction and releases all resources associated with the transaction.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeabandontransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the conversation in which the transaction was initiated. If this parameter is 0L, all transactions are abandoned (that is, the <i>idTransaction</i> parameter is ignored).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeabandontransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idTransaction">
		/// <para>Type: <b>DWORD</b> The identifier of the transaction to be abandoned. If this parameter is 0L, all active transactions in the specified conversation are abandoned.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeabandontransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeabandontransaction">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeAbandonTransaction(uint idInst, winmdroot.System.DataExchange.HCONV hConv, uint idTransaction);

		/// <summary>Causes the system to send an XTYP_ADVREQ transaction to the calling (server) application's Dynamic Data Exchange (DDE) callback function for each client with an active advise loop on the specified topic and item.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddepostadvise#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszTopic">
		/// <para>Type: <b>HSZ</b> A handle to a string that specifies the topic name. To send notifications for all topics with active advise loops, an application can set this parameter to 0L.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddepostadvise#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszItem">
		/// <para>Type: <b>HSZ</b> A handle to a string that specifies the item name. To send notifications for all items with active advise loops, an application can set this parameter to 0L.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddepostadvise#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddepostadvise">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdePostAdvise(uint idInst, winmdroot.System.DataExchange.HSZ hszTopic, winmdroot.System.DataExchange.HSZ hszItem);

		/// <summary>Enables or disables transactions for a specific conversation or for all conversations currently established by the calling application.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application-instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeenablecallback#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the conversation to enable or disable. If this parameter is <b>NULL</b>, the function affects all conversations.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeenablecallback#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wCmd">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. If the <i>wCmd</i> parameter is <b>EC_QUERYWAITING</b>, and the application transaction queue contains one or more unprocessed transactions that are not being processed, the return value is <b>TRUE</b>; otherwise, it is <b>FALSE</b>. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeenablecallback">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeEnableCallback(uint idInst, winmdroot.System.DataExchange.HCONV hConv, winmdroot.System.DataExchange.DDE_ENABLE_CALLBACK_CMD wCmd);

		/// <summary>Impersonates a Dynamic Data Exchange (DDE) client application in a DDE client conversation.</summary>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the DDE client conversation to be impersonated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeimpersonateclient#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeimpersonateclient">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeImpersonateClient(winmdroot.System.DataExchange.HCONV hConv);

		/// <summary>Registers or unregisters the service names a Dynamic Data Exchange (DDE) server supports.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddenameservice#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hsz1">
		/// <para>Type: <b>HSZ</b> A handle to the string that specifies the service name the server is registering or unregistering. An application that is unregistering all of its service names should set this parameter to 0L.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddenameservice#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hsz2">
		/// <para>Type: <b>HSZ</b> Reserved; should be set to 0L.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddenameservice#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="afCmd">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HDDEDATA</b> If the function succeeds, it returns a nonzero value. That value is not a true <b>HDDEDATA</b> value, merely a Boolean indicator of success. The function is typed <b>HDDEDATA</b> to allow for possible future expansion of the function and a more sophisticated return value. If the function fails, the return value is 0L. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddenameservice">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.DataExchange.HDDEDATA DdeNameService(uint idInst, winmdroot.System.DataExchange.HSZ hsz1, winmdroot.System.DataExchange.HSZ hsz2, winmdroot.System.DataExchange.DDE_NAME_SERVICE_CMD afCmd);

		/// <inheritdoc cref="DdeClientTransaction(byte*, uint, winmdroot.System.DataExchange.HCONV, winmdroot.System.DataExchange.HSZ, uint, winmdroot.System.DataExchange.DDE_CLIENT_TRANSACTION_TYPE, uint, uint*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.System.DataExchange.HDDEDATA DdeClientTransaction(byte? pData, uint cbData, winmdroot.System.DataExchange.HCONV hConv, winmdroot.System.DataExchange.HSZ hszItem, uint wFmt, winmdroot.System.DataExchange.DDE_CLIENT_TRANSACTION_TYPE wType, uint dwTimeout, uint* pdwResult)
		{
			byte pDataLocal = pData.HasValue ? pData.Value : default(byte);
			winmdroot.System.DataExchange.HDDEDATA __result = PInvoke.DdeClientTransaction(pData.HasValue ? &pDataLocal : null, cbData, hConv, hszItem, wFmt, wType, dwTimeout, pdwResult);
			return __result;
		}

		/// <summary>Begins a data transaction between a client and a server. Only a Dynamic Data Exchange (DDE) client application can call this function, and the application can use it only after establishing a conversation with the server.</summary>
		/// <param name="pData">
		/// <para>Type: <b>LPBYTE</b> The beginning of the data the client must pass to the server. Optionally, an application can specify the data handle (<b>HDDEDATA</b>) to pass to the server and in that case the <i>cbData</i> parameter should be set to -1. This parameter is required only if the <i>wType</i> parameter is <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-execute">XTYP_EXECUTE</a> or <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-poke">XTYP_POKE</a>. Otherwise, this parameter should be <b>NULL</b>. For the optional usage of this parameter, <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-poke">XTYP_POKE</a> transactions where <i>pData</i> is a data handle, the handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatedatahandle">DdeCreateDataHandle</a> function, employing the same data format specified in the <i>wFmt</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbData">
		/// <para>Type: <b>DWORD</b> The length, in bytes, of the data pointed to by the <i>pData</i> parameter, including the terminating <b>NULL</b>, if the data is a string. A value of -1 indicates that <i>pData</i> is a data handle that identifies the data being sent.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hConv">
		/// <para>Type: <b>HCONV</b> A handle to the conversation in which the transaction is to take place.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszItem">
		/// <para>Type: <b>HSZ</b> A handle to the data item for which data is being exchanged during the transaction. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatestringhandlea">DdeCreateStringHandle</a> function. This parameter is ignored (and should be set to 0L) if the <i>wType</i> parameter is <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-execute">XTYP_EXECUTE</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wFmt">
		/// <para>Type: <b>UINT</b> The standard clipboard format in which the data item is being submitted or requested. If the transaction specified by the <i>wType</i> parameter does not pass data or is <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-execute">XTYP_EXECUTE</a>, this parameter should be zero. If the transaction specified by the <i>wType</i> parameter references non-execute DDE data ( <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-poke">XTYP_POKE</a>, <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-advstart">XTYP_ADVSTART</a>, <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-advstop">XTYP_ADVSTOP</a>, <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-request">XTYP_REQUEST</a>), the <i>wFmt</i> value must be either a valid predefined (CF_) DDE format or a valid registered clipboard format.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wType">Type: <b>UINT</b></param>
		/// <param name="dwTimeout">
		/// <para>Type: <b>DWORD</b> The maximum amount of time, in milliseconds, that the client will wait for a response from the server application in a synchronous transaction. This parameter should be <b>TIMEOUT_ASYNC</b> for asynchronous transactions.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pdwResult">
		/// <para>Type: <b>LPDWORD</b> A pointer to a variable that receives the result of the transaction. An application that does not check the result can use <b>NULL</b> for this value. For synchronous transactions, the low-order word of this variable contains any applicable DDE_ flags resulting from the transaction. This provides support for applications dependent on <b>DDE_APPSTATUS</b> bits. It is, however, recommended that applications no longer use these bits because they may not be supported in future versions of the <a href="https://docs.microsoft.com/windows/desktop/dataxchg/dynamic-data-exchange-management-library">Dynamic Data Exchange Management Library</a> (DDEML). For asynchronous transactions, this variable is filled with a unique transaction identifier for use with the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeabandontransaction">DdeAbandonTransaction</a> function and the <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-xact-complete">XTYP_XACT_COMPLETE</a> transaction.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HDDEDATA</b> If the function succeeds, the return value is a data handle that identifies the data for successful synchronous transactions in which the client expects data from the server. The return value is nonzero for successful asynchronous transactions and for synchronous transactions in which the client does not expect data. The return value is zero for all unsuccessful transactions. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeclienttransaction">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.System.DataExchange.HDDEDATA DdeClientTransaction([Optional] byte* pData, uint cbData, winmdroot.System.DataExchange.HCONV hConv, winmdroot.System.DataExchange.HSZ hszItem, uint wFmt, winmdroot.System.DataExchange.DDE_CLIENT_TRANSACTION_TYPE wType, uint dwTimeout, [Optional] uint* pdwResult);

		/// <inheritdoc cref="DdeCreateDataHandle(uint, byte*, uint, uint, winmdroot.System.DataExchange.HSZ, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.System.DataExchange.HDDEDATA DdeCreateDataHandle(uint idInst, byte? pSrc, uint cb, uint cbOff, winmdroot.System.DataExchange.HSZ hszItem, uint wFmt, uint afCmd)
		{
			byte pSrcLocal = pSrc.HasValue ? pSrc.Value : default(byte);
			winmdroot.System.DataExchange.HDDEDATA __result = PInvoke.DdeCreateDataHandle(idInst, pSrc.HasValue ? &pSrcLocal : null, cb, cbOff, hszItem, wFmt, afCmd);
			return __result;
		}

		/// <summary>Creates a Dynamic Data Exchange (DDE) object and fills the object with data from the specified buffer. A DDE application uses this function during transactions that involve passing data to the partner application.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pSrc">
		/// <para>Type: <b>LPBYTE</b> The data to be copied to the DDE object. If this parameter is <b>NULL</b>, no data is copied to the object.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cb">
		/// <para>Type: <b>DWORD</b> The amount of memory, in bytes, to copy from the buffer pointed to by <i>pSrc</i>. (include the terminating NULL, if the data is a string). If this parameter is zero, the <i>pSrc</i> parameter is ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbOff">
		/// <para>Type: <b>DWORD</b> An offset, in bytes, from the beginning of the buffer pointed to by the <i>pSrc</i> parameter. The data beginning at this offset is copied from the buffer to the DDE object.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hszItem">
		/// <para>Type: <b>HSZ</b> A handle to the string that specifies the data item corresponding to the DDE object. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatestringhandlea">DdeCreateStringHandle</a> function. If the data handle is to be used in an <a href="https://docs.microsoft.com/windows/desktop/dataxchg/xtyp-execute">XTYP_EXECUTE</a> transaction, this parameter must be 0L.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wFmt">
		/// <para>Type: <b>UINT</b> The standard clipboard format of the data.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="afCmd">
		/// <para>Type: <b>UINT</b> The creation flags. This parameter can be <b>HDATA_APPOWNED</b>, which specifies that the server application calling the <b>DdeCreateDataHandle</b> function owns the data handle this function creates. This flag enables the application to share the data handle with other DDEML applications rather than creating a separate handle to pass to each application. If this flag is specified, the application must eventually free the shared memory object associated with the handle by using the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddefreedatahandle">DdeFreeDataHandle</a> function. If this flag is not specified, the handle becomes invalid in the application that created the handle after the data handle is returned by the application's DDE callback function or is used as a parameter in another DDEML function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HDDEDATA</b> If the function succeeds, the return value is a data handle. If the function fails, the return value is 0L. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatedatahandle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.System.DataExchange.HDDEDATA DdeCreateDataHandle(uint idInst, [Optional] byte* pSrc, uint cb, uint cbOff, winmdroot.System.DataExchange.HSZ hszItem, uint wFmt, uint afCmd);

		/// <inheritdoc cref="DdeAddData(winmdroot.System.DataExchange.HDDEDATA, byte*, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.System.DataExchange.HDDEDATA DdeAddData(winmdroot.System.DataExchange.HDDEDATA hData, in byte pSrc, uint cb, uint cbOff)
		{
			fixed (byte* pSrcLocal = &pSrc)
			{
				winmdroot.System.DataExchange.HDDEDATA __result = PInvoke.DdeAddData(hData, pSrcLocal, cb, cbOff);
				return __result;
			}
		}

		/// <summary>Adds data to the specified Dynamic Data Exchange (DDE) object.</summary>
		/// <param name="hData">
		/// <para>Type: <b>HDDEDATA</b> A handle to the DDE object that receives additional data.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeadddata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pSrc">
		/// <para>Type: <b>LPBYTE</b> The data to be added to the DDE object.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeadddata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cb">
		/// <para>Type: <b>DWORD</b> The length, in bytes, of the data to be added to the DDE object, including the terminating <b>NULL</b>, if the data is a string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeadddata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbOff">
		/// <para>Type: <b>DWORD</b> An offset, in bytes, from the beginning of the DDE object. The additional data is copied to the object beginning at this offset.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeadddata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HDDEDATA</b> If the function succeeds, the return value is a new handle to the DDE object. The new handle is used in all references to the object. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeadddata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.System.DataExchange.HDDEDATA DdeAddData(winmdroot.System.DataExchange.HDDEDATA hData, byte* pSrc, uint cb, uint cbOff);

		/// <summary>Copies data from the specified Dynamic Data Exchange (DDE) object to the specified local buffer.</summary>
		/// <param name="hData">
		/// <para>Type: <b>HDDEDATA</b> A handle to the DDE object that contains the data to copy.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddegetdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pDst">
		/// <para>Type: <b>LPBYTE</b> A pointer to the buffer that receives the data. If this parameter is <b>NULL</b>, the <b>DdeGetData</b> function returns the amount of data, in bytes, that would be copied to the buffer.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddegetdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbMax">
		/// <para>Type: <b>DWORD</b> The maximum amount of data, in bytes, to copy to the buffer pointed to by the <i>pDst</i> parameter. Typically, this parameter specifies the length of the buffer pointed to by <i>pDst</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddegetdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbOff">
		/// <para>Type: <b>DWORD</b> An offset within the DDE object. Data is copied from the object beginning at this offset.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddegetdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> If the <i>pDst</i> parameter points to a buffer, the return value is the size, in bytes, of the memory object associated with the data handle or the size specified in the <i>cbMax</i> parameter, whichever is lower. If the <i>pDst</i> parameter is <b>NULL</b>, the return value is the size, in bytes, of the memory object associated with the data handle. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddegetdata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint DdeGetData(winmdroot.System.DataExchange.HDDEDATA hData, [Optional] byte* pDst, uint cbMax, uint cbOff);

		/// <summary>Provides access to the data in the specified Dynamic Data Exchange (DDE) object. An application must call the DdeUnaccessData function when it has finished accessing the data in the object.</summary>
		/// <param name="hData">
		/// <para>Type: <b>HDDEDATA</b> A handle to the DDE object to be accessed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeaccessdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pcbDataSize">
		/// <para>Type: <b>LPDWORD</b> A pointer to a variable that receives the size, in bytes, of the DDE object identified by the <i>hData</i> parameter. If this parameter is <b>NULL</b>, no size information is returned.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeaccessdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPBYTE</b> If the function succeeds, the return value is a pointer to the first byte of data in the DDE object. If the function fails, the return value is <b>NULL</b>. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeaccessdata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe byte* DdeAccessData(winmdroot.System.DataExchange.HDDEDATA hData, [Optional] uint* pcbDataSize);

		/// <summary>Unaccesses a Dynamic Data Exchange (DDE) object. An application must call this function after it has finished accessing the object.</summary>
		/// <param name="hData">
		/// <para>Type: <b>HDDEDATA</b> A handle to the DDE object.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeunaccessdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddeunaccessdata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeUnaccessData(winmdroot.System.DataExchange.HDDEDATA hData);

		/// <summary>Frees a Dynamic Data Exchange (DDE) object and deletes the data handle associated with the object.</summary>
		/// <param name="hData">
		/// <para>Type: <b>HDDEDATA</b> A handle to the DDE object to be freed. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatedatahandle">DdeCreateDataHandle</a> function or returned by the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeclienttransaction">DdeClientTransaction</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddefreedatahandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddefreedatahandle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeFreeDataHandle(winmdroot.System.DataExchange.HDDEDATA hData);

		/// <summary>Retrieves the most recent error code set by the failure of a Dynamic Data Exchange Management Library (DDEML) function and resets the error code to DMLERR_NO_ERROR.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddegetlasterror#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is the last error code, which can be one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddegetlasterror">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint DdeGetLastError(uint idInst);

		/// <inheritdoc cref="DdeCreateStringHandle(uint, winmdroot.Foundation.PCWSTR, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.System.DataExchange.HSZ DdeCreateStringHandle(uint idInst, string psz, int iCodePage)
		{
			fixed (char* pszLocal = psz)
			{
				winmdroot.System.DataExchange.HSZ __result = PInvoke.DdeCreateStringHandle(idInst, pszLocal, iCodePage);
				return __result;
			}
		}

		/// <summary>Creates a handle that identifies the specified string. A Dynamic Data Exchange (DDE) client or server application can pass the string handle as a parameter to other Dynamic Data Exchange Management Library (DDEML) functions.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatestringhandlew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="psz">
		/// <para>Type: <b>LPTSTR</b> The null-terminated string for which a handle is to be created. This string can be up to 255 characters. The reason for this limit is that DDEML string management functions are implemented using atoms.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatestringhandlew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="iCodePage">
		/// <para>Type: <b>int</b> The code page to be used to render the string. This value should be either <b>CP_WINANSI</b> (the default code page) or CP_WINUNICODE, depending on whether the ANSI or Unicode version of <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> was called by the client application.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatestringhandlew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HSZ</b> If the function succeeds, the return value is a string handle. If the function fails, the return value is 0L. The <a href="/windows/desktop/api/ddeml/nf-ddeml-ddegetlasterror">DdeGetLastError</a> function can be used to get the error code, which can be one of the following values:</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecreatestringhandlew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DdeCreateStringHandleW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.DataExchange.HSZ DdeCreateStringHandle(uint idInst, winmdroot.Foundation.PCWSTR psz, int iCodePage);

		/// <summary>Copies text associated with a string handle into a buffer.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerystringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hsz">
		/// <para>Type: <b>HSZ</b> A handle to the string to copy. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatestringhandlea">DdeCreateStringHandle</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerystringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="psz">
		/// <para>Type: <b>LPTSTR</b> A pointer to a buffer that receives the string. To obtain the length of the string, this parameter should be set to <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerystringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchMax">
		/// <para>Type: <b>DWORD</b> The length, in characters, of the buffer pointed to by the <i>psz</i> parameter. For the ANSI version of the function, this is the number of bytes; for the Unicode version, this is the number of characters. If the string is longer than ( <i>cchMax</i>– 1), it will be truncated. If the <i>psz</i> parameter is set to <b>NULL</b>, this parameter is ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerystringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="iCodePage">
		/// <para>Type: <b>int</b> The code page used to render the string. This value should be either <b>CP_WINANSI</b> or <b>CP_WINUNICODE</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerystringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> If the <i>psz</i> parameter specified a valid pointer, the return value is the length, in characters, of the returned text (not including the terminating null character). If the <i>psz</i> parameter specified a <b>NULL</b> pointer, the return value is the length of the text associated with the <i>hsz</i> parameter (not including the terminating null character). If an error occurs, the return value is 0L.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddequerystringw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DdeQueryStringW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint DdeQueryString(uint idInst, winmdroot.System.DataExchange.HSZ hsz, winmdroot.Foundation.PWSTR psz, uint cchMax, int iCodePage);

		/// <summary>Frees a string handle in the calling application.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddefreestringhandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hsz">
		/// <para>Type: <b>HSZ</b> A handle to the string handle to be freed. This handle must have been created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddecreatestringhandlea">DdeCreateStringHandle</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddefreestringhandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddefreestringhandle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeFreeStringHandle(uint idInst, winmdroot.System.DataExchange.HSZ hsz);

		/// <summary>Increments the usage count associated with the specified handle.</summary>
		/// <param name="idInst">
		/// <para>Type: <b>DWORD</b> The application instance identifier obtained by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/ddeml/nf-ddeml-ddeinitializea">DdeInitialize</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddekeepstringhandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hsz">
		/// <para>Type: <b>HSZ</b> A handle to the string handle to be saved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddekeepstringhandle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddekeepstringhandle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DdeKeepStringHandle(uint idInst, winmdroot.System.DataExchange.HSZ hsz);

		/// <summary>Compares the values of two string handles. The value of a string handle is not related to the case of the associated string.</summary>
		/// <param name="hsz1">
		/// <para>Type: <b>HSZ</b> A handle to the first string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecmpstringhandles#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hsz2">
		/// <para>Type: <b>HSZ</b> A handle to the second string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecmpstringhandles#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> The return value can be one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ddeml/nf-ddeml-ddecmpstringhandles">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int DdeCmpStringHandles(winmdroot.System.DataExchange.HSZ hsz1, winmdroot.System.DataExchange.HSZ hsz2);

		/// <summary>Opens the clipboard for examination and prevents other applications from modifying the clipboard content.</summary>
		/// <param name="hWndNewOwner">
		/// <para>Type: <b>HWND</b> A handle to the window to be associated with the open clipboard. If this parameter is <b>NULL</b>, the open clipboard is associated with the current task.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openclipboard#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openclipboard">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL OpenClipboard(winmdroot.Foundation.HWND hWndNewOwner);

		/// <summary>Closes the clipboard.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closeclipboard">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CloseClipboard();

		/// <summary>Retrieves the clipboard sequence number for the current window station.</summary>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The return value is the clipboard sequence number. If you do not have <b>WINSTA_ACCESSCLIPBOARD</b> access to the window station, the function returns zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboardsequencenumber">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetClipboardSequenceNumber();

		/// <summary>Retrieves the window handle of the current owner of the clipboard.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the handle to the window that owns the clipboard. If the clipboard is not owned, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboardowner">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetClipboardOwner();

		/// <summary>Adds the specified window to the chain of clipboard viewers. Clipboard viewer windows receive a WM_DRAWCLIPBOARD message whenever the content of the clipboard changes. This function is used for backward compatibility with earlier versions of Windows.</summary>
		/// <param name="hWndNewViewer">
		/// <para>Type: <b>HWND</b> A handle to the window to be added to the clipboard chain.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclipboardviewer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value identifies the next window in the clipboard viewer chain. If an error occurs or there are no other windows in the clipboard viewer chain, the return value is NULL. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclipboardviewer">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND SetClipboardViewer(winmdroot.Foundation.HWND hWndNewViewer);

		/// <summary>Retrieves the handle to the first window in the clipboard viewer chain.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the handle to the first window in the clipboard viewer chain. If there is no clipboard viewer, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboardviewer">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetClipboardViewer();

		/// <summary>Removes a specified window from the chain of clipboard viewers.</summary>
		/// <param name="hWndRemove">
		/// <para>Type: <b>HWND</b> A handle to the window to be removed from the chain. The handle must have been passed to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setclipboardviewer">SetClipboardViewer</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changeclipboardchain#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndNewNext">
		/// <para>Type: <b>HWND</b> A handle to the window that follows the <i>hWndRemove</i> window in the clipboard viewer chain. (This is the handle returned by <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setclipboardviewer">SetClipboardViewer</a>, unless the sequence was changed in response to a <a href="https://docs.microsoft.com/windows/desktop/dataxchg/wm-changecbchain">WM_CHANGECBCHAIN</a> message.)</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changeclipboardchain#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value indicates the result of passing the <a href="/windows/desktop/dataxchg/wm-changecbchain">WM_CHANGECBCHAIN</a> message to the windows in the clipboard viewer chain. Because a window in the chain typically returns <b>FALSE</b> when it processes <b>WM_CHANGECBCHAIN</b>, the return value from <b>ChangeClipboardChain</b> is typically <b>FALSE</b>. If there is only one window in the chain, the return value is typically <b>TRUE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changeclipboardchain">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ChangeClipboardChain(winmdroot.Foundation.HWND hWndRemove, winmdroot.Foundation.HWND hWndNewNext);

		/// <inheritdoc cref="SetClipboardData(uint, winmdroot.Foundation.HANDLE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe Microsoft.Win32.SafeHandles.SafeFileHandle SetClipboardData(uint uFormat, SafeHandle hMem)
		{
			bool hMemAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hMemLocal;
				if (hMem is object)
				{
					hMem.DangerousAddRef(ref hMemAddRef);
					hMemLocal = (winmdroot.Foundation.HANDLE)hMem.DangerousGetHandle();
				}
				else
					hMemLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.Foundation.HANDLE __result = PInvoke.SetClipboardData(uFormat, hMemLocal);
				return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hMemAddRef)
					hMem.DangerousRelease();
			}
		}

		/// <summary>Places data on the clipboard in a specified clipboard format.</summary>
		/// <param name="uFormat">
		/// <para>Type: <b>UINT</b> The clipboard format. This parameter can be a registered format or any of the standard clipboard formats. For more information, see <a href="https://docs.microsoft.com/windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a> and <a href="https://docs.microsoft.com/windows/desktop/dataxchg/clipboard-formats">Registered Clipboard Formats</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclipboarddata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hMem">
		/// <para>Type: <b>HANDLE</b> A handle to the data in the specified format. This parameter can be <b>NULL</b>, indicating that the window provides data in the specified clipboard format (renders the format) upon request; this is known as [delayed rendering](/windows/win32/dataxchg/clipboard-operations#delayed-rendering). If a window delays rendering, it must process the [WM_RENDERFORMAT](/windows/win32/dataxchg/wm-renderformat) and [WM_RENDERALLFORMATS](/windows/win32/dataxchg/wm-renderallformats) messages. If <b>SetClipboardData</b> succeeds, the system owns the object identified by the <i>hMem</i> parameter. The application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-closeclipboard">CloseClipboard</a> function is called. (The memory must be unlocked before the Clipboard is closed.) If the <i>hMem</i> parameter identifies a memory object, the object must have been allocated using the function with the <b>GMEM_MOVEABLE</b> flag.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclipboarddata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HANDLE</b> If the function succeeds, the return value is the handle to the data. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclipboarddata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HANDLE SetClipboardData(uint uFormat, winmdroot.Foundation.HANDLE hMem);

		/// <inheritdoc cref="GetClipboardData(uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe Microsoft.Win32.SafeHandles.SafeFileHandle GetClipboardData_SafeHandle(uint uFormat)
		{
			winmdroot.Foundation.HANDLE __result = PInvoke.GetClipboardData(uFormat);
			return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
		}

		/// <summary>Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously.</summary>
		/// <param name="uFormat">
		/// <para>Type: <b>UINT</b> A clipboard format. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com/windows/desktop/dataxchg/clipboard-formats">Standard Clipboard Formats</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboarddata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HANDLE</b> If the function succeeds, the return value is the handle to a clipboard object in the specified format. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboarddata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HANDLE GetClipboardData(uint uFormat);

		/// <inheritdoc cref="RegisterClipboardFormat(winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint RegisterClipboardFormat(string lpszFormat)
		{
			fixed (char* lpszFormatLocal = lpszFormat)
			{
				uint __result = PInvoke.RegisterClipboardFormat(lpszFormatLocal);
				return __result;
			}
		}

		/// <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
		/// <param name="lpszFormat">
		/// <para>Type: <b>LPCTSTR</b> The name of the new format.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclipboardformatw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value identifies the registered clipboard format. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclipboardformatw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "RegisterClipboardFormatW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint RegisterClipboardFormat(winmdroot.Foundation.PCWSTR lpszFormat);

		/// <summary>Retrieves the number of different data formats currently on the clipboard.</summary>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the number of different data formats currently on the clipboard. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-countclipboardformats">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int CountClipboardFormats();

		/// <summary>Enumerates the data formats currently available on the clipboard.</summary>
		/// <param name="format">
		/// <para>Type: <b>UINT</b> A clipboard format that is known to be available. To start an enumeration of clipboard formats, set <i>format</i> to zero. When <i>format</i> is zero, the function retrieves the first available clipboard format. For subsequent calls during an enumeration, set <i>format</i> to the result of the previous <b>EnumClipboardFormats</b> call.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumclipboardformats#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is the clipboard format that follows the specified format, namely the next available clipboard format. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the clipboard is not open, the function fails. If there are no more clipboard formats to enumerate, the return value is zero. In this case, the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function returns the value <b>ERROR_SUCCESS</b>. This lets you distinguish between function failure and the end of enumeration.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumclipboardformats">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint EnumClipboardFormats(uint format);

		/// <summary>Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.</summary>
		/// <param name="format">
		/// <para>Type: <b>UINT</b> The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboardformatnamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszFormatName">
		/// <para>Type: <b>LPTSTR</b> The buffer that is to receive the format name.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboardformatnamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchMaxCount">
		/// <para>Type: <b>int</b> The maximum length, in characters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboardformatnamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the length, in characters, of the string copied to the buffer. If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipboardformatnamew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetClipboardFormatNameW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetClipboardFormatName(uint format, winmdroot.Foundation.PWSTR lpszFormatName, int cchMaxCount);

		/// <summary>Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-emptyclipboard">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EmptyClipboard();

		/// <summary>Determines whether the clipboard contains data in the specified format.</summary>
		/// <param name="format">
		/// <para>Type: <b>UINT</b> A standard or registered clipboard format. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com/windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a> .</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isclipboardformatavailable#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the clipboard format is available, the return value is nonzero. If the clipboard format is not available, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isclipboardformatavailable">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsClipboardFormatAvailable(uint format);

		/// <inheritdoc cref="GetPriorityClipboardFormat(uint*, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int GetPriorityClipboardFormat(Span<uint> paFormatPriorityList)
		{
			fixed (uint* paFormatPriorityListLocal = paFormatPriorityList)
			{
				int __result = PInvoke.GetPriorityClipboardFormat(paFormatPriorityListLocal, paFormatPriorityList.Length);
				return __result;
			}
		}

		/// <summary>Retrieves the first available clipboard format in the specified list.</summary>
		/// <param name="paFormatPriorityList">
		/// <para>Type: <b>UINT*</b> The clipboard formats, in priority order. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com/windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a> .</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpriorityclipboardformat#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cFormats">
		/// <para>Type: <b>int</b> The number of entries in the <i>paFormatPriorityList</i> array. This value must not be greater than the number of entries in the list.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpriorityclipboardformat#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the first clipboard format in the list for which data is available. If the clipboard is empty, the return value is NULL. If the clipboard contains data, but not in any of the specified formats, the return value is –1. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpriorityclipboardformat">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int GetPriorityClipboardFormat(uint* paFormatPriorityList, int cFormats);

		/// <summary>Retrieves the handle to the window that currently has the clipboard open.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the handle to the window that has the clipboard open. If no window has the clipboard open, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getopenclipboardwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetOpenClipboardWindow();

		/// <summary>Places the given window in the system-maintained clipboard format listener list.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be placed in the clipboard format listener list.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-addclipboardformatlistener#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise. Call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> for additional details.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-addclipboardformatlistener">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL AddClipboardFormatListener(winmdroot.Foundation.HWND hwnd);

		/// <summary>Removes the given window from the system-maintained clipboard format listener list.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window to remove from the clipboard format listener list.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removeclipboardformatlistener#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise. Call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> for additional details.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removeclipboardformatlistener">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL RemoveClipboardFormatListener(winmdroot.Foundation.HWND hwnd);

		/// <inheritdoc cref="GetUpdatedClipboardFormats(uint*, uint, uint*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL GetUpdatedClipboardFormats(Span<uint> lpuiFormats, out uint pcFormatsOut)
		{
			fixed (uint* pcFormatsOutLocal = &pcFormatsOut)
			{
				fixed (uint* lpuiFormatsLocal = lpuiFormats)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.GetUpdatedClipboardFormats(lpuiFormatsLocal, (uint )lpuiFormats.Length, pcFormatsOutLocal);
					return __result;
				}
			}
		}

		/// <summary>Retrieves the currently supported clipboard formats.</summary>
		/// <param name="lpuiFormats">
		/// <para>Type: <b>PUINT</b> An array of clipboard formats. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com/windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getupdatedclipboardformats#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cFormats">
		/// <para>Type: <b>UINT</b> The number of entries in the array pointed to by <i>lpuiFormats</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getupdatedclipboardformats#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pcFormatsOut">
		/// <para>Type: <b>PUINT</b> The actual number of clipboard formats in the array pointed to by <i>lpuiFormats</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getupdatedclipboardformats#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The function returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> for additional details.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getupdatedclipboardformats">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetUpdatedClipboardFormats(uint* lpuiFormats, uint cFormats, uint* pcFormatsOut);

		/// <summary>Logs off the interactive user, shuts down the system, or shuts down and restarts the system.</summary>
		/// <param name="uFlags"></param>
		/// <param name="dwReason">
		/// <para>The reason for initiating the shutdown. This parameter must be one of the <a href="https://docs.microsoft.com/windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>. If this parameter is zero, the SHTDN_REASON_FLAG_PLANNED reason code  will not be set and therefore the default action is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-exitwindowsex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. Because the function executes asynchronously, a nonzero return value indicates that the shutdown has been initiated. It does not indicate whether the shutdown will succeed. It is possible that the system, the user, or another application will abort the shutdown. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-exitwindowsex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL ExitWindowsEx(winmdroot.System.Shutdown.EXIT_WINDOWS_FLAGS uFlags, winmdroot.System.Shutdown.SHUTDOWN_REASON dwReason);

		/// <summary>Locks the workstation's display.</summary>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. Because the function executes asynchronously, a nonzero return value indicates that the operation has been initiated. It does not indicate whether the workstation has been successfully locked. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lockworkstation">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL LockWorkStation();

		/// <inheritdoc cref="ShutdownBlockReasonCreate(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL ShutdownBlockReasonCreate(winmdroot.Foundation.HWND hWnd, string pwszReason)
		{
			fixed (char* pwszReasonLocal = pwszReason)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.ShutdownBlockReasonCreate(hWnd, pwszReasonLocal);
				return __result;
			}
		}

		/// <summary>Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated.</summary>
		/// <param name="hWnd">A handle to the main window of the application.</param>
		/// <param name="pwszReason">The reason the application must block system shutdown. This string will be truncated for display purposes after MAX_STR_BLOCKREASON characters.</param>
		/// <returns>
		/// <para>If the call succeeds, the return value is nonzero. If the call fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-shutdownblockreasoncreate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL ShutdownBlockReasonCreate(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PCWSTR pwszReason);

		/// <inheritdoc cref="ShutdownBlockReasonQuery(winmdroot.Foundation.HWND, winmdroot.Foundation.PWSTR, uint*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL ShutdownBlockReasonQuery(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PWSTR pwszBuff, ref uint pcchBuff)
		{
			fixed (uint* pcchBuffLocal = &pcchBuff)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.ShutdownBlockReasonQuery(hWnd, pwszBuff, pcchBuffLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the reason string set by the ShutdownBlockReasonCreate function.</summary>
		/// <param name="hWnd">A handle to the main window of the application.</param>
		/// <param name="pwszBuff">A pointer to a buffer that receives the reason string. If this parameter is <b>NULL</b>, the function retrieves the number of characters in the reason string.</param>
		/// <param name="pcchBuff">A pointer to a variable that specifies the size of the <i>pwszBuff</i> buffer, in characters. If the function succeeds, this variable receives the number of characters copied into the buffer, including the <b>null</b>-terminating character. If the buffer is too small, the variable receives the required buffer size, in characters, not including the <b>null</b>-terminating character.</param>
		/// <returns>
		/// <para>If the call succeeds, the return value is nonzero. If the call fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-shutdownblockreasonquery">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL ShutdownBlockReasonQuery(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PWSTR pwszBuff, uint* pcchBuff);

		/// <summary>Indicates that the system can be shut down and frees the reason string.</summary>
		/// <param name="hWnd">A handle to the main window of the application.</param>
		/// <returns>
		/// <para>If the call succeeds, the return value is nonzero. If the call fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-shutdownblockreasondestroy">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL ShutdownBlockReasonDestroy(winmdroot.Foundation.HWND hWnd);

		/// <summary>Closes an open handle to a desktop object.</summary>
		/// <param name="hDesktop">
		/// <para>A handle to the desktop to be closed. This can be a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createdesktopa">CreateDesktop</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-opendesktopa">OpenDesktop</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openinputdesktop">OpenInputDesktop</a> functions. Do not specify the handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getthreaddesktop">GetThreadDesktop</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closedesktop#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closedesktop">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CloseDesktop(winmdroot.System.StationsAndDesktops.HDESK hDesktop);

		/// <inheritdoc cref="CreateDesktop(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR, winmdroot.Graphics.Gdi.DEVMODEW*, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS, uint, winmdroot.Security.SECURITY_ATTRIBUTES*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe CloseDesktopSafeHandle CreateDesktop(string lpszDesktop, string lpszDevice, ref winmdroot.Graphics.Gdi.DEVMODEW pDevmode, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, uint dwDesiredAccess, winmdroot.Security.SECURITY_ATTRIBUTES? lpsa)
		{
			fixed (winmdroot.Graphics.Gdi.DEVMODEW* pDevmodeLocal = &pDevmode)
			{
				fixed (char* lpszDeviceLocal = lpszDevice)
				{
					fixed (char* lpszDesktopLocal = lpszDesktop)
					{
						winmdroot.Security.SECURITY_ATTRIBUTES lpsaLocal = lpsa.HasValue ? lpsa.Value : default(winmdroot.Security.SECURITY_ATTRIBUTES);
						winmdroot.System.StationsAndDesktops.HDESK __result = PInvoke.CreateDesktop(lpszDesktopLocal, lpszDeviceLocal, pDevmodeLocal, dwFlags, dwDesiredAccess, lpsa.HasValue ? &lpsaLocal : null);
						return new CloseDesktopSafeHandle(__result, ownsHandle: true);
					}
				}
			}
		}

		/// <summary>Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread.</summary>
		/// <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).</param>
		/// <param name="lpszDevice">Reserved; must be <b>NULL</b>.</param>
		/// <param name="pDevmode">Reserved; must be <b>NULL</b>.</param>
		/// <param name="dwFlags">
		/// <para>This parameter can be zero or the following value. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwDesiredAccess">
		/// <para>The access to the desktop. For a list of values, see <a href="https://docs.microsoft.com/windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>. This parameter must include the <b>DESKTOP_CREATEWINDOW</b> access right, because internally <b>CreateDesktop</b> uses the handle to create a window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpsa">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited. The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the <a href="/windows/desktop/api/winuser/nf-winuser-closedesktop">CloseDesktop</a> function to close it. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateDesktopW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.System.StationsAndDesktops.HDESK CreateDesktop(winmdroot.Foundation.PCWSTR lpszDesktop, winmdroot.Foundation.PCWSTR lpszDevice, winmdroot.Graphics.Gdi.DEVMODEW* pDevmode, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, uint dwDesiredAccess, [Optional] winmdroot.Security.SECURITY_ATTRIBUTES* lpsa);

		/// <inheritdoc cref="CreateDesktopEx(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR, winmdroot.Graphics.Gdi.DEVMODEW*, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS, uint, winmdroot.Security.SECURITY_ATTRIBUTES*, uint, void*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe CloseDesktopSafeHandle CreateDesktopEx(string lpszDesktop, string lpszDevice, ref winmdroot.Graphics.Gdi.DEVMODEW pDevmode, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, uint dwDesiredAccess, winmdroot.Security.SECURITY_ATTRIBUTES? lpsa, uint ulHeapSize, void* pvoid)
		{
			fixed (winmdroot.Graphics.Gdi.DEVMODEW* pDevmodeLocal = &pDevmode)
			{
				fixed (char* lpszDeviceLocal = lpszDevice)
				{
					fixed (char* lpszDesktopLocal = lpszDesktop)
					{
						winmdroot.Security.SECURITY_ATTRIBUTES lpsaLocal = lpsa.HasValue ? lpsa.Value : default(winmdroot.Security.SECURITY_ATTRIBUTES);
						winmdroot.System.StationsAndDesktops.HDESK __result = PInvoke.CreateDesktopEx(lpszDesktopLocal, lpszDeviceLocal, pDevmodeLocal, dwFlags, dwDesiredAccess, lpsa.HasValue ? &lpsaLocal : null, ulHeapSize, pvoid);
						return new CloseDesktopSafeHandle(__result, ownsHandle: true);
					}
				}
			}
		}

		/// <summary>Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread.</summary>
		/// <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).</param>
		/// <param name="lpszDevice">This parameter is reserved and must be NULL.</param>
		/// <param name="pDevmode">This parameter is reserved and must be NULL.</param>
		/// <param name="dwFlags">
		/// <para>This parameter can be zero or the following value. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwDesiredAccess">
		/// <para>The requested access to the desktop. For a list of values, see <a href="https://docs.microsoft.com/windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
		/// <para>This parameter must include the DESKTOP_CREATEWINDOW access right, because internally <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createdesktopa">CreateDesktop</a> uses the handle to create a window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpsa">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
		/// <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="ulHeapSize">The size of the desktop heap, in kilobytes.</param>
		/// <param name="pvoid">This parameter is reserved and must be NULL.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the <a href="/windows/desktop/api/winuser/nf-winuser-closedesktop">CloseDesktop</a> function to close it. If the function fails, the return value is NULL. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdesktopexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateDesktopExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.System.StationsAndDesktops.HDESK CreateDesktopEx(winmdroot.Foundation.PCWSTR lpszDesktop, winmdroot.Foundation.PCWSTR lpszDevice, winmdroot.Graphics.Gdi.DEVMODEW* pDevmode, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, uint dwDesiredAccess, [Optional] winmdroot.Security.SECURITY_ATTRIBUTES* lpsa, uint ulHeapSize, void* pvoid);

		/// <inheritdoc cref="OpenDesktop(winmdroot.Foundation.PCWSTR, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS, winmdroot.Foundation.BOOL, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe CloseDesktopSafeHandle OpenDesktop(string lpszDesktop, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, winmdroot.Foundation.BOOL fInherit, uint dwDesiredAccess)
		{
			fixed (char* lpszDesktopLocal = lpszDesktop)
			{
				winmdroot.System.StationsAndDesktops.HDESK __result = PInvoke.OpenDesktop(lpszDesktopLocal, dwFlags, fInherit, dwDesiredAccess);
				return new CloseDesktopSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Opens the specified desktop object.</summary>
		/// <param name="lpszDesktop">
		/// <para>The name of the desktop to be opened. Desktop names are case-insensitive. This desktop must belong to the current window station.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-opendesktopw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">
		/// <para>This parameter can be zero or the following value. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-opendesktopw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
		/// <param name="dwDesiredAccess">
		/// <para>The access to the desktop. For a list of access rights, see <a href="https://docs.microsoft.com/windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-opendesktopw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the opened desktop. When you are finished using the handle, call the <a href="/windows/desktop/api/winuser/nf-winuser-closedesktop">CloseDesktop</a> function to close it. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-opendesktopw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "OpenDesktopW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.StationsAndDesktops.HDESK OpenDesktop(winmdroot.Foundation.PCWSTR lpszDesktop, winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, winmdroot.Foundation.BOOL fInherit, uint dwDesiredAccess);

		/// <inheritdoc cref="OpenInputDesktop(winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS, winmdroot.Foundation.BOOL, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe CloseDesktopSafeHandle OpenInputDesktop_SafeHandle(winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, winmdroot.Foundation.BOOL fInherit, uint dwDesiredAccess)
		{
			winmdroot.System.StationsAndDesktops.HDESK __result = PInvoke.OpenInputDesktop(dwFlags, fInherit, dwDesiredAccess);
			return new CloseDesktopSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Opens the desktop that receives user input.</summary>
		/// <param name="dwFlags">
		/// <para>This parameter can be zero or the following value. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openinputdesktop#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
		/// <param name="dwDesiredAccess">
		/// <para>The access to the desktop. For a list of access rights, see <a href="https://docs.microsoft.com/windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openinputdesktop#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the desktop that receives user input. When you are finished using the handle, call the <a href="/windows/desktop/api/winuser/nf-winuser-closedesktop">CloseDesktop</a> function to close it. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openinputdesktop">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.StationsAndDesktops.HDESK OpenInputDesktop(winmdroot.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS dwFlags, winmdroot.Foundation.BOOL fInherit, uint dwDesiredAccess);

		/// <summary>Closes an open window station handle.</summary>
		/// <param name="hWinSta">
		/// <para>A handle to the window station to be closed. This handle is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowstationa">CreateWindowStation</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openwindowstationa">OpenWindowStation</a> function. Do not specify the handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getprocesswindowstation">GetProcessWindowStation</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closewindowstation#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>Windows Server 2003 and Windows XP/2000:  </b>This function does not set the last error code on failure.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closewindowstation">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CloseWindowStation(winmdroot.System.StationsAndDesktops.HWINSTA hWinSta);

		/// <inheritdoc cref="EnumDesktops(winmdroot.System.StationsAndDesktops.HWINSTA, winmdroot.System.StationsAndDesktops.DESKTOPENUMPROCW, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EnumDesktops(SafeHandle hwinsta, winmdroot.System.StationsAndDesktops.DESKTOPENUMPROCW lpEnumFunc, winmdroot.Foundation.LPARAM lParam)
		{
			bool hwinstaAddRef = false;
			try
			{
				winmdroot.System.StationsAndDesktops.HWINSTA hwinstaLocal;
				if (hwinsta is object)
				{
					hwinsta.DangerousAddRef(ref hwinstaAddRef);
					hwinstaLocal = (winmdroot.System.StationsAndDesktops.HWINSTA)hwinsta.DangerousGetHandle();
				}
				else
					hwinstaLocal = default(winmdroot.System.StationsAndDesktops.HWINSTA);
				winmdroot.Foundation.BOOL __result = PInvoke.EnumDesktops(hwinstaLocal, lpEnumFunc, lParam);
				return __result;
			}
			finally
			{
				if (hwinstaAddRef)
					hwinsta.DangerousRelease();
			}
		}

		/// <summary>Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.</summary>
		/// <param name="hwinsta">
		/// <para>A handle to the window station whose desktops are to be enumerated. This handle is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowstationa">CreateWindowStation</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getprocesswindowstation">GetProcessWindowStation</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openwindowstationa">OpenWindowStation</a> function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>. If this parameter is NULL, the current window station is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdesktopsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpEnumFunc">
		/// <para>A pointer to an application-defined <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms682612(v=vs.85)">EnumDesktopProc</a> callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdesktopsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">An application-defined value to be passed to the callback function.</param>
		/// <returns>
		/// <para>If the function succeeds, it returns the  nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>. If the function is unable to perform the enumeration, the return value is zero. Call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> to get extended error information. If the callback function fails, the return value is zero. The callback function can  call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> to set an error code for the caller to retrieve by calling <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdesktopsw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "EnumDesktopsW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnumDesktops(winmdroot.System.StationsAndDesktops.HWINSTA hwinsta, winmdroot.System.StationsAndDesktops.DESKTOPENUMPROCW lpEnumFunc, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="EnumDesktopWindows(winmdroot.System.StationsAndDesktops.HDESK, winmdroot.UI.WindowsAndMessaging.WNDENUMPROC, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EnumDesktopWindows(SafeHandle hDesktop, winmdroot.UI.WindowsAndMessaging.WNDENUMPROC lpfn, winmdroot.Foundation.LPARAM lParam)
		{
			bool hDesktopAddRef = false;
			try
			{
				winmdroot.System.StationsAndDesktops.HDESK hDesktopLocal;
				if (hDesktop is object)
				{
					hDesktop.DangerousAddRef(ref hDesktopAddRef);
					hDesktopLocal = (winmdroot.System.StationsAndDesktops.HDESK)hDesktop.DangerousGetHandle();
				}
				else
					hDesktopLocal = default(winmdroot.System.StationsAndDesktops.HDESK);
				winmdroot.Foundation.BOOL __result = PInvoke.EnumDesktopWindows(hDesktopLocal, lpfn, lParam);
				return __result;
			}
			finally
			{
				if (hDesktopAddRef)
					hDesktop.DangerousRelease();
			}
		}

		/// <summary>Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn, to an application-defined callback function.</summary>
		/// <param name="hDesktop">
		/// <para>A handle to the desktop whose top-level windows are to be enumerated. This handle is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createdesktopa">CreateDesktop</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getthreaddesktop">GetThreadDesktop</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-opendesktopa">OpenDesktop</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openinputdesktop">OpenInputDesktop</a> function, and must have the <b>DESKTOP_READOBJECTS</b> access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>. If this parameter is NULL, the current desktop is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdesktopwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpfn">
		/// <para>A pointer to an application-defined <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms633498(v=vs.85)">EnumWindowsProc</a> callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdesktopwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">An application-defined value to be passed to the callback function.</param>
		/// <returns>
		/// <para>If the function fails or is unable to perform the enumeration, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. You must ensure that the callback function sets <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> if it fails. <b>Windows Server 2003 and Windows XP/2000:  </b>If there are no windows on the desktop, <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>ERROR_INVALID_HANDLE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdesktopwindows">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnumDesktopWindows(winmdroot.System.StationsAndDesktops.HDESK hDesktop, winmdroot.UI.WindowsAndMessaging.WNDENUMPROC lpfn, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="SwitchDesktop(winmdroot.System.StationsAndDesktops.HDESK)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SwitchDesktop(SafeHandle hDesktop)
		{
			bool hDesktopAddRef = false;
			try
			{
				winmdroot.System.StationsAndDesktops.HDESK hDesktopLocal;
				if (hDesktop is object)
				{
					hDesktop.DangerousAddRef(ref hDesktopAddRef);
					hDesktopLocal = (winmdroot.System.StationsAndDesktops.HDESK)hDesktop.DangerousGetHandle();
				}
				else
					hDesktopLocal = default(winmdroot.System.StationsAndDesktops.HDESK);
				winmdroot.Foundation.BOOL __result = PInvoke.SwitchDesktop(hDesktopLocal);
				return __result;
			}
			finally
			{
				if (hDesktopAddRef)
					hDesktop.DangerousRelease();
			}
		}

		/// <summary>Makes the specified desktop visible and activates it. This enables the desktop to receive input from the user.</summary>
		/// <param name="hDesktop">
		/// <para>A handle to the desktop. This handle is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createdesktopa">CreateDesktop</a> and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-opendesktopa">OpenDesktop</a> functions. This desktop must be associated with the current window station for the process.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-switchdesktop#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. However, <b>SwitchDesktop</b> only sets the last error for the following cases: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-switchdesktop">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SwitchDesktop(winmdroot.System.StationsAndDesktops.HDESK hDesktop);

		/// <inheritdoc cref="SetThreadDesktop(winmdroot.System.StationsAndDesktops.HDESK)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetThreadDesktop(SafeHandle hDesktop)
		{
			bool hDesktopAddRef = false;
			try
			{
				winmdroot.System.StationsAndDesktops.HDESK hDesktopLocal;
				if (hDesktop is object)
				{
					hDesktop.DangerousAddRef(ref hDesktopAddRef);
					hDesktopLocal = (winmdroot.System.StationsAndDesktops.HDESK)hDesktop.DangerousGetHandle();
				}
				else
					hDesktopLocal = default(winmdroot.System.StationsAndDesktops.HDESK);
				winmdroot.Foundation.BOOL __result = PInvoke.SetThreadDesktop(hDesktopLocal);
				return __result;
			}
			finally
			{
				if (hDesktopAddRef)
					hDesktop.DangerousRelease();
			}
		}

		/// <summary>Assigns the specified desktop to the calling thread. All subsequent operations on the desktop use the access rights granted to the desktop.</summary>
		/// <param name="hDesktop">
		/// <para>A handle to the desktop to be assigned to the calling thread. This handle is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createdesktopa">CreateDesktop</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getthreaddesktop">GetThreadDesktop</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-opendesktopa">OpenDesktop</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openinputdesktop">OpenInputDesktop</a> function. This desktop must be associated with the current window station for the process.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setthreaddesktop#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setthreaddesktop">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetThreadDesktop(winmdroot.System.StationsAndDesktops.HDESK hDesktop);

		/// <inheritdoc cref="GetThreadDesktop(uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe CloseDesktopSafeHandle GetThreadDesktop_SafeHandle(uint dwThreadId)
		{
			winmdroot.System.StationsAndDesktops.HDESK __result = PInvoke.GetThreadDesktop(dwThreadId);
			return new CloseDesktopSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Retrieves a handle to the desktop assigned to the specified thread.</summary>
		/// <param name="dwThreadId">
		/// <para>The thread identifier. The <a href="https://docs.microsoft.com/windows/desktop/api/processthreadsapi/nf-processthreadsapi-getcurrentthreadid">GetCurrentThreadId</a> and <a href="https://docs.microsoft.com/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessa">CreateProcess</a> functions return thread identifiers.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getthreaddesktop#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the desktop associated with the specified thread. You do not need to call the <a href="/windows/desktop/api/winuser/nf-winuser-closedesktop">CloseDesktop</a> function to close the returned handle. If the function fails, the return value is NULL. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getthreaddesktop">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.StationsAndDesktops.HDESK GetThreadDesktop(uint dwThreadId);

		/// <inheritdoc cref="CreateWindowStation(winmdroot.Foundation.PCWSTR, uint, uint, winmdroot.Security.SECURITY_ATTRIBUTES*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe CloseWindowStationSafeHandle CreateWindowStation(string lpwinsta, uint dwFlags, uint dwDesiredAccess, winmdroot.Security.SECURITY_ATTRIBUTES? lpsa)
		{
			fixed (char* lpwinstaLocal = lpwinsta)
			{
				winmdroot.Security.SECURITY_ATTRIBUTES lpsaLocal = lpsa.HasValue ? lpsa.Value : default(winmdroot.Security.SECURITY_ATTRIBUTES);
				winmdroot.System.StationsAndDesktops.HWINSTA __result = PInvoke.CreateWindowStation(lpwinstaLocal, dwFlags, dwDesiredAccess, lpsa.HasValue ? &lpsaLocal : null);
				return new CloseWindowStationSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Creates a window station object, associates it with the calling process, and assigns it to the current session.</summary>
		/// <param name="lpwinsta">
		/// <para>The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\\). Only members of the Administrators group are allowed to specify a name. If <i>lpwinsta</i> is <b>NULL</b> or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getuserobjectinformationa">GetUserObjectInformation</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowstationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">
		/// <para>If this parameter is <b>CWF_CREATE_ONLY</b> and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station. <b>Windows XP/2000:  </b>This parameter is reserved and must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowstationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwDesiredAccess">The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as <b>READ_CONTROL</b> or <b>WRITE_DAC</b>, and a combination of the window station-specific access rights. For more information, see <a href="https://docs.microsoft.com/windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
		/// <param name="lpsa">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is <b>NULL</b>, the handle cannot be inherited. The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new window station. If <i>lpsa</i> is <b>NULL</b>, the window station (and any desktops created within the window) gets a security descriptor that grants <b>GENERIC_ALL</b> access to all users.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowstationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the newly created window station. If the specified window station already exists, the function succeeds and returns a handle to the existing window station. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowstationw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateWindowStationW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.System.StationsAndDesktops.HWINSTA CreateWindowStation(winmdroot.Foundation.PCWSTR lpwinsta, uint dwFlags, uint dwDesiredAccess, [Optional] winmdroot.Security.SECURITY_ATTRIBUTES* lpsa);

		/// <inheritdoc cref="OpenWindowStation(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.BOOL, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe CloseWindowStationSafeHandle OpenWindowStation(string lpszWinSta, winmdroot.Foundation.BOOL fInherit, uint dwDesiredAccess)
		{
			fixed (char* lpszWinStaLocal = lpszWinSta)
			{
				winmdroot.System.StationsAndDesktops.HWINSTA __result = PInvoke.OpenWindowStation(lpszWinStaLocal, fInherit, dwDesiredAccess);
				return new CloseWindowStationSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Opens the specified window station.</summary>
		/// <param name="lpszWinSta">
		/// <para>The name of the window station to be opened. Window station names are case-insensitive. This window station must belong to the current session.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openwindowstationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
		/// <param name="dwDesiredAccess">
		/// <para>The access to the window station. For a list of access rights, see <a href="https://docs.microsoft.com/windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openwindowstationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the handle to the specified window station. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openwindowstationw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "OpenWindowStationW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.StationsAndDesktops.HWINSTA OpenWindowStation(winmdroot.Foundation.PCWSTR lpszWinSta, winmdroot.Foundation.BOOL fInherit, uint dwDesiredAccess);

		/// <summary>Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.</summary>
		/// <param name="lpEnumFunc">
		/// <para>A pointer to an application-defined <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms682643(v=vs.85)">EnumWindowStationProc</a> callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumwindowstationsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">An application-defined value to be passed to the callback function.</param>
		/// <returns>
		/// <para>If the function succeeds, it returns the  nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>. If the function is unable to perform the enumeration, the return value is zero. Call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> to get extended error information. If the callback function fails, the return value is zero. The callback function can  call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> to set an error code for the caller to retrieve by calling <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumwindowstationsw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "EnumWindowStationsW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnumWindowStations(winmdroot.System.StationsAndDesktops.WINSTAENUMPROCW lpEnumFunc, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="SetProcessWindowStation(winmdroot.System.StationsAndDesktops.HWINSTA)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetProcessWindowStation(SafeHandle hWinSta)
		{
			bool hWinStaAddRef = false;
			try
			{
				winmdroot.System.StationsAndDesktops.HWINSTA hWinStaLocal;
				if (hWinSta is object)
				{
					hWinSta.DangerousAddRef(ref hWinStaAddRef);
					hWinStaLocal = (winmdroot.System.StationsAndDesktops.HWINSTA)hWinSta.DangerousGetHandle();
				}
				else
					hWinStaLocal = default(winmdroot.System.StationsAndDesktops.HWINSTA);
				winmdroot.Foundation.BOOL __result = PInvoke.SetProcessWindowStation(hWinStaLocal);
				return __result;
			}
			finally
			{
				if (hWinStaAddRef)
					hWinSta.DangerousRelease();
			}
		}

		/// <summary>Assigns the specified window station to the calling process.</summary>
		/// <param name="hWinSta">
		/// <para>A handle to the window station. This can be a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowstationa">CreateWindowStation</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openwindowstationa">OpenWindowStation</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getprocesswindowstation">GetProcessWindowStation</a> function. This window station must be associated with the current session.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setprocesswindowstation#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setprocesswindowstation">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetProcessWindowStation(winmdroot.System.StationsAndDesktops.HWINSTA hWinSta);

		/// <inheritdoc cref="GetProcessWindowStation()"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe CloseWindowStationSafeHandle GetProcessWindowStation_SafeHandle()
		{
			winmdroot.System.StationsAndDesktops.HWINSTA __result = PInvoke.GetProcessWindowStation();
			return new CloseWindowStationSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Retrieves a handle to the current window station for the calling process.</summary>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the window station. If the function fails, the return value is NULL. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getprocesswindowstation">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.System.StationsAndDesktops.HWINSTA GetProcessWindowStation();

		/// <inheritdoc cref="GetUserObjectInformation(winmdroot.Foundation.HANDLE, winmdroot.System.StationsAndDesktops.USER_OBJECT_INFORMATION_INDEX, void*, uint, uint*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetUserObjectInformation(SafeHandle hObj, winmdroot.System.StationsAndDesktops.USER_OBJECT_INFORMATION_INDEX nIndex, void* pvInfo, uint nLength, uint* lpnLengthNeeded)
		{
			bool hObjAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hObjLocal;
				if (hObj is object)
				{
					hObj.DangerousAddRef(ref hObjAddRef);
					hObjLocal = (winmdroot.Foundation.HANDLE)hObj.DangerousGetHandle();
				}
				else
					hObjLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.Foundation.BOOL __result = PInvoke.GetUserObjectInformation(hObjLocal, nIndex, pvInfo, nLength, lpnLengthNeeded);
				return __result;
			}
			finally
			{
				if (hObjAddRef)
					hObj.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about the specified window station or desktop object.</summary>
		/// <param name="hObj">
		/// <para>A handle to the window station or desktop object. This handle is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowstationa">CreateWindowStation</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openwindowstationa">OpenWindowStation</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createdesktopa">CreateDesktop</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-opendesktopa">OpenDesktop</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getuserobjectinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex"></param>
		/// <param name="pvInfo">A pointer to a buffer to receive the object information.</param>
		/// <param name="nLength">The size of the buffer pointed to by the <i>pvInfo</i> parameter, in bytes.</param>
		/// <param name="lpnLengthNeeded">A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns FALSE, and none of the information is copied to the <i>pvInfo</i> buffer. If the value of the variable pointed to by <i>lpnLengthNeeded</i> is less than or equal to the value of <i>nLength</i>, the entire information block is copied.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getuserobjectinformationw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetUserObjectInformationW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetUserObjectInformation(winmdroot.Foundation.HANDLE hObj, winmdroot.System.StationsAndDesktops.USER_OBJECT_INFORMATION_INDEX nIndex, [Optional] void* pvInfo, uint nLength, [Optional] uint* lpnLengthNeeded);

		/// <inheritdoc cref="SetUserObjectInformation(winmdroot.Foundation.HANDLE, int, void*, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetUserObjectInformation(SafeHandle hObj, int nIndex, void* pvInfo, uint nLength)
		{
			bool hObjAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hObjLocal;
				if (hObj is object)
				{
					hObj.DangerousAddRef(ref hObjAddRef);
					hObjLocal = (winmdroot.Foundation.HANDLE)hObj.DangerousGetHandle();
				}
				else
					hObjLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.Foundation.BOOL __result = PInvoke.SetUserObjectInformation(hObjLocal, nIndex, pvInfo, nLength);
				return __result;
			}
			finally
			{
				if (hObjAddRef)
					hObj.DangerousRelease();
			}
		}

		/// <summary>Sets information about the specified window station or desktop object.</summary>
		/// <param name="hObj">
		/// <para>A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the  <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowstationa">CreateWindowStation</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openwindowstationa">OpenWindowStation</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createdesktopa">CreateDesktop</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-opendesktopa">OpenDesktop</a> or  <a href="https://docs.microsoft.com/windows/desktop/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess">GetCurrentProcess</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setuserobjectinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex">
		/// <para>The object information to be set. This parameter can be the following value. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setuserobjectinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pvInfo">A pointer to a buffer containing the object information, or a BOOL.</param>
		/// <param name="nLength">The size of the information contained in the buffer pointed to by <i>pvInfo</i>, in bytes.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setuserobjectinformationw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetUserObjectInformationW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetUserObjectInformation(winmdroot.Foundation.HANDLE hObj, int nIndex, void* pvInfo, uint nLength);

		/// <summary>Sends a message to the specified recipients.</summary>
		/// <param name="flags">Type: <b>DWORD</b></param>
		/// <param name="lpInfo">
		/// <para>Type: <b>LPDWORD</b> A pointer to a variable that contains and receives information about the recipients of the message.</para>
		/// <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message. If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessageexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessageexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessageexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessageexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pbsmInfo">
		/// <para>Type: <b>PBSMINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-bsminfo">BSMINFO</a> structure that contains additional information if the request is denied and <i>dwFlags</i> is set to <b>BSF_QUERY</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessageexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>long</b> If the function succeeds, the return value is a positive value. If the function is unable to broadcast the message, the return value is –1. If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessageexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "BroadcastSystemMessageExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe int BroadcastSystemMessageEx(winmdroot.System.StationsAndDesktops.BROADCAST_SYSTEM_MESSAGE_FLAGS flags, [Optional] winmdroot.System.StationsAndDesktops.BROADCAST_SYSTEM_MESSAGE_INFO* lpInfo, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam, [Optional] winmdroot.System.StationsAndDesktops.BSMINFO* pbsmInfo);

		/// <summary>Sends a message to the specified recipients.</summary>
		/// <param name="flags">Type: <b>DWORD</b></param>
		/// <param name="lpInfo">
		/// <para>Type: <b>LPDWORD</b> A pointer to a variable that contains and receives information about the recipients of the message.</para>
		/// <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message. If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>long</b> If the function succeeds, the return value is a positive value. If the function is unable to broadcast the message, the return value is –1. If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-broadcastsystemmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "BroadcastSystemMessageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int BroadcastSystemMessage(winmdroot.System.StationsAndDesktops.BROADCAST_SYSTEM_MESSAGE_FLAGS flags, [Optional] winmdroot.System.StationsAndDesktops.BROADCAST_SYSTEM_MESSAGE_INFO* lpInfo, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Closes the specified device notification handle.</summary>
		/// <param name="Handle">
		/// <para>Device notification handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerdevicenotificationa">RegisterDeviceNotification</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterdevicenotification#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterdevicenotification">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe winmdroot.Foundation.BOOL UnregisterDeviceNotification(void* Handle);

		/// <summary>Attaches or detaches the input processing mechanism of one thread to that of another thread.</summary>
		/// <param name="idAttach">The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.</param>
		/// <param name="idAttachTo">
		/// <para>The identifier of the thread to which <i>idAttach</i> will be attached. This thread cannot be a system thread.</para>
		/// <para>A thread cannot attach to itself. Therefore, <i>idAttachTo</i> cannot equal <i>idAttach</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-attachthreadinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fAttach">If this parameter is <b>TRUE</b>, the two threads are attached. If the parameter is <b>FALSE</b>, the threads are detached.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>Windows Server 2003 and Windows XP:  </b>There is no extended error information; do not call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This behavior changed as of Windows Vista.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-attachthreadinput">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL AttachThreadInput(uint idAttach, uint idAttachTo, winmdroot.Foundation.BOOL fAttach);

		/// <inheritdoc cref="WaitForInputIdle(winmdroot.Foundation.HANDLE, uint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint WaitForInputIdle(SafeHandle hProcess, uint dwMilliseconds)
		{
			bool hProcessAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hProcessLocal;
				if (hProcess is object)
				{
					hProcess.DangerousAddRef(ref hProcessAddRef);
					hProcessLocal = (winmdroot.Foundation.HANDLE)hProcess.DangerousGetHandle();
				}
				else
					hProcessLocal = default(winmdroot.Foundation.HANDLE);
				uint __result = PInvoke.WaitForInputIdle(hProcessLocal, dwMilliseconds);
				return __result;
			}
			finally
			{
				if (hProcessAddRef)
					hProcess.DangerousRelease();
			}
		}

		/// <summary>Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed.</summary>
		/// <param name="hProcess">
		/// <para>A handle to the process. If this process is a console application or does not have a message queue, <b>WaitForInputIdle</b> returns immediately.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-waitforinputidle#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwMilliseconds">The time-out interval, in milliseconds. If <i>dwMilliseconds</i> is INFINITE, the function does not return until the process is idle.</param>
		/// <returns>
		/// <para>The following table shows the possible return values for this function. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-waitforinputidle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern uint WaitForInputIdle(winmdroot.Foundation.HANDLE hProcess, uint dwMilliseconds);

		/// <inheritdoc cref="GetGuiResources(winmdroot.Foundation.HANDLE, winmdroot.System.Threading.GET_GUI_RESOURCES_FLAGS)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint GetGuiResources(SafeHandle hProcess, winmdroot.System.Threading.GET_GUI_RESOURCES_FLAGS uiFlags)
		{
			bool hProcessAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hProcessLocal;
				if (hProcess is object)
				{
					hProcess.DangerousAddRef(ref hProcessAddRef);
					hProcessLocal = (winmdroot.Foundation.HANDLE)hProcess.DangerousGetHandle();
				}
				else
					hProcessLocal = default(winmdroot.Foundation.HANDLE);
				uint __result = PInvoke.GetGuiResources(hProcessLocal, uiFlags);
				return __result;
			}
			finally
			{
				if (hProcessAddRef)
					hProcess.DangerousRelease();
			}
		}

		/// <summary>Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process.</summary>
		/// <param name="hProcess">
		/// <para>A handle to the process. The handle must refer to a process in the current session, and must have the **PROCESS_QUERY_INFORMATION** access right (see [Process security and access rights](/windows/win32/procthread/process-security-and-access-rights)). If this parameter is the special value **GR_GLOBAL**, then the resource usage is reported across all processes in the current session. **Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:** The **GR_GLOBAL** value is not supported until Windows 7 and Windows Server 2008 R2.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getguiresources#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiFlags"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the count of handles to GUI objects in use by the process. If no GUI objects are in use, the return value is zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getguiresources">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern uint GetGuiResources(winmdroot.Foundation.HANDLE hProcess, winmdroot.System.Threading.GET_GUI_RESOURCES_FLAGS uiFlags);

		/// <inheritdoc cref="IsImmersiveProcess(winmdroot.Foundation.HANDLE)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL IsImmersiveProcess(SafeHandle hProcess)
		{
			bool hProcessAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hProcessLocal;
				if (hProcess is object)
				{
					hProcess.DangerousAddRef(ref hProcessAddRef);
					hProcessLocal = (winmdroot.Foundation.HANDLE)hProcess.DangerousGetHandle();
				}
				else
					hProcessLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.Foundation.BOOL __result = PInvoke.IsImmersiveProcess(hProcessLocal);
				return __result;
			}
			finally
			{
				if (hProcessAddRef)
					hProcess.DangerousRelease();
			}
		}

		/// <summary>Determines whether the process belongs to a Windows Store app.</summary>
		/// <param name="hProcess">Target process handle.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isimmersiveprocess">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL IsImmersiveProcess(winmdroot.Foundation.HANDLE hProcess);

		/// <summary>Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows Store app environment. This function is used by development and debugging tools.</summary>
		/// <param name="fEnableExemption">When set to TRUE, indicates a request to disable exemption for the calling process.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setprocessrestrictionexemption">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL SetProcessRestrictionExemption(winmdroot.Foundation.BOOL fEnableExemption);

		/// <summary>Specifies an action or processing for the Input Method Editor (IME) through a specified subfunction.</summary>
		/// <returns>
		/// <para>The result of processing of the subfunction. If the result is not success, one of the following error codes is stored into the <b>wParam</b> of the <a href="/windows/desktop/api/ime/ns-ime-imestruct">IMESTRUCT</a> structure. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//ime/nf-ime-sendimemessageexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SendIMEMessageExW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT SendIMEMessageEx(winmdroot.Foundation.HWND param0, winmdroot.Foundation.LPARAM param1);

		/// <inheritdoc cref="IMPGetIMEA(winmdroot.Foundation.HWND, winmdroot.System.WindowsProgramming.IMEPROA*)"/>
		internal static unsafe winmdroot.Foundation.BOOL IMPGetIMEA(winmdroot.Foundation.HWND param0, ref winmdroot.System.WindowsProgramming.IMEPROA param1)
		{
			fixed (winmdroot.System.WindowsProgramming.IMEPROA* param1Local = &param1)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IMPGetIMEA(param0, param1Local);
				return __result;
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL IMPGetIMEA(winmdroot.Foundation.HWND param0, winmdroot.System.WindowsProgramming.IMEPROA* param1);

		/// <inheritdoc cref="IMPGetIMEW(winmdroot.Foundation.HWND, winmdroot.System.WindowsProgramming.IMEPROW*)"/>
		internal static unsafe winmdroot.Foundation.BOOL IMPGetIMEW(winmdroot.Foundation.HWND param0, ref winmdroot.System.WindowsProgramming.IMEPROW param1)
		{
			fixed (winmdroot.System.WindowsProgramming.IMEPROW* param1Local = &param1)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IMPGetIMEW(param0, param1Local);
				return __result;
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL IMPGetIMEW(winmdroot.Foundation.HWND param0, winmdroot.System.WindowsProgramming.IMEPROW* param1);

		/// <inheritdoc cref="IMPQueryIMEA(winmdroot.System.WindowsProgramming.IMEPROA*)"/>
		internal static unsafe winmdroot.Foundation.BOOL IMPQueryIMEA(ref winmdroot.System.WindowsProgramming.IMEPROA param0)
		{
			fixed (winmdroot.System.WindowsProgramming.IMEPROA* param0Local = &param0)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IMPQueryIMEA(param0Local);
				return __result;
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL IMPQueryIMEA(winmdroot.System.WindowsProgramming.IMEPROA* param0);

		/// <inheritdoc cref="IMPQueryIMEW(winmdroot.System.WindowsProgramming.IMEPROW*)"/>
		internal static unsafe winmdroot.Foundation.BOOL IMPQueryIMEW(ref winmdroot.System.WindowsProgramming.IMEPROW param0)
		{
			fixed (winmdroot.System.WindowsProgramming.IMEPROW* param0Local = &param0)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IMPQueryIMEW(param0Local);
				return __result;
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL IMPQueryIMEW(winmdroot.System.WindowsProgramming.IMEPROW* param0);

		/// <inheritdoc cref="IMPSetIMEA(winmdroot.Foundation.HWND, winmdroot.System.WindowsProgramming.IMEPROA*)"/>
		internal static unsafe winmdroot.Foundation.BOOL IMPSetIMEA(winmdroot.Foundation.HWND param0, ref winmdroot.System.WindowsProgramming.IMEPROA param1)
		{
			fixed (winmdroot.System.WindowsProgramming.IMEPROA* param1Local = &param1)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IMPSetIMEA(param0, param1Local);
				return __result;
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL IMPSetIMEA(winmdroot.Foundation.HWND param0, winmdroot.System.WindowsProgramming.IMEPROA* param1);

		/// <inheritdoc cref="IMPSetIMEW(winmdroot.Foundation.HWND, winmdroot.System.WindowsProgramming.IMEPROW*)"/>
		internal static unsafe winmdroot.Foundation.BOOL IMPSetIMEW(winmdroot.Foundation.HWND param0, ref winmdroot.System.WindowsProgramming.IMEPROW param1)
		{
			fixed (winmdroot.System.WindowsProgramming.IMEPROW* param1Local = &param1)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IMPSetIMEW(param0, param1Local);
				return __result;
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL IMPSetIMEW(winmdroot.Foundation.HWND param0, winmdroot.System.WindowsProgramming.IMEPROW* param1);

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern uint WINNLSGetIMEHotkey(winmdroot.Foundation.HWND param0);

		/// <summary>Temporarily enables or disables an Input Method Editor (IME) and, at the same time, turns on or off the display of all windows owned by the IME.</summary>
		/// <returns>The previous state of the IME. <b>TRUE</b> if it was enabled before this call, otherwise, <b>FALSE</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winnls32/nf-winnls32-winnlsenableime">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL WINNLSEnableIME(winmdroot.Foundation.HWND param0, winmdroot.Foundation.BOOL param1);

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL WINNLSGetEnableStatus(winmdroot.Foundation.HWND param0);

		/// <summary>Changes the check state of a button control.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the dialog box that contains the button.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkdlgbutton#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDButton">
		/// <para>Type: <b>int</b> The identifier of the button to modify.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkdlgbutton#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uCheck">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkdlgbutton">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL CheckDlgButton(winmdroot.Foundation.HWND hDlg, int nIDButton, winmdroot.UI.Controls.DLG_BUTTON_CHECK_STATE uCheck);

		/// <summary>Adds a check mark to (checks) a specified radio button in a group and removes a check mark from (clears) all other radio buttons in the group.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the dialog box that contains the radio button.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkradiobutton#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDFirstButton">
		/// <para>Type: <b>int</b> The identifier of the first radio button in the group.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkradiobutton#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDLastButton">
		/// <para>Type: <b>int</b> The identifier of the last radio button in the group.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkradiobutton#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDCheckButton">
		/// <para>Type: <b>int</b> The identifier of the radio button to select.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkradiobutton#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkradiobutton">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL CheckRadioButton(winmdroot.Foundation.HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);

		/// <summary>The IsDlgButtonChecked function determines whether a button control is checked or whether a three-state button control is checked, unchecked, or indeterminate.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the dialog box that contains the button control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isdlgbuttonchecked#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDButton">
		/// <para>Type: <b>int</b> The identifier of the button control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isdlgbuttonchecked#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">UINT</a></b> The return value from a button created with the <a href="/windows/desktop/Controls/button-styles">BS_AUTOCHECKBOX</a>, <a href="/windows/desktop/Controls/button-styles">BS_AUTORADIOBUTTON</a>, <a href="/windows/desktop/Controls/button-styles">BS_AUTO3STATE</a>, <a href="/windows/desktop/Controls/button-styles">BS_CHECKBOX</a>, <a href="/windows/desktop/Controls/button-styles">BS_RADIOBUTTON</a>, or <a href="/windows/desktop/Controls/button-styles">BS_3STATE</a> styles can be one of the values in the following table. If the button has any other style, the return value is zero.</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isdlgbuttonchecked">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern uint IsDlgButtonChecked(winmdroot.Foundation.HWND hDlg, int nIDButton);

		/// <param name="ch">
		/// <para>Type: <b>TCHAR</b> The character to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischarlowerw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the character is lowercase, the return value is nonzero. If the character is not lowercase, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischarlowerw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "IsCharLowerW", SetLastError = true, CharSet = CharSet.Unicode)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL IsCharLower(char ch);

		/// <summary>Configures the pointer injection device for the calling application, and initializes the maximum number of simultaneous pointers that the app can inject.</summary>
		/// <param name="pointerType">The pointer injection device type. Must be either <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">PT_TOUCH</a> or <b>PT_PEN</b>.</param>
		/// <param name="maxCount">
		/// <para>The maximum number of contacts.</para>
		/// <para>For <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">PT_TOUCH</a> this value must be greater than 0 and less than or equal to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/input_touchinjection/constants">MAX_TOUCH_COUNT</a>. For <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">PT_PEN</a> this value must be 1.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createsyntheticpointerdevice#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="mode">The contact visualization mode.</param>
		/// <returns>If the function succeeds, the return value is a handle to the pointer injection device. Otherwise, it returns null. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createsyntheticpointerdevice">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17763")]
		internal static extern winmdroot.UI.Controls.HSYNTHETICPOINTERDEVICE CreateSyntheticPointerDevice(winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE pointerType, uint maxCount, winmdroot.UI.Controls.POINTER_FEEDBACK_MODE mode);

		/// <summary>Destroys the specified pointer injection device.</summary>
		/// <param name="device">A handle to the pointer injection device.</param>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroysyntheticpointerdevice">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17763")]
		internal static extern void DestroySyntheticPointerDevice(winmdroot.UI.Controls.HSYNTHETICPOINTERDEVICE device);

		/// <summary>Registers a window to process the WM_TOUCHHITTESTING notification.</summary>
		/// <param name="hwnd">The window that receives the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/inputmsg/wm-touchhittesting">WM_TOUCHHITTESTING</a>  notification.</param>
		/// <param name="value"></param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registertouchhittestingwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL RegisterTouchHitTestingWindow(winmdroot.Foundation.HWND hwnd, uint value);

		/// <inheritdoc cref="EvaluateProximityToRect(winmdroot.Foundation.RECT*, winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT*, winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL EvaluateProximityToRect(in winmdroot.Foundation.RECT controlBoundingBox, in winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT pHitTestingInput, out winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION pProximityEval)
		{
			fixed (winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEvalLocal = &pProximityEval)
			{
				fixed (winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT* pHitTestingInputLocal = &pHitTestingInput)
				{
					fixed (winmdroot.Foundation.RECT* controlBoundingBoxLocal = &controlBoundingBox)
					{
						winmdroot.Foundation.BOOL __result = PInvoke.EvaluateProximityToRect(controlBoundingBoxLocal, pHitTestingInputLocal, pProximityEvalLocal);
						return __result;
					}
				}
			}
		}

		/// <summary>Returns the score of a rectangle as the probable touch target, compared to all other rectangles that intersect the touch contact area, and an adjusted touch point within the rectangle.</summary>
		/// <param name="controlBoundingBox">The <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that defines the bounding box of the UI element.</param>
		/// <param name="pHitTestingInput">The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-touch_hit_testing_input">TOUCH_HIT_TESTING_INPUT</a> structure that holds the data for the touch contact area.</param>
		/// <param name="pProximityEval">The <a href="https://docs.microsoft.com/windows/win32/api/winuser/ns-winuser-touch_hit_testing_proximity_evaluation">TOUCH_HIT_TESTING_PROXIMITY_EVALUATION</a> structure that holds the score and adjusted touch-point data.</param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-evaluateproximitytorect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EvaluateProximityToRect(winmdroot.Foundation.RECT* controlBoundingBox, winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT* pHitTestingInput, winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

		/// <inheritdoc cref="EvaluateProximityToPolygon(uint, global::System.Drawing.Point*, winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT*, winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL EvaluateProximityToPolygon(ReadOnlySpan<global::System.Drawing.Point> controlPolygon, in winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT pHitTestingInput, out winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION pProximityEval)
		{
			fixed (winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEvalLocal = &pProximityEval)
			{
				fixed (winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT* pHitTestingInputLocal = &pHitTestingInput)
				{
					fixed (global::System.Drawing.Point* controlPolygonLocal = controlPolygon)
					{
						winmdroot.Foundation.BOOL __result = PInvoke.EvaluateProximityToPolygon((uint )controlPolygon.Length, controlPolygonLocal, pHitTestingInputLocal, pProximityEvalLocal);
						return __result;
					}
				}
			}
		}

		/// <summary>Returns the score of a polygon as the probable touch target (compared to all other polygons that intersect the touch contact area) and an adjusted touch point within the polygon.</summary>
		/// <param name="numVertices">
		/// <para>The number of vertices in the polygon. This value must be greater than or equal to 3. This value indicates the size of the array, as specified by the <i>controlPolygon</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-evaluateproximitytopolygon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="controlPolygon">
		/// <para>The array of x-y screen coordinates that define the shape of the UI element. The <i>numVertices</i> parameter specifies the number of coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-evaluateproximitytopolygon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pHitTestingInput">The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-touch_hit_testing_input">TOUCH_HIT_TESTING_INPUT</a> structure that holds the data for the touch contact area.</param>
		/// <param name="pProximityEval">The <a href="https://docs.microsoft.com/windows/win32/api/winuser/ns-winuser-touch_hit_testing_proximity_evaluation">TOUCH_HIT_TESTING_PROXIMITY_EVALUATION</a> structure that holds the score and adjusted touch-point data.</param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-evaluateproximitytopolygon">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EvaluateProximityToPolygon(uint numVertices, global::System.Drawing.Point* controlPolygon, winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT* pHitTestingInput, winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

		/// <inheritdoc cref="PackTouchHitTestingProximityEvaluation(winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT*, winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.LRESULT PackTouchHitTestingProximityEvaluation(in winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT pHitTestingInput, in winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION pProximityEval)
		{
			fixed (winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEvalLocal = &pProximityEval)
			{
				fixed (winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT* pHitTestingInputLocal = &pHitTestingInput)
				{
					winmdroot.Foundation.LRESULT __result = PInvoke.PackTouchHitTestingProximityEvaluation(pHitTestingInputLocal, pProximityEvalLocal);
					return __result;
				}
			}
		}

		/// <summary>Returns the proximity evaluation score and the adjusted touch-point coordinates as a packed value for the WM_TOUCHHITTESTING callback.</summary>
		/// <param name="pHitTestingInput">The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-touch_hit_testing_input">TOUCH_HIT_TESTING_INPUT</a> structure that holds the data for the touch contact area.</param>
		/// <param name="pProximityEval">The <a href="https://docs.microsoft.com/windows/win32/api/winuser/ns-winuser-touch_hit_testing_proximity_evaluation">TOUCH_HIT_TESTING_PROXIMITY_EVALUATION</a> structure that holds the score and adjusted touch-point data that the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-evaluateproximitytopolygon">EvaluateProximityToPolygon</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-evaluateproximitytorect">EvaluateProximityToRect</a> function returns.</param>
		/// <returns>If this function succeeds, it returns the <b>score</b> and <b>adjustedPoint</b> values from <a href="/windows/win32/api/winuser/ns-winuser-touch_hit_testing_proximity_evaluation">TOUCH_HIT_TESTING_PROXIMITY_EVALUATION</a> as an LRESULT. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-packtouchhittestingproximityevaluation">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.LRESULT PackTouchHitTestingProximityEvaluation(winmdroot.UI.Controls.TOUCH_HIT_TESTING_INPUT* pHitTestingInput, winmdroot.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

		/// <inheritdoc cref="GetWindowFeedbackSetting(winmdroot.Foundation.HWND, winmdroot.UI.Controls.FEEDBACK_TYPE, uint, uint*, void*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetWindowFeedbackSetting(winmdroot.Foundation.HWND hwnd, winmdroot.UI.Controls.FEEDBACK_TYPE feedback, uint dwFlags, ref uint pSize, void* config)
		{
			fixed (uint* pSizeLocal = &pSize)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetWindowFeedbackSetting(hwnd, feedback, dwFlags, pSizeLocal, config);
				return __result;
			}
		}

		/// <summary>Retrieves the feedback configuration for a window.</summary>
		/// <param name="hwnd">The window to check for feedback configuration.</param>
		/// <param name="feedback">One of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ne-winuser-feedback_type">FEEDBACK_TYPE</a> enumeration.</param>
		/// <param name="dwFlags">Specify <a href="https://docs.microsoft.com/previous-versions/windows/desktop/input_feedback/constants">GWFS_INCLUDE_ANCESTORS</a> to check the parent window chain until a value is found. The default is 0 and indicates that only the specified window will be checked.</param>
		/// <param name="pSize">
		/// <para>The size of memory region that the <i>config</i> parameter points to. The <i>pSize</i> parameter specifies the size of the configuration data for the feedback type in <i>feedback</i> and must be sizeof(BOOL).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowfeedbacksetting#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="config">
		/// <para>The configuration data. The <i>config</i> parameter must point to a value of type BOOL.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowfeedbacksetting#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>Returns TRUE if the specified feedback setting is configured on the specified window. Otherwise, it returns FALSE (and <i>config</i> won't be modified).</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowfeedbacksetting">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetWindowFeedbackSetting(winmdroot.Foundation.HWND hwnd, winmdroot.UI.Controls.FEEDBACK_TYPE feedback, uint dwFlags, uint* pSize, [Optional] void* config);

		/// <summary>Sets the feedback configuration for a window.</summary>
		/// <param name="hwnd">The window to configure feedback on.</param>
		/// <param name="feedback">One of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ne-winuser-feedback_type">FEEDBACK_TYPE</a> enumeration.</param>
		/// <param name="dwFlags">Reserved. Must be 0.</param>
		/// <param name="size">The size, in bytes, of the configuration data. Must be sizeof(BOOL) or 0 if the feedback setting is being reset.</param>
		/// <param name="configuration">The configuration data. Must be BOOL or NULL if the feedback setting is being reset.</param>
		/// <returns>Returns TRUE if successful; otherwise, returns FALSE.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowfeedbacksetting">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetWindowFeedbackSetting(winmdroot.Foundation.HWND hwnd, winmdroot.UI.Controls.FEEDBACK_TYPE feedback, uint dwFlags, uint size, [Optional] void* configuration);

		/// <summary>The SetScrollPos function sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>nBar</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nBar">Type: <b>int</b></param>
		/// <param name="nPos">
		/// <para>Type: <b>int</b> Specifies the new position of the scroll box. The position must be within the scrolling range. For more information about the scrolling range, see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setscrollrange">SetScrollRange</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bRedraw">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether the scroll bar is redrawn to reflect the new scroll box position. If this parameter is <b>TRUE</b>, the scroll bar is redrawn. If it is <b>FALSE</b>, the scroll bar is not redrawn.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the previous position of the scroll box.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern int SetScrollPos(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, int nPos, winmdroot.Foundation.BOOL bRedraw);

		/// <summary>The SetScrollRange function sets the minimum and maximum scroll box positions for the specified scroll bar.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>nBar</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollrange#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nBar">Type: <b>int</b></param>
		/// <param name="nMinPos">
		/// <para>Type: <b>int</b> Specifies the minimum scrolling position.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollrange#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nMaxPos">
		/// <para>Type: <b>int</b> Specifies the maximum scrolling position.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollrange#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bRedraw">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether the scroll bar should be redrawn to reflect the change. If this parameter is <b>TRUE</b>, the scroll bar is redrawn. If it is <b>FALSE</b>, the scroll bar is not redrawn.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollrange#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollrange">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL SetScrollRange(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, int nMinPos, int nMaxPos, winmdroot.Foundation.BOOL bRedraw);

		/// <summary>The ShowScrollBar function shows or hides the specified scroll bar.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>wBar</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showscrollbar#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wBar">Type: <b>int</b></param>
		/// <param name="bShow">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether the scroll bar is shown or hidden. If this parameter is <b>TRUE</b>, the scroll bar is shown; otherwise, it is hidden.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showscrollbar#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showscrollbar">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL ShowScrollBar(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS wBar, winmdroot.Foundation.BOOL bShow);

		/// <summary>The EnableScrollBar function enables or disables one or both scroll bar arrows.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a window or a scroll bar control, depending on the value of the <i>wSBflags</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablescrollbar#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wSBflags">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></param>
		/// <param name="wArrows">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the arrows are enabled or disabled as specified, the return value is nonzero. If the arrows are already in the requested state or an error occurs, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablescrollbar">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL EnableScrollBar(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS wSBflags, winmdroot.UI.Controls.ENABLE_SCROLL_BAR_ARROWS wArrows);

		/// <inheritdoc cref="DlgDirList(winmdroot.Foundation.HWND, winmdroot.Foundation.PWSTR, int, int, winmdroot.UI.Controls.DLG_DIR_LIST_FILE_TYPE)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe int DlgDirList(winmdroot.Foundation.HWND hDlg, ref Span<char>lpPathSpec, int nIDListBox, int nIDStaticPath, winmdroot.UI.Controls.DLG_DIR_LIST_FILE_TYPE uFileType)
		{
			if (lpPathSpec.LastIndexOf('\0') == -1)throw new ArgumentException("Required null terminator missing.", "lpPathSpec");
			fixed (char* plpPathSpec = lpPathSpec)
			{
				winmdroot.Foundation.PWSTR wstrlpPathSpec = plpPathSpec;
				int __result = PInvoke.DlgDirList(hDlg, wstrlpPathSpec, nIDListBox, nIDStaticPath, uFileType);
				lpPathSpec= lpPathSpec.Slice(0, wstrlpPathSpec.Length);
				return __result;
			}
		}

		/// <summary>Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the dialog box that contains the list box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpPathSpec">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPTSTR</a></b> A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:\) or a UNC name (for example, \\ <i>machinename</i>\ <i>sharename</i>). The function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory. If the string includes a filename, the filename must contain at least one wildcard character (? or *). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character (*) as the filename. All names in the specified directory that match the filename and have the attributes specified by the <i>uFileType</i> parameter are added to the list box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDListBox">
		/// <para>Type: <b>int</b> The identifier of a list box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirList</b> does not try to fill a list box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDStaticPath">
		/// <para>Type: <b>int</b> The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirList</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFileType">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call .</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DlgDirListW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern int DlgDirList(winmdroot.Foundation.HWND hDlg, winmdroot.Foundation.PWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, winmdroot.UI.Controls.DLG_DIR_LIST_FILE_TYPE uFileType);

		/// <summary>Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the DlgDirList function and that the selection is a drive letter, filename, or directory name.</summary>
		/// <param name="hwndDlg">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the dialog box that contains the list box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPTSTR</a></b> A pointer to a buffer that receives the selected path.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="chCount">
		/// <para>Type: <b>int</b> The length, in <b>TCHARs</b>, of the buffer pointed to by <i>lpString</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idListBox">
		/// <para>Type: <b>int</b> The identifier of a list box in the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the current selection is a directory name, the return value is nonzero. If the current selection is not a directory name, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DlgDirSelectExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL DlgDirSelectEx(winmdroot.Foundation.HWND hwndDlg, winmdroot.Foundation.PWSTR lpString, int chCount, int idListBox);

		/// <inheritdoc cref="DlgDirListComboBox(winmdroot.Foundation.HWND, winmdroot.Foundation.PWSTR, int, int, winmdroot.UI.Controls.DLG_DIR_LIST_FILE_TYPE)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe int DlgDirListComboBox(winmdroot.Foundation.HWND hDlg, ref Span<char>lpPathSpec, int nIDComboBox, int nIDStaticPath, winmdroot.UI.Controls.DLG_DIR_LIST_FILE_TYPE uFiletype)
		{
			if (lpPathSpec.LastIndexOf('\0') == -1)throw new ArgumentException("Required null terminator missing.", "lpPathSpec");
			fixed (char* plpPathSpec = lpPathSpec)
			{
				winmdroot.Foundation.PWSTR wstrlpPathSpec = plpPathSpec;
				int __result = PInvoke.DlgDirListComboBox(hDlg, wstrlpPathSpec, nIDComboBox, nIDStaticPath, uFiletype);
				lpPathSpec= lpPathSpec.Slice(0, wstrlpPathSpec.Length);
				return __result;
			}
		}

		/// <summary>Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the dialog box that contains the combo box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistcomboboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpPathSpec">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPTSTR</a></b> A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:\) or a UNC name (for example, &#92;&#92;<i>machinename</i>&#92;<i>sharename</i>).</para>
		/// <para>The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory. If the string includes a file name, the file name must contain at least one wildcard character (? or *). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character (*) as the file name. All names in the specified directory that match the file name and have the attributes specified by the <i>uFiletype</i> parameter are added to the list displayed in the combo box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistcomboboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDComboBox">
		/// <para>Type: <b>int</b> The identifier of a combo box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirListComboBox</b> does not try to fill a combo box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistcomboboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDStaticPath">
		/// <para>Type: <b>int</b> The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirListComboBox</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistcomboboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFiletype">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirlistcomboboxw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DlgDirListComboBoxW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern int DlgDirListComboBox(winmdroot.Foundation.HWND hDlg, winmdroot.Foundation.PWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, winmdroot.UI.Controls.DLG_DIR_LIST_FILE_TYPE uFiletype);

		/// <summary>Retrieves the current selection from a combo box filled by using the DlgDirListComboBox function. The selection is interpreted as a drive letter, a file, or a directory name.</summary>
		/// <param name="hwndDlg">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the dialog box that contains the combo box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectcomboboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPTSTR</a></b> A pointer to the buffer that receives the selected path.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectcomboboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchOut">
		/// <para>Type: <b>int</b> The length, in characters, of the buffer pointed to by the <i>lpString</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectcomboboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idComboBox">
		/// <para>Type: <b>int</b> The integer identifier of the combo box control in the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectcomboboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the current selection is a directory name, the return value is nonzero.</para>
		/// <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dlgdirselectcomboboxexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DlgDirSelectComboBoxExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL DlgDirSelectComboBoxEx(winmdroot.Foundation.HWND hwndDlg, winmdroot.Foundation.PWSTR lpString, int cchOut, int idComboBox);

		/// <inheritdoc cref="SetScrollInfo(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS, winmdroot.UI.WindowsAndMessaging.SCROLLINFO*, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe int SetScrollInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, in winmdroot.UI.WindowsAndMessaging.SCROLLINFO lpsi, winmdroot.Foundation.BOOL redraw)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.SCROLLINFO* lpsiLocal = &lpsi)
			{
				int __result = PInvoke.SetScrollInfo(hwnd, nBar, lpsiLocal, redraw);
				return __result;
			}
		}

		/// <summary>The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>fnBar</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nBar">Type: <b>int</b></param>
		/// <param name="lpsi">
		/// <para>Type: <b>LPCSCROLLINFO</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-scrollinfo">SCROLLINFO</a> structure. Before calling <b>SetScrollInfo</b>, set the <b>cbSize</b> member of the structure to <b>sizeof</b>(<b>SCROLLINFO</b>), set the <b>fMask</b> member to indicate the parameters to set, and specify the new parameter values in the appropriate members. The</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="redraw">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar. If this parameter is <b>TRUE</b>, the scroll bar is redrawn, otherwise, it is not redrawn.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> The return value is the current position of the scroll box.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setscrollinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe int SetScrollInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, winmdroot.UI.WindowsAndMessaging.SCROLLINFO* lpsi, winmdroot.Foundation.BOOL redraw);

		/// <inheritdoc cref="GetComboBoxInfo(winmdroot.Foundation.HWND, winmdroot.UI.Controls.COMBOBOXINFO*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL GetComboBoxInfo(winmdroot.Foundation.HWND hwndCombo, ref winmdroot.UI.Controls.COMBOBOXINFO pcbi)
		{
			fixed (winmdroot.UI.Controls.COMBOBOXINFO* pcbiLocal = &pcbi)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetComboBoxInfo(hwndCombo, pcbiLocal);
				return __result;
			}
		}

		/// <summary>Retrieves information about the specified combo box.</summary>
		/// <param name="hwndCombo">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the combo box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcomboboxinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pcbi">
		/// <para>Type: <b>PCOMBOBOXINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-comboboxinfo">COMBOBOXINFO</a> structure that receives the information. You must set <b>COMBOBOXINFO.cbSize</b> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcomboboxinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcomboboxinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetComboBoxInfo(winmdroot.Foundation.HWND hwndCombo, winmdroot.UI.Controls.COMBOBOXINFO* pcbi);

		/// <summary>Retrieves the number of items per column in a specified list box.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> A handle to the list box whose number of items per column is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlistboxinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">DWORD</a></b> The return value is the number of items per column.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlistboxinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern uint GetListBoxInfo(winmdroot.Foundation.HWND hwnd);

		/// <summary>Registers a window to process the WM_POINTERDEVICECHANGE, WM_POINTERDEVICEINRANGE, and WM_POINTERDEVICEOUTOFRANGE pointer device notifications.</summary>
		/// <param name="window">
		/// <para>The window that receives <a href="https://docs.microsoft.com/previous-versions/windows/desktop/inputmsg/wm-pointerdevicechange">WM_POINTERDEVICECHANGE</a>, <a href="https://docs.microsoft.com/previous-versions/windows/desktop/inputmsg/wm-pointerdeviceinrange">WM_POINTERDEVICEINRANGE</a>, and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/inputmsg/wm-pointerdeviceoutofrange">WM_POINTERDEVICEOUTOFRANGE</a> notifications.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpointerdevicenotifications#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="notifyRange">
		/// <para>If set to TRUE, process the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/inputmsg/wm-pointerdeviceinrange">WM_POINTERDEVICEINRANGE</a> and <a href="https://docs.microsoft.com/previous-versions/windows/desktop/inputmsg/wm-pointerdeviceoutofrange">WM_POINTERDEVICEOUTOFRANGE</a> messages. If set to FALSE, these messages aren't processed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpointerdevicenotifications#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpointerdevicenotifications">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL RegisterPointerDeviceNotifications(winmdroot.Foundation.HWND window, winmdroot.Foundation.BOOL notifyRange);

		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.15063")]
		internal static extern winmdroot.Foundation.BOOL SetDialogControlDpiChangeBehavior(winmdroot.Foundation.HWND hWnd, winmdroot.UI.HiDpi.DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, winmdroot.UI.HiDpi.DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);

		/// <summary>Retrieves and per-monitor DPI scaling behavior overrides of a child window in a dialog.</summary>
		/// <param name="hWnd">The handle for the window to examine.</param>
		/// <returns>The flags set on the given window. If passed an invalid handle, this function will return zero, and set its <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">last error</a> to <b>ERROR_INVALID_HANDLE</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdialogcontroldpichangebehavior">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.15063")]
		internal static extern winmdroot.UI.HiDpi.DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS GetDialogControlDpiChangeBehavior(winmdroot.Foundation.HWND hWnd);

		/// <summary>Dialogs in Per-Monitor v2 contexts are automatically DPI scaled. This method lets you customize their DPI change behavior.</summary>
		/// <param name="hDlg">A handle for the dialog whose behavior will be modified.</param>
		/// <param name="mask">A mask specifying the subset of flags to be changed.</param>
		/// <param name="values">The desired value to be set for the specified subset of flags.</param>
		/// <returns>
		/// <para>This function returns TRUE if the operation was successful, and FALSE otherwise. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. Possible errors are <b>ERROR_INVALID_HANDLE</b> if passed an invalid dialog HWND, and <b>ERROR_ACCESS_DENIED</b> if the dialog belongs to another process.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdialogdpichangebehavior">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.15063")]
		internal static extern winmdroot.Foundation.BOOL SetDialogDpiChangeBehavior(winmdroot.Foundation.HWND hDlg, winmdroot.UI.HiDpi.DIALOG_DPI_CHANGE_BEHAVIORS mask, winmdroot.UI.HiDpi.DIALOG_DPI_CHANGE_BEHAVIORS values);

		/// <summary>Returns the flags that might have been set on a given dialog by an earlier call to SetDialogDpiChangeBehavior.</summary>
		/// <param name="hDlg">The handle for the dialog to examine.</param>
		/// <returns>The flags set on the given dialog. If passed an invalid handle, this function will return zero, and set its <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">last error</a> to <b>ERROR_INVALID_HANDLE</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdialogdpichangebehavior">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.15063")]
		internal static extern winmdroot.UI.HiDpi.DIALOG_DPI_CHANGE_BEHAVIORS GetDialogDpiChangeBehavior(winmdroot.Foundation.HWND hDlg);

		/// <summary>Retrieves the specified system metric or system configuration setting taking into account a provided DPI.</summary>
		/// <param name="nIndex">The system metric or configuration setting to be retrieved. See <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getsystemmetrics">GetSystemMetrics</a> for the possible values.</param>
		/// <param name="dpi">The DPI to use for scaling the metric.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemmetricsfordpi">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern int GetSystemMetricsForDpi(winmdroot.UI.WindowsAndMessaging.SYSTEM_METRICS_INDEX nIndex, uint dpi);

		/// <inheritdoc cref="AdjustWindowRectExForDpi(winmdroot.Foundation.RECT*, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE, winmdroot.Foundation.BOOL, winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE, uint)"/>
		[SupportedOSPlatform("windows10.0.14393")]
		internal static unsafe winmdroot.Foundation.BOOL AdjustWindowRectExForDpi(ref winmdroot.Foundation.RECT lpRect, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, winmdroot.Foundation.BOOL bMenu, winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle, uint dpi)
		{
			fixed (winmdroot.Foundation.RECT* lpRectLocal = &lpRect)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.AdjustWindowRectExForDpi(lpRectLocal, dwStyle, bMenu, dwExStyle, dpi);
				return __result;
			}
		}

		/// <summary>Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI.</summary>
		/// <param name="lpRect">A pointer to a <b>RECT</b> structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</param>
		/// <param name="dwStyle">The <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">Window Style</a> of the window whose required size is to be calculated. Note that you cannot specify the <b>WS_OVERLAPPED</b> style.</param>
		/// <param name="bMenu">Indicates whether the window has a menu.</param>
		/// <param name="dwExStyle">The <a href="https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">Extended Window Style</a> of the window whose required size is to be calculated.</param>
		/// <param name="dpi">The DPI to use for scaling.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrectexfordpi">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern unsafe winmdroot.Foundation.BOOL AdjustWindowRectExForDpi(winmdroot.Foundation.RECT* lpRect, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, winmdroot.Foundation.BOOL bMenu, winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle, uint dpi);

		/// <inheritdoc cref="LogicalToPhysicalPointForPerMonitorDPI(winmdroot.Foundation.HWND, global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows8.1")]
		internal static unsafe winmdroot.Foundation.BOOL LogicalToPhysicalPointForPerMonitorDPI(winmdroot.Foundation.HWND hWnd, ref global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.LogicalToPhysicalPointForPerMonitorDPI(hWnd, lpPointLocal);
				return __result;
			}
		}

		/// <summary>Converts a point in a window from logical coordinates into physical coordinates, regardless of the dots per inch (dpi) awareness of the caller.</summary>
		/// <param name="hWnd">A handle to the window whose transform is used for the conversion.</param>
		/// <param name="lpPoint">A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds.</param>
		/// <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-logicaltophysicalpointforpermonitordpi">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL LogicalToPhysicalPointForPerMonitorDPI(winmdroot.Foundation.HWND hWnd, global::System.Drawing.Point* lpPoint);

		/// <inheritdoc cref="PhysicalToLogicalPointForPerMonitorDPI(winmdroot.Foundation.HWND, global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows8.1")]
		internal static unsafe winmdroot.Foundation.BOOL PhysicalToLogicalPointForPerMonitorDPI(winmdroot.Foundation.HWND hWnd, ref global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.PhysicalToLogicalPointForPerMonitorDPI(hWnd, lpPointLocal);
				return __result;
			}
		}

		/// <summary>Converts a point in a window from physical coordinates into logical coordinates, regardless of the dots per inch (dpi) awareness of the caller.</summary>
		/// <param name="hWnd">A handle to the window whose transform is used for the conversion.</param>
		/// <param name="lpPoint">A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.</param>
		/// <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-physicaltologicalpointforpermonitordpi">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL PhysicalToLogicalPointForPerMonitorDPI(winmdroot.Foundation.HWND hWnd, global::System.Drawing.Point* lpPoint);

		/// <summary>Retrieves the value of one of the system-wide parameters, taking into account the provided DPI value.</summary>
		/// <param name="uiAction">The system-wide parameter to be retrieved. This function is only intended for use with <b>SPI_GETICONTITLELOGFONT</b>, <b>SPI_GETICONMETRICS</b>, or <b>SPI_GETNONCLIENTMETRICS</b>. See <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfo</a> for more information on these values.</param>
		/// <param name="uiParam">A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify zero for this parameter.</param>
		/// <param name="pvParam">A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify <b>NULL</b> for this parameter. For information on the <b>PVOID</b> datatype, see <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">Windows Data Types</a>.</param>
		/// <param name="fWinIni">Has no effect for with this API. This parameter only has an effect if you're setting parameter.</param>
		/// <param name="dpi">The DPI to use for scaling the metric.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfofordpi">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern unsafe winmdroot.Foundation.BOOL SystemParametersInfoForDpi(uint uiAction, uint uiParam, [Optional] void* pvParam, uint fWinIni, uint dpi);

		/// <summary>Set the DPI awareness for the current thread to the provided value.</summary>
		/// <param name="dpiContext">The new <a href="https://docs.microsoft.com/windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the current thread. This context includes the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ne-windef-dpi_awareness">DPI_AWARENESS</a> value.</param>
		/// <returns>The old <a href="/windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the thread. If the <i>dpiContext</i> is invalid, the thread will not be updated and the return value will be <b>NULL</b>. You can use this value to restore the old <b>DPI_AWARENESS_CONTEXT</b> after overriding it with a predefined value.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setthreaddpiawarenesscontext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext(winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT dpiContext);

		/// <summary>Gets the DPI_AWARENESS_CONTEXT for the current thread.</summary>
		/// <returns>The current <a href="/windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the thread.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getthreaddpiawarenesscontext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext();

		/// <summary>Returns the DPI_AWARENESS_CONTEXT associated with a window.</summary>
		/// <param name="hwnd">The window to query.</param>
		/// <returns>The <a href="/windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the provided window. If the window is not valid, the return value is <b>NULL</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowdpiawarenesscontext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext(winmdroot.Foundation.HWND hwnd);

		/// <summary>Retrieves the DPI_AWARENESS value from a DPI_AWARENESS_CONTEXT.</summary>
		/// <param name="value">The <b>DPI_AWARENESS_CONTEXT</b> you want to examine.</param>
		/// <returns>The <a href="/windows/desktop/api/windef/ne-windef-dpi_awareness">DPI_AWARENESS</a>. If the provided <i>value</i> is <b>null</b> or invalid, this method will return <b>DPI_AWARENESS_INVALID</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getawarenessfromdpiawarenesscontext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern winmdroot.UI.HiDpi.DPI_AWARENESS GetAwarenessFromDpiAwarenessContext(winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT value);

		/// <summary>Retrieves the DPI from a given DPI_AWARENESS_CONTEXT handle. This enables you to determine the DPI of a thread without needed to examine a window created within that thread.</summary>
		/// <param name="value">The <b>DPI_AWARENESS_CONTEXT</b> handle to examine.</param>
		/// <returns>The DPI value associated with the <b>DPI_AWARENESS_CONTEXT</b> handle.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdpifromdpiawarenesscontext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17134")]
		internal static extern uint GetDpiFromDpiAwarenessContext(winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT value);

		/// <summary>Determines whether two DPI_AWARENESS_CONTEXT values are identical.</summary>
		/// <param name="dpiContextA">The first value to compare.</param>
		/// <param name="dpiContextB">The second value to compare.</param>
		/// <returns>Returns <b>TRUE</b> if the values are equal, otherwise <b>FALSE</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-aredpiawarenesscontextsequal">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern winmdroot.Foundation.BOOL AreDpiAwarenessContextsEqual(winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT dpiContextA, winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT dpiContextB);

		/// <summary>Determines if a specified DPI_AWARENESS_CONTEXT is valid and supported by the current system.</summary>
		/// <param name="value">The context that you want to determine if it is supported.</param>
		/// <returns><b>TRUE</b> if the provided context is supported, otherwise <b>FALSE</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isvaliddpiawarenesscontext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern winmdroot.Foundation.BOOL IsValidDpiAwarenessContext(winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT value);

		/// <summary>Returns the dots per inch (dpi) value for the associated window.</summary>
		/// <param name="hwnd">The window you want to get information about.</param>
		/// <returns>The DPI for the window which depends on the <a href="/windows/desktop/api/windef/ne-windef-dpi_awareness">DPI_AWARENESS</a> of the window. See the Remarks for more information. An invalid <i>hwnd</i> value will result in a return value of 0.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdpiforwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern uint GetDpiForWindow(winmdroot.Foundation.HWND hwnd);

		/// <summary>Returns the system DPI.</summary>
		/// <returns>The system DPI value.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdpiforsystem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern uint GetDpiForSystem();

		/// <inheritdoc cref="GetSystemDpiForProcess(winmdroot.Foundation.HANDLE)"/>
		[SupportedOSPlatform("windows10.0.17134")]
		internal static unsafe uint GetSystemDpiForProcess(SafeHandle hProcess)
		{
			bool hProcessAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hProcessLocal;
				if (hProcess is object)
				{
					hProcess.DangerousAddRef(ref hProcessAddRef);
					hProcessLocal = (winmdroot.Foundation.HANDLE)hProcess.DangerousGetHandle();
				}
				else
					hProcessLocal = default(winmdroot.Foundation.HANDLE);
				uint __result = PInvoke.GetSystemDpiForProcess(hProcessLocal);
				return __result;
			}
			finally
			{
				if (hProcessAddRef)
					hProcess.DangerousRelease();
			}
		}

		/// <summary>Retrieves the system DPI associated with a given process. This is useful for avoiding compatibility issues that arise from sharing DPI-sensitive information between multiple system-aware processes with different system DPI values.</summary>
		/// <param name="hProcess">The handle for the process to examine. If this value is null, this API behaves identically to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getdpiforsystem">GetDpiForSystem</a>.</param>
		/// <returns>The process's system DPI value.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemdpiforprocess">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17134")]
		internal static extern uint GetSystemDpiForProcess(winmdroot.Foundation.HANDLE hProcess);

		/// <summary>In high-DPI displays, enables automatic display scaling of the non-client area portions of the specified top-level window. Must be called during the initialization of that window.</summary>
		/// <param name="hwnd">The window that should have automatic scaling enabled.</param>
		/// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablenonclientdpiscaling">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.14393")]
		internal static extern winmdroot.Foundation.BOOL EnableNonClientDpiScaling(winmdroot.Foundation.HWND hwnd);

		/// <summary>Sets the current process to a specified dots per inch (dpi) awareness context. The DPI awareness contexts are from the DPI_AWARENESS_CONTEXT value.</summary>
		/// <param name="value">A <a href="https://docs.microsoft.com/windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> handle to set.</param>
		/// <returns>
		/// <para>This function returns TRUE if the operation was successful, and FALSE otherwise. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. Possible errors are <b>ERROR_INVALID_PARAMETER</b> for an invalid input, and <b>ERROR_ACCESS_DENIED</b> if the default API awareness mode for the process has already been set (via a previous API call or within the application manifest).</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setprocessdpiawarenesscontext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.15063")]
		internal static extern winmdroot.Foundation.BOOL SetProcessDpiAwarenessContext(winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT value);

		/// <inheritdoc cref="GetDpiAwarenessContextForProcess(winmdroot.Foundation.HANDLE)"/>
		internal static unsafe winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT GetDpiAwarenessContextForProcess(SafeHandle hProcess)
		{
			bool hProcessAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hProcessLocal;
				if (hProcess is object)
				{
					hProcess.DangerousAddRef(ref hProcessAddRef);
					hProcessLocal = (winmdroot.Foundation.HANDLE)hProcess.DangerousGetHandle();
				}
				else
					hProcessLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT __result = PInvoke.GetDpiAwarenessContextForProcess(hProcessLocal);
				return __result;
			}
			finally
			{
				if (hProcessAddRef)
					hProcess.DangerousRelease();
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.UI.HiDpi.DPI_AWARENESS_CONTEXT GetDpiAwarenessContextForProcess(winmdroot.Foundation.HANDLE hProcess);

		/// <summary>Sets the thread's DPI_HOSTING_BEHAVIOR. This behavior allows windows created in the thread to host child windows with a different DPI_AWARENESS_CONTEXT.</summary>
		/// <param name="value">The new <a href="https://docs.microsoft.com/windows/desktop/api/windef/ne-windef-dpi_hosting_behavior">DPI_HOSTING_BEHAVIOR</a> value for the current thread.</param>
		/// <returns>The previous <a href="/windows/desktop/api/windef/ne-windef-dpi_hosting_behavior">DPI_HOSTING_BEHAVIOR</a> for the thread. If the hosting behavior passed in is invalid, the thread will not be updated and the return value will be <b>DPI_HOSTING_BEHAVIOR_INVALID</b>. You can use this value to restore the old <b>DPI_HOSTING_BEHAVIOR</b> after overriding it with a predefined value.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setthreaddpihostingbehavior">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17134")]
		internal static extern winmdroot.UI.HiDpi.DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior(winmdroot.UI.HiDpi.DPI_HOSTING_BEHAVIOR value);

		/// <summary>Retrieves the DPI_HOSTING_BEHAVIOR from the current thread.</summary>
		/// <returns>The <a href="/windows/desktop/api/windef/ne-windef-dpi_hosting_behavior">DPI_HOSTING_BEHAVIOR</a> of the current thread.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getthreaddpihostingbehavior">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17134")]
		internal static extern winmdroot.UI.HiDpi.DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior();

		/// <summary>Returns the DPI_HOSTING_BEHAVIOR of the specified window.</summary>
		/// <param name="hwnd">The handle for the window to examine.</param>
		/// <returns>The <a href="/windows/desktop/api/windef/ne-windef-dpi_hosting_behavior">DPI_HOSTING_BEHAVIOR</a> of the specified window.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowdpihostingbehavior">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17134")]
		internal static extern winmdroot.UI.HiDpi.DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior(winmdroot.Foundation.HWND hwnd);

		/// <summary>Associates a Help context identifier with the specified window.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowcontexthelpid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL SetWindowContextHelpId(winmdroot.Foundation.HWND param0, uint param1);

		/// <summary>Retrieves the Help context identifier, if any, associated with the specified window.</summary>
		/// <returns>
		/// <para>Type: <b>DWORD</b> Returns the Help context identifier if the window has one, or zero otherwise.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowcontexthelpid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern uint GetWindowContextHelpId(winmdroot.Foundation.HWND param0);

		/// <summary>Destroys the specified menu and frees any memory that the menu occupies.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu to be destroyed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DestroyMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu);

		/// <inheritdoc cref="SetMenuContextHelpId(winmdroot.UI.WindowsAndMessaging.HMENU, uint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL SetMenuContextHelpId(SafeHandle param0, uint param1)
		{
			bool param0AddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU param0Local;
				if (param0 is object)
				{
					param0.DangerousAddRef(ref param0AddRef);
					param0Local = (winmdroot.UI.WindowsAndMessaging.HMENU)param0.DangerousGetHandle();
				}
				else
					param0Local = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.SetMenuContextHelpId(param0Local, param1);
				return __result;
			}
			finally
			{
				if (param0AddRef)
					param0.DangerousRelease();
			}
		}

		/// <summary>Associates a Help context identifier with a menu.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenucontexthelpid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL SetMenuContextHelpId(winmdroot.UI.WindowsAndMessaging.HMENU param0, uint param1);

		/// <inheritdoc cref="GetMenuContextHelpId(winmdroot.UI.WindowsAndMessaging.HMENU)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint GetMenuContextHelpId(SafeHandle param0)
		{
			bool param0AddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU param0Local;
				if (param0 is object)
				{
					param0.DangerousAddRef(ref param0AddRef);
					param0Local = (winmdroot.UI.WindowsAndMessaging.HMENU)param0.DangerousGetHandle();
				}
				else
					param0Local = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				uint __result = PInvoke.GetMenuContextHelpId(param0Local);
				return __result;
			}
			finally
			{
				if (param0AddRef)
					param0.DangerousRelease();
			}
		}

		/// <summary>Retrieves the Help context identifier associated with the specified menu.</summary>
		/// <returns>
		/// <para>Type: <b>DWORD</b> Returns the Help context identifier if the menu has one, or zero otherwise.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenucontexthelpid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern uint GetMenuContextHelpId(winmdroot.UI.WindowsAndMessaging.HMENU param0);

		/// <inheritdoc cref="WinHelp(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR, uint, nuint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL WinHelp(winmdroot.Foundation.HWND hWndMain, string lpszHelp, uint uCommand, nuint dwData)
		{
			fixed (char* lpszHelpLocal = lpszHelp)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.WinHelp(hWndMain, lpszHelpLocal, uCommand, dwData);
				return __result;
			}
		}

		/// <summary>Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.</summary>
		/// <param name="hWndMain">
		/// <para>Type: <b>HWND</b> A handle to the window requesting help. The <b>WinHelp</b> function uses this handle to keep track of which applications have requested help. If the <i>uCommand</i> parameter specifies <b>HELP_CONTEXTMENU</b> or <b>HELP_WM_HELP</b>, <i>hWndMain</i> identifies the control requesting help.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-winhelpw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszHelp">
		/// <para>Type: <b>LPCTSTR</b> The address of a null-terminated string containing the path, if necessary, and the name of the Help file that <b>WinHelp</b> is to display.</para>
		/// <para>The file name can be followed by an angle bracket (&gt;) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-winhelpw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uCommand">
		/// <para>Type: <b>UINT</b> The type of help requested. For a list of possible values and how they affect the value to place in the <i>dwData</i> parameter, see the Remarks section.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-winhelpw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwData">
		/// <para>Type: <b>ULONG_PTR</b> Additional data. The value used depends on the value of the <i>uCommand</i> parameter. For a list of possible <i>dwData</i> values, see the Remarks section.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-winhelpw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-winhelpw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "WinHelpW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL WinHelp(winmdroot.Foundation.HWND hWndMain, winmdroot.Foundation.PCWSTR lpszHelp, uint uCommand, nuint dwData);

		/// <summary>Allows the caller to register a target window to which all pointer input of the specified type is redirected.</summary>
		/// <param name="hwnd">
		/// <para>The window to register as a global redirection target. Redirection can cause the foreground window to lose activation (focus). To avoid this, ensure the window is a message-only window or has the <a href="https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">WS_EX_NOACTIVATE</a> style set.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpointerinputtarget#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pointerType">Type of pointer input to be redirected to the specified  window. This is any valid and supported value from the <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">POINTER_INPUT_TYPE</a> enumeration. Note that the generic <b>PT_POINTER</b> type and the <b>PT_MOUSE</b> type are not valid in this parameter.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpointerinputtarget">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL RegisterPointerInputTarget(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE pointerType);

		/// <summary>Allows the caller to unregister a target window to which all pointer input of the specified type is redirected.</summary>
		/// <param name="hwnd">Window to be un-registered as a global redirection target on its desktop.</param>
		/// <param name="pointerType">Type of pointer input to no longer be redirected to the specified window. This is any valid and supported value from the <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">POINTER_INPUT_TYPE </a> enumeration. Note that the generic <b>PT_POINTER</b> type and the<b> PT_MOUSE</b> type are not valid in this parameter.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterpointerinputtarget">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL UnregisterPointerInputTarget(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE pointerType);

		/// <summary>RegisterPointerInputTargetEx may be altered or unavailable. Instead, use RegisterPointerInputTarget.</summary>
		/// <param name="hwnd">Not supported.</param>
		/// <param name="pointerType">Not supported.</param>
		/// <param name="fObserve">Not supported.</param>
		/// <returns>Not supported.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerpointerinputtargetex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.10240")]
		internal static extern winmdroot.Foundation.BOOL RegisterPointerInputTargetEx(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE pointerType, winmdroot.Foundation.BOOL fObserve);

		/// <summary>UnregisterPointerInputTargetEx may be altered or unavailable. Instead, use UnregisterPointerInputTarget.</summary>
		/// <param name="hwnd">Not supported.</param>
		/// <param name="pointerType">Not supported.</param>
		/// <returns>Not supported.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterpointerinputtargetex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.10240")]
		internal static extern winmdroot.Foundation.BOOL UnregisterPointerInputTargetEx(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE pointerType);

		/// <summary>Signals the system that a predefined event occurred. If any client applications have registered a hook function for the event, the system calls the client's hook function.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to the window that contains the object that generated the event.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-notifywinevent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idObject">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LONG</a></b> Identifies the object that generated the event. This value is either one of the predefined <a href="https://docs.microsoft.com/windows/desktop/WinAuto/object-identifiers">object identifiers</a> or a custom object ID value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-notifywinevent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idChild">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LONG</a></b> Identifies whether the event was generated by an object or by a child element of the object. If this value is CHILDID_SELF, the event was generated by the object itself. If not CHILDID_SELF, this value is the child ID of the element that generated the event.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-notifywinevent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>Servers call this function to notify the system that an event has occurred. Microsoft Active Accessibility checks to see if any client applications have set hook procedures for the event and, if so, calls the appropriate hook procedures. If no hook procedures are registered for the event, the performance penalty for calling this function is minor. Servers call <b>NotifyWinEvent</b> to announce the event to the system after the event has occurred; they must never notify the system of an event before the event has occurred. When the client's hook procedure is called, it receives a number of parameters that describe the event and the object that generated the event. The hook procedure uses the <a href="https://docs.microsoft.com/windows/desktop/api/oleacc/nf-oleacc-accessibleobjectfromevent">AccessibleObjectFromEvent</a> function to retrieve a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/oleacc/nn-oleacc-iaccessible">IAccessible</a> interface of the object that generated the event. Servers may receive a <a href="https://docs.microsoft.com/windows/desktop/WinAuto/wm-getobject">WM_GETOBJECT</a> message immediately after calling this function. This can happen if there are any in-context clients that call <a href="https://docs.microsoft.com/windows/desktop/api/oleacc/nf-oleacc-accessibleobjectfromevent">AccessibleObjectFromEvent</a> in the event callback. When servers call this function, they must be ready to handle <a href="https://docs.microsoft.com/windows/desktop/WinAuto/wm-getobject">WM_GETOBJECT</a>, return an <a href="https://docs.microsoft.com/windows/desktop/api/oleacc/nn-oleacc-iaccessible">IAccessible</a> interface pointer, and handle any of the <b>IAccessible</b> methods. <b>Note to Server Developers:  </b>When you call <b>NotifyWinEvent</b>, if any clients are listening for that event in-context, their event handlers, which typically send <a href="https://docs.microsoft.com/windows/desktop/WinAuto/wm-getobject">WM_GETOBJECT</a> and call <a href="https://docs.microsoft.com/windows/desktop/api/oleacc/nn-oleacc-iaccessible">IAccessible</a> methods, will execute before <b>NotifyWinEvent</b> returns. When you call <b>NotifyWinEvent</b>, you should be prepared to handle these calls, if they occur. If you need to do extra setup to allow for this, you should do so before you call <b>NotifyWinEvent</b>, not after.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-notifywinevent#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern void NotifyWinEvent(uint @event, winmdroot.Foundation.HWND hwnd, int idObject, int idChild);

		/// <summary>Removes an event hook function created by a previous call to SetWinEventHook.</summary>
		/// <param name="hWinEventHook">
		/// <para>Type: <b>HWINEVENTHOOK</b> Handle to the event hook returned in the previous call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwineventhook">SetWinEventHook</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unhookwinevent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If successful, returns <b>TRUE</b>; otherwise, returns <b>FALSE</b>. Three common errors cause this function to fail: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unhookwinevent">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL UnhookWinEvent(winmdroot.UI.Accessibility.HWINEVENTHOOK hWinEventHook);

		/// <inheritdoc cref="SetWinEventHook(uint, uint, winmdroot.Foundation.HINSTANCE, winmdroot.UI.Accessibility.WINEVENTPROC, uint, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe UnhookWinEventSafeHandle SetWinEventHook(uint eventMin, uint eventMax, SafeHandle hmodWinEventProc, winmdroot.UI.Accessibility.WINEVENTPROC pfnWinEventProc, uint idProcess, uint idThread, uint dwFlags)
		{
			bool hmodWinEventProcAddRef = false;
			try
			{
				winmdroot.Foundation.HINSTANCE hmodWinEventProcLocal;
				if (hmodWinEventProc is object)
				{
					hmodWinEventProc.DangerousAddRef(ref hmodWinEventProcAddRef);
					hmodWinEventProcLocal = (winmdroot.Foundation.HINSTANCE)hmodWinEventProc.DangerousGetHandle();
				}
				else
					hmodWinEventProcLocal = default(winmdroot.Foundation.HINSTANCE);
				winmdroot.UI.Accessibility.HWINEVENTHOOK __result = PInvoke.SetWinEventHook(eventMin, eventMax, hmodWinEventProcLocal, pfnWinEventProc, idProcess, idThread, dwFlags);
				return new UnhookWinEventSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hmodWinEventProcAddRef)
					hmodWinEventProc.DangerousRelease();
			}
		}

		/// <summary>Sets an event hook function for a range of events.</summary>
		/// <param name="eventMin">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Specifies the <a href="https://docs.microsoft.com/windows/desktop/WinAuto/event-constants">event constant</a> for the lowest event value in the range of events that are handled by the hook function. This parameter can be set to <b>EVENT_MIN</b> to indicate the lowest possible event value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="eventMax">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Specifies the event constant for the highest event value in the range of events that are handled by the hook function. This parameter can be  set to <a href="https://docs.microsoft.com/windows/desktop/WinAuto/event-constants">EVENT_MAX</a> to indicate the highest possible event value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hmodWinEventProc">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HMODULE</a></b> Handle to the DLL that contains the hook function at <i>lpfnWinEventProc</i>, if the WINEVENT_INCONTEXT flag is specified in the <i>dwFlags</i> parameter. If the hook function is not located in a DLL, or if the WINEVENT_OUTOFCONTEXT flag is specified, this parameter is <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pfnWinEventProc">
		/// <para>Type: <b>WINEVENTPROC</b> Pointer to the event hook function. For more information about this function, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-wineventproc">WinEventProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idProcess">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">DWORD</a></b> Specifies the ID of the process from which the hook function receives events. Specify zero (0) to receive events from all processes on the current desktop.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idThread">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">DWORD</a></b> Specifies the ID of the thread from which the hook function receives events. If this parameter is zero, the hook function is associated with all existing threads on the current desktop.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
		/// <para>Flag values that specify the location of the hook function and of the events to be skipped. The following flags are valid:</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWINEVENTHOOK</b> If successful, returns an <a href="/windows/desktop/WinAuto/hwineventhook">HWINEVENTHOOK</a> value that identifies this event hook instance. Applications save this return value to use it with the <a href="/windows/desktop/api/winuser/nf-winuser-unhookwinevent">UnhookWinEvent</a> function. If unsuccessful, returns zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwineventhook">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.Accessibility.HWINEVENTHOOK SetWinEventHook(uint eventMin, uint eventMax, winmdroot.Foundation.HINSTANCE hmodWinEventProc, winmdroot.UI.Accessibility.WINEVENTPROC pfnWinEventProc, uint idProcess, uint idThread, uint dwFlags);

		/// <summary>Determines whether there is an installed WinEvent hook that might be notified of a specified event.</summary>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If there is a hook to be notified of the specified event, the return value is <b>TRUE</b>. If there are no hooks to be notified of the specified event, the return value is <b>FALSE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswineventhookinstalled">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL IsWinEventHookInstalled(uint @event);

		/// <inheritdoc cref="GetRawInputData(winmdroot.UI.Input.HRAWINPUT, winmdroot.UI.Input.RAW_INPUT_DATA_COMMAND_FLAGS, void*, uint*, uint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint GetRawInputData(winmdroot.UI.Input.HRAWINPUT hRawInput, winmdroot.UI.Input.RAW_INPUT_DATA_COMMAND_FLAGS uiCommand, void* pData, ref uint pcbSize, uint cbSizeHeader)
		{
			fixed (uint* pcbSizeLocal = &pcbSize)
			{
				uint __result = PInvoke.GetRawInputData(hRawInput, uiCommand, pData, pcbSizeLocal, cbSizeHeader);
				return __result;
			}
		}

		/// <summary>Retrieves the raw input from the specified device.</summary>
		/// <param name="hRawInput">
		/// <para>Type: <b>HRAWINPUT</b> A handle to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinput">RAWINPUT</a> structure. This comes from the <i>lParam</i> in <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiCommand">Type: <b>UINT</b></param>
		/// <param name="pData">
		/// <para>Type: <b>LPVOID</b> A pointer to the data that comes from the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinput">RAWINPUT</a> structure. This depends on the value of <i>uiCommand</i>. If <i>pData</i> is <b>NULL</b>, the required size of the buffer is returned in *<i>pcbSize</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pcbSize">
		/// <para>Type: <b>PUINT</b> The size, in bytes, of the data in <i>pData</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbSizeHeader">
		/// <para>Type: <b>UINT</b> The size, in bytes, of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputheader">RAWINPUTHEADER</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If <i>pData</i> is <b>NULL</b> and the function is successful, the return value is 0. If <i>pData</i> is not <b>NULL</b> and the function is successful, the return value is the number of bytes copied into pData. If there is an error, the return value is (<b>UINT</b>)-1.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe uint GetRawInputData(winmdroot.UI.Input.HRAWINPUT hRawInput, winmdroot.UI.Input.RAW_INPUT_DATA_COMMAND_FLAGS uiCommand, [Optional] void* pData, uint* pcbSize, uint cbSizeHeader);

		/// <inheritdoc cref="GetRawInputDeviceInfo(winmdroot.Foundation.HANDLE, winmdroot.UI.Input.RAW_INPUT_DEVICE_INFO_COMMAND, void*, uint*)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint GetRawInputDeviceInfo(SafeHandle hDevice, winmdroot.UI.Input.RAW_INPUT_DEVICE_INFO_COMMAND uiCommand, void* pData, ref uint pcbSize)
		{
			bool hDeviceAddRef = false;
			try
			{
				fixed (uint* pcbSizeLocal = &pcbSize)
				{
					winmdroot.Foundation.HANDLE hDeviceLocal;
					if (hDevice is object)
					{
						hDevice.DangerousAddRef(ref hDeviceAddRef);
						hDeviceLocal = (winmdroot.Foundation.HANDLE)hDevice.DangerousGetHandle();
					}
					else
						hDeviceLocal = default(winmdroot.Foundation.HANDLE);
					uint __result = PInvoke.GetRawInputDeviceInfo(hDeviceLocal, uiCommand, pData, pcbSizeLocal);
					return __result;
				}
			}
			finally
			{
				if (hDeviceAddRef)
					hDevice.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about the raw input device.</summary>
		/// <param name="hDevice">
		/// <para>Type: <b>HANDLE</b> A handle to the raw input device. This comes from the <b>hDevice</b> member of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputheader">RAWINPUTHEADER</a> or from <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getrawinputdevicelist">GetRawInputDeviceList</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdeviceinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiCommand">Type: <b>UINT</b></param>
		/// <param name="pData">
		/// <para>Type: <b>LPVOID</b> A pointer to a buffer that contains the information specified by <i>uiCommand</i>. If <i>uiCommand</i> is <b>RIDI_DEVICEINFO</b>, set the <b>cbSize</b> member of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rid_device_info">RID_DEVICE_INFO</a> to <c>sizeof(RID_DEVICE_INFO)</c> before calling <b>GetRawInputDeviceInfo</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdeviceinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pcbSize">
		/// <para>Type: <b>PUINT</b> The size, in bytes, of the data in <i>pData</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdeviceinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If successful, this function returns a non-negative number indicating the number of bytes copied to <i>pData</i>. If <i>pData</i> is not large enough for the data, the function returns -1. If <i>pData</i> is <b>NULL</b>, the function returns a value of zero. In both of these cases, <i>pcbSize</i> is set to the minimum size required for the <i>pData</i> buffer. Call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> to identify any other errors.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdeviceinfow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetRawInputDeviceInfoW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe uint GetRawInputDeviceInfo(winmdroot.Foundation.HANDLE hDevice, winmdroot.UI.Input.RAW_INPUT_DEVICE_INFO_COMMAND uiCommand, [Optional] void* pData, uint* pcbSize);

		/// <inheritdoc cref="GetRawInputBuffer(winmdroot.UI.Input.RAWINPUT*, uint*, uint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint GetRawInputBuffer(winmdroot.UI.Input.RAWINPUT* pData, ref uint pcbSize, uint cbSizeHeader)
		{
			fixed (uint* pcbSizeLocal = &pcbSize)
			{
				uint __result = PInvoke.GetRawInputBuffer(pData, pcbSizeLocal, cbSizeHeader);
				return __result;
			}
		}

		/// <summary>Performs a buffered read of the raw input data.</summary>
		/// <param name="pData">
		/// <para>Type: **PRAWINPUT** A pointer to a buffer of [RAWINPUT](ns-winuser-rawinput.md) structures that contain the raw input data. If **NULL**, size of the first raw input message data (minimum required buffer), in bytes, is returned in \**pcbSize*.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pcbSize">
		/// <para>Type: **PUINT** The size, in bytes, of the provided [RAWINPUT](ns-winuser-rawinput.md) buffer.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbSizeHeader">
		/// <para>Type: **UINT** The size, in bytes, of the [RAWINPUTHEADER](ns-winuser-rawinputheader.md) structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: **UINT** If *pData* is **NULL** and the function is successful, the return value is zero. If *pData* is not **NULL** and the function is successful, the return value is the number of [RAWINPUT](ns-winuser-rawinput.md) structures written to *pData*. If an error occurs, the return value is (**UINT**)-1. Call [GetLastError](/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) for the error code.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe uint GetRawInputBuffer([Optional] winmdroot.UI.Input.RAWINPUT* pData, uint* pcbSize, uint cbSizeHeader);

		/// <inheritdoc cref="RegisterRawInputDevices(winmdroot.UI.Input.RAWINPUTDEVICE*, uint, uint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL RegisterRawInputDevices(Span<winmdroot.UI.Input.RAWINPUTDEVICE> pRawInputDevices, uint cbSize)
		{
			fixed (winmdroot.UI.Input.RAWINPUTDEVICE* pRawInputDevicesLocal = pRawInputDevices)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.RegisterRawInputDevices(pRawInputDevicesLocal, (uint )pRawInputDevices.Length, cbSize);
				return __result;
			}
		}

		/// <summary>Registers the devices that supply the raw input data.</summary>
		/// <param name="pRawInputDevices">
		/// <para>Type: <b>PCRAWINPUTDEVICE</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevice">RAWINPUTDEVICE</a> structures that represent the devices that supply the raw input.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerrawinputdevices#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiNumDevices">
		/// <para>Type: <b>UINT</b> The number of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevice">RAWINPUTDEVICE</a> structures pointed to by <i>pRawInputDevices</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerrawinputdevices#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbSize">
		/// <para>Type: <b>UINT</b> The size, in bytes, of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevice">RAWINPUTDEVICE</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerrawinputdevices#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>. If the function fails, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> for more information.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerrawinputdevices">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe winmdroot.Foundation.BOOL RegisterRawInputDevices(winmdroot.UI.Input.RAWINPUTDEVICE* pRawInputDevices, uint uiNumDevices, uint cbSize);

		/// <inheritdoc cref="GetRegisteredRawInputDevices(winmdroot.UI.Input.RAWINPUTDEVICE*, uint*, uint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint GetRegisteredRawInputDevices(winmdroot.UI.Input.RAWINPUTDEVICE* pRawInputDevices, ref uint puiNumDevices, uint cbSize)
		{
			fixed (uint* puiNumDevicesLocal = &puiNumDevices)
			{
				uint __result = PInvoke.GetRegisteredRawInputDevices(pRawInputDevices, puiNumDevicesLocal, cbSize);
				return __result;
			}
		}

		/// <summary>Retrieves the information about the raw input devices for the current application.</summary>
		/// <param name="pRawInputDevices">
		/// <para>Type: <b>PRAWINPUTDEVICE</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevice">RAWINPUTDEVICE</a> structures for the application.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getregisteredrawinputdevices#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="puiNumDevices">
		/// <para>Type: <b>PUINT</b> The number of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevice">RAWINPUTDEVICE</a> structures in *<i>pRawInputDevices</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getregisteredrawinputdevices#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbSize">
		/// <para>Type: <b>UINT</b> The size, in bytes, of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevice">RAWINPUTDEVICE</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getregisteredrawinputdevices#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If successful, the function returns a non-negative number that is the number of <a href="/windows/desktop/api/winuser/ns-winuser-rawinputdevice">RAWINPUTDEVICE</a> structures written to the buffer. If the <i>pRawInputDevices</i> buffer is too small or <b>NULL</b>, the function sets the last error as <b>ERROR_INSUFFICIENT_BUFFER</b>, returns -1, and sets <i>puiNumDevices</i> to the required number of devices. If the function fails for any other reason, it returns -1. For more details, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getregisteredrawinputdevices">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe uint GetRegisteredRawInputDevices([Optional] winmdroot.UI.Input.RAWINPUTDEVICE* pRawInputDevices, uint* puiNumDevices, uint cbSize);

		/// <inheritdoc cref="GetRawInputDeviceList(winmdroot.UI.Input.RAWINPUTDEVICELIST*, uint*, uint)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint GetRawInputDeviceList(winmdroot.UI.Input.RAWINPUTDEVICELIST* pRawInputDeviceList, ref uint puiNumDevices, uint cbSize)
		{
			fixed (uint* puiNumDevicesLocal = &puiNumDevices)
			{
				uint __result = PInvoke.GetRawInputDeviceList(pRawInputDeviceList, puiNumDevicesLocal, cbSize);
				return __result;
			}
		}

		/// <summary>Enumerates the raw input devices attached to the system.</summary>
		/// <param name="pRawInputDeviceList">
		/// <para>Type: <b>PRAWINPUTDEVICELIST</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevicelist">RAWINPUTDEVICELIST</a> structures for the devices attached to the system. If <b>NULL</b>, the number of devices are returned in *<i>puiNumDevices</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdevicelist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="puiNumDevices">
		/// <para>Type: <b>PUINT</b> If <i>pRawInputDeviceList</i> is <b>NULL</b>, the function populates this variable with the number of devices attached to the system; otherwise, this variable specifies the number of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevicelist">RAWINPUTDEVICELIST</a> structures that can be contained in the buffer to which <i>pRawInputDeviceList</i> points. If this value is less than the number of devices attached to the system, the function returns the actual number of devices in this variable and fails with <b>ERROR_INSUFFICIENT_BUFFER</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdevicelist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbSize">
		/// <para>Type: <b>UINT</b> The size of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputdevicelist">RAWINPUTDEVICELIST</a> structure, in bytes.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdevicelist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function is successful, the return value is the number of devices stored in the buffer pointed to by <i>pRawInputDeviceList</i>. On any other error, the function returns (<b>UINT</b>) -1 and <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns the error indication.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawinputdevicelist">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe uint GetRawInputDeviceList([Optional] winmdroot.UI.Input.RAWINPUTDEVICELIST* pRawInputDeviceList, uint* puiNumDevices, uint cbSize);

		/// <summary>Verifies that the size of the RAWINPUTHEADER structure is correct.</summary>
		/// <param name="paRawInput">
		/// <para>Type: <b>PRAWINPUT*</b> Ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defrawinputproc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nInput">
		/// <para>Type: <b>INT</b> Ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defrawinputproc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbSizeHeader">
		/// <para>Type: <b>UINT</b> The size, in bytes, of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-rawinputheader">RAWINPUTHEADER</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defrawinputproc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> If successful, the function returns <b>0</b>. Otherwise it returns <b>-1</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defrawinputproc">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe winmdroot.Foundation.LRESULT DefRawInputProc(winmdroot.UI.Input.RAWINPUT** paRawInput, int nInput, uint cbSizeHeader);

		/// <inheritdoc cref="GetCurrentInputMessageSource(winmdroot.UI.Input.INPUT_MESSAGE_SOURCE*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetCurrentInputMessageSource(out winmdroot.UI.Input.INPUT_MESSAGE_SOURCE inputMessageSource)
		{
			fixed (winmdroot.UI.Input.INPUT_MESSAGE_SOURCE* inputMessageSourceLocal = &inputMessageSource)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetCurrentInputMessageSource(inputMessageSourceLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the source of the input message.</summary>
		/// <param name="inputMessageSource">
		/// <para>The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input_message_source">INPUT_MESSAGE_SOURCE</a> structure that holds the device type and the ID of the input message source. <div class="alert"><b>Note</b>  <b>deviceType</b> in <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input_message_source">INPUT_MESSAGE_SOURCE</a> is set to   <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ne-winuser-input_message_device_type">IMDT_UNAVAILABLE</a> when <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-sendmessage">SendMessage</a> is used to inject input (system generated or through messages such as <a href="https://docs.microsoft.com/windows/desktop/gdi/wm-paint">WM_PAINT</a>). This remains true until  <b>SendMessage</b> returns.</div> <div> </div></para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcurrentinputmessagesource#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcurrentinputmessagesource">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetCurrentInputMessageSource(winmdroot.UI.Input.INPUT_MESSAGE_SOURCE* inputMessageSource);

		/// <inheritdoc cref="GetCIMSSM(winmdroot.UI.Input.INPUT_MESSAGE_SOURCE*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetCIMSSM(out winmdroot.UI.Input.INPUT_MESSAGE_SOURCE inputMessageSource)
		{
			fixed (winmdroot.UI.Input.INPUT_MESSAGE_SOURCE* inputMessageSourceLocal = &inputMessageSource)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetCIMSSM(inputMessageSourceLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the source of the input message (GetCurrentInputMessageSourceInSendMessage).</summary>
		/// <param name="inputMessageSource">The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input_message_source">INPUT_MESSAGE_SOURCE</a> structure that holds the device type and the ID of the input message source.</param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns ERROR_INVALID_PARAMETER. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcimssm">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetCIMSSM(winmdroot.UI.Input.INPUT_MESSAGE_SOURCE* inputMessageSource);

		/// <inheritdoc cref="LoadKeyboardLayout(winmdroot.Foundation.PCWSTR, winmdroot.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.UI.TextServices.HKL LoadKeyboardLayout(string pwszKLID, winmdroot.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags)
		{
			fixed (char* pwszKLIDLocal = pwszKLID)
			{
				winmdroot.UI.TextServices.HKL __result = PInvoke.LoadKeyboardLayout(pwszKLIDLocal, Flags);
				return __result;
			}
		}

		/// <summary>Loads a new input locale identifier (formerly called the keyboard layout) into the system.</summary>
		/// <param name="pwszKLID">
		/// <para>Type: <b>LPCTSTR</b> The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the <a href="https://docs.microsoft.com/windows/desktop/Intl/language-identifiers">Language Identifier</a> (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout (such as the Dvorak layout) are named "00010409", "00020409", and so on.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadkeyboardlayoutw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Flags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HKL</b> If the function succeeds, the return value is the input locale identifier corresponding to the name specified in <i>pwszKLID</i>. If no matching locale is available, the return value is the default language of the system. If the function fails, the return value is NULL. This can occur if the layout library is loaded from the application directory. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadkeyboardlayoutw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadKeyboardLayoutW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.TextServices.HKL LoadKeyboardLayout(winmdroot.Foundation.PCWSTR pwszKLID, winmdroot.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags);

		/// <summary>Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input locale identifier specifies a locale as well as the physical layout of the keyboard.</summary>
		/// <param name="hkl">
		/// <para>Type: <b>HKL</b> Input locale identifier to be activated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-activatekeyboardlayout#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Flags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HKL</b> The return value is of type <b>HKL</b>. If the function succeeds, the return value is the previous input locale identifier. Otherwise, it is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-activatekeyboardlayout">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.TextServices.HKL ActivateKeyboardLayout(winmdroot.UI.TextServices.HKL hkl, winmdroot.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags);

		/// <inheritdoc cref="ToUnicodeEx(uint, uint, byte*, winmdroot.Foundation.PWSTR, int, uint, winmdroot.UI.TextServices.HKL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int ToUnicodeEx(uint wVirtKey, uint wScanCode, ReadOnlySpan<byte> lpKeyState, winmdroot.Foundation.PWSTR pwszBuff, int cchBuff, uint wFlags, winmdroot.UI.TextServices.HKL dwhkl)
		{
			fixed (byte* lpKeyStateLocal = lpKeyState)
			{
				if (lpKeyState.Length < 256)throw new ArgumentException();
				int __result = PInvoke.ToUnicodeEx(wVirtKey, wScanCode, lpKeyStateLocal, pwszBuff, cchBuff, wFlags, dwhkl);
				return __result;
			}
		}

		/// <summary>Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.</summary>
		/// <param name="wVirtKey">
		/// <para>Type: <b>UINT</b> The virtual-key code to be translated. See <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual-Key Codes</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wScanCode">
		/// <para>Type: <b>UINT</b> The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpKeyState">
		/// <para>Type: <b>const BYTE*</b> A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pwszBuff">
		/// <para>Type: <b>LPWSTR</b> The buffer that receives the translated Unicode character or characters. However, this buffer may be returned without being null-terminated even though the variable name suggests that it is null-terminated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchBuff">
		/// <para>Type: <b>int</b> The size, in characters, of the buffer pointed to by the <i>pwszBuff</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wFlags">
		/// <para>Type: <b>UINT</b> The behavior of the function.</para>
		/// <para>If bit 0 is set, a menu is active.</para>
		/// <para>If bit 2 is set, keyboard state is not changed (Windows 10, version 1607 and newer) All other bits (through 31) are reserved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwhkl">
		/// <para>Type: <b>HKL</b> The input locale identifier used to translate the specified code. This parameter can be any input locale identifier previously returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadkeyboardlayouta">LoadKeyboardLayout</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> The function returns one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicodeex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int ToUnicodeEx(uint wVirtKey, uint wScanCode, byte* lpKeyState, winmdroot.Foundation.PWSTR pwszBuff, int cchBuff, uint wFlags, winmdroot.UI.TextServices.HKL dwhkl);

		/// <summary>Unloads an input locale identifier (formerly called a keyboard layout).</summary>
		/// <param name="hkl">
		/// <para>Type: <b>HKL</b> The input locale identifier to be unloaded.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unloadkeyboardlayout#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The function can fail for the following reasons: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unloadkeyboardlayout">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL UnloadKeyboardLayout(winmdroot.UI.TextServices.HKL hkl);

		/// <summary>Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the system.</summary>
		/// <param name="pwszKLID">
		/// <para>Type: <b>LPTSTR</b> The buffer (of at least <b>KL_NAMELENGTH</b> characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadkeyboardlayouta">LoadKeyboardLayout</a> function, unless layout substitution took place.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardlayoutnamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardlayoutnamew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetKeyboardLayoutNameW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL GetKeyboardLayoutName(winmdroot.Foundation.PWSTR pwszKLID);

		/// <inheritdoc cref="GetKeyboardLayoutList(int, winmdroot.UI.TextServices.HKL*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int GetKeyboardLayoutList(Span<winmdroot.UI.TextServices.HKL> lpList)
		{
			fixed (winmdroot.UI.TextServices.HKL* lpListLocal = lpList)
			{
				int __result = PInvoke.GetKeyboardLayoutList(lpList.Length, lpListLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies the identifiers to the specified buffer.</summary>
		/// <param name="nBuff">
		/// <para>Type: <b>int</b> The maximum number of handles that the buffer can hold.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardlayoutlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpList">
		/// <para>Type: <b>HKL*</b> A pointer to the buffer that receives the array of input locale identifiers.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardlayoutlist#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the number of input locale identifiers copied to the buffer or, if <i>nBuff</i> is zero, the return value is the size, in array elements, of the buffer needed to receive all current input locale identifiers. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardlayoutlist">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int GetKeyboardLayoutList(int nBuff, [Optional] winmdroot.UI.TextServices.HKL* lpList);

		/// <summary>Retrieves the active input locale identifier (formerly called the keyboard layout).</summary>
		/// <param name="idThread">
		/// <para>Type: <b>DWORD</b> The identifier of the thread to query, or 0 for the current thread.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardlayout#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HKL</b> The return value is the input locale identifier for the thread. The low word contains a <a href="/windows/desktop/Intl/language-identifiers">Language Identifier</a> for the input language and the high word contains a device handle to the physical layout of the keyboard.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardlayout">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.TextServices.HKL GetKeyboardLayout(uint idThread);

		/// <inheritdoc cref="GetMouseMovePointsEx(uint, winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT*, winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT*, int, winmdroot.UI.Input.KeyboardAndMouse.GET_MOUSE_MOVE_POINTS_EX_RESOLUTION)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int GetMouseMovePointsEx(uint cbSize, in winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT lppt, Span<winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT> lpptBuf, winmdroot.UI.Input.KeyboardAndMouse.GET_MOUSE_MOVE_POINTS_EX_RESOLUTION resolution)
		{
			fixed (winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT* lpptBufLocal = lpptBuf)
			{
				fixed (winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT* lpptLocal = &lppt)
				{
					int __result = PInvoke.GetMouseMovePointsEx(cbSize, lpptLocal, lpptBufLocal, lpptBuf.Length, resolution);
					return __result;
				}
			}
		}

		/// <summary>Retrieves a history of up to 64 previous coordinates of the mouse or pen.</summary>
		/// <param name="cbSize">
		/// <para>Type: <b>UINT</b> The size, in bytes, of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-mousemovepoint">MOUSEMOVEPOINT</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmousemovepointsex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lppt">
		/// <para>Type: <b>LPMOUSEMOVEPOINT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-mousemovepoint">MOUSEMOVEPOINT</a> structure containing valid mouse coordinates (in screen coordinates). It may also contain a time stamp. The <b>GetMouseMovePointsEx</b> function searches for the point in the mouse coordinates history. If the function finds the point, it returns the last <i>nBufPoints</i> prior to and including the supplied point. If your application supplies a time stamp, the <b>GetMouseMovePointsEx</b> function will use it to differentiate between two equal points that were recorded at different times. An application should call this function using the mouse coordinates received from the <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a> message and convert them to screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmousemovepointsex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpptBuf">
		/// <para>Type: <b>LPMOUSEMOVEPOINT</b> A pointer to a buffer that will receive the points. It should be at least <i>cbSize</i>* <i>nBufPoints</i> in size.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmousemovepointsex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nBufPoints">
		/// <para>Type: <b>int</b> The number of points to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmousemovepointsex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="resolution">Type: <b>DWORD</b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the number of points in the buffer. Otherwise, the function returns –1. For extended error information, your application can call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmousemovepointsex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int GetMouseMovePointsEx(uint cbSize, winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT* lppt, winmdroot.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT* lpptBuf, int nBufPoints, winmdroot.UI.Input.KeyboardAndMouse.GET_MOUSE_MOVE_POINTS_EX_RESOLUTION resolution);

		/// <inheritdoc cref="TrackMouseEvent(winmdroot.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL TrackMouseEvent(ref winmdroot.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT lpEventTrack)
		{
			fixed (winmdroot.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT* lpEventTrackLocal = &lpEventTrack)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.TrackMouseEvent(lpEventTrackLocal);
				return __result;
			}
		}

		/// <summary>Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.</summary>
		/// <param name="lpEventTrack">
		/// <para>Type: <b>LPTRACKMOUSEEVENT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-trackmouseevent">TRACKMOUSEEVENT</a> structure that contains tracking information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackmouseevent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero . If the function fails, return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackmouseevent">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL TrackMouseEvent(winmdroot.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT* lpEventTrack);

		/// <summary>Defines a system-wide hot key.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that will receive <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-hotkey">WM_HOTKEY</a> messages generated by the hot key. If this parameter is <b>NULL</b>, <b>WM_HOTKEY</b> messages are posted to the message queue of the calling thread and must be processed in the message loop.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerhotkey#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="id">
		/// <para>Type: <b>int</b> The identifier of the hot key.  If the <i>hWnd</i> parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. If a hot key already exists with the same <i>hWnd</i> and <i>id</i> parameters, see Remarks for the action taken.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerhotkey#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fsModifiers">
		/// <para>Type: <b>UINT</b> The keys that must be pressed in combination with the key specified by the</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerhotkey#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="vk">
		/// <para>Type: <b>UINT</b> The virtual-key code of the hot key. See <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerhotkey#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerhotkey">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL RegisterHotKey(winmdroot.Foundation.HWND hWnd, int id, winmdroot.UI.Input.KeyboardAndMouse.HOT_KEY_MODIFIERS fsModifiers, uint vk);

		/// <summary>Frees a hot key previously registered by the calling thread.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window associated with the hot key to be freed. This parameter should be <b>NULL</b> if the hot key is not associated with a window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterhotkey#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="id">
		/// <para>Type: <b>int</b> The identifier of the hot key to be freed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterhotkey#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterhotkey">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL UnregisterHotKey(winmdroot.Foundation.HWND hWnd, int id);

		/// <summary>Reverses or restores the meaning of the left and right mouse buttons.</summary>
		/// <param name="fSwap">
		/// <para>Type: <b>BOOL</b> If this parameter is <b>TRUE</b>, the left button generates right-button messages and the right button generates left-button messages. If this parameter is <b>FALSE</b>, the buttons are restored to their original meanings.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-swapmousebutton#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the meaning of the mouse buttons was reversed previously, before the function was called, the return value is nonzero. If the meaning of the mouse buttons was not reversed, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-swapmousebutton">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SwapMouseButton(winmdroot.Foundation.BOOL fSwap);

		/// <summary>Retrieves the current double-click time for the mouse.</summary>
		/// <returns>
		/// <para>Type: <b>UINT</b> The return value specifies the current double-click time, in milliseconds. The maximum return value is 5000 milliseconds.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdoubleclicktime">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetDoubleClickTime();

		/// <summary>Sets the double-click time for the mouse.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdoubleclicktime">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetDoubleClickTime(uint param0);

		/// <summary>Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue.</summary>
		/// <param name="hWnd">
		/// <para>Type: **HWND** A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setfocus#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: **HWND** If the function succeeds, the return value is the handle to the window that previously had the keyboard focus. If the *hWnd* parameter is invalid or the window is not attached to the calling thread's message queue, the return value is NULL. To get extended error information, call [GetLastError function](../errhandlingapi/nf-errhandlingapi-getlasterror.md). Extended error ERROR_INVALID_PARAMETER (0x57) means that window is in disabled state.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setfocus">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND SetFocus(winmdroot.Foundation.HWND hWnd);

		/// <summary>Retrieves the window handle to the active window attached to the calling thread's message queue.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is the handle to the active window attached to the calling thread's message queue. Otherwise, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getactivewindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetActiveWindow();

		/// <summary>Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is the handle to the window with the keyboard focus. If the calling thread's message queue does not have an associated window with the keyboard focus, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getfocus">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetFocus();

		/// <summary>Retrieves the current code page.</summary>
		/// <returns>
		/// <para>Type: <b>UINT</b> The return value is an OEM code-page identifier, or it is the default identifier if the registry value is not readable. For a list of OEM code-page identifiers, see <a href="/windows/desktop/Intl/code-page-identifiers">Code Page Identifiers</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkbcodepage">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetKBCodePage();

		/// <summary>Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off�alternating each time the key is pressed).</summary>
		/// <param name="nVirtKey">
		/// <para>Type: <b>int</b> A virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), <i>nVirtKey</i> must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the "o" key, whereas VK_OEM_1 refers to the "o with umlaut" key.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeystate#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>SHORT</b> The return value specifies the status of the specified virtual key, as follows: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeystate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern short GetKeyState(int nVirtKey);

		/// <summary>Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState.</summary>
		/// <param name="vKey">
		/// <para>Type: <b>int</b> The virtual-key code. For more information, see <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>. You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getasynckeystate#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>SHORT</b> If the function succeeds, the return value specifies whether the key was pressed since the last call to <b>GetAsyncKeyState</b>, and whether the key is currently up or down. If the most significant bit is set, the key is down, and if the least significant bit is set, the key was pressed after the previous call to <b>GetAsyncKeyState</b>. However, you should not rely on this last behavior; for more information, see the Remarks. The return value is zero for the following cases: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getasynckeystate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern short GetAsyncKeyState(int vKey);

		/// <inheritdoc cref="GetKeyboardState(byte*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetKeyboardState(Span<byte> lpKeyState)
		{
			fixed (byte* lpKeyStateLocal = lpKeyState)
			{
				if (lpKeyState.Length < 256)throw new ArgumentException();
				winmdroot.Foundation.BOOL __result = PInvoke.GetKeyboardState(lpKeyStateLocal);
				return __result;
			}
		}

		/// <summary>Copies the status of the 256 virtual keys to the specified buffer.</summary>
		/// <param name="lpKeyState">
		/// <para>Type: <b>PBYTE</b> The 256-byte array that receives the status data for each virtual key.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardstate#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardstate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetKeyboardState(byte* lpKeyState);

		/// <inheritdoc cref="SetKeyboardState(byte*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetKeyboardState(Span<byte> lpKeyState)
		{
			fixed (byte* lpKeyStateLocal = lpKeyState)
			{
				if (lpKeyState.Length < 256)throw new ArgumentException();
				winmdroot.Foundation.BOOL __result = PInvoke.SetKeyboardState(lpKeyStateLocal);
				return __result;
			}
		}

		/// <summary>Copies an array of keyboard key states into the calling thread's keyboard input-state table. This is the same table accessed by the GetKeyboardState and GetKeyState functions. Changes made to this table do not affect keyboard input to any other thread.</summary>
		/// <param name="lpKeyState">
		/// <para>Type: <b>LPBYTE</b> A pointer to a 256-byte array that contains keyboard key states.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setkeyboardstate#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setkeyboardstate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetKeyboardState(byte* lpKeyState);

		/// <summary>Retrieves a string that represents the name of a key.</summary>
		/// <param name="lParam">
		/// <para>Type: <b>LONG</b> The second parameter of the keyboard message (such as <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>) to be processed. The function interprets the following bit positions in the <i>lParam</i>. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeynametextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPTSTR</b> The buffer that will receive the key name.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeynametextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchSize">
		/// <para>Type: <b>int</b> The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.)</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeynametextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeynametextw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetKeyNameTextW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetKeyNameText(int lParam, winmdroot.Foundation.PWSTR lpString, int cchSize);

		/// <summary>Retrieves information about the current keyboard.</summary>
		/// <param name="nTypeFlag">Type: <b>int</b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value specifies the requested information. If the function fails and <i>nTypeFlag</i> is not 1, the return value is 0; 0 is a valid return value when <i>nTypeFlag</i> is 1 (keyboard subtype). To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeyboardtype">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetKeyboardType(int nTypeFlag);

		/// <inheritdoc cref="ToAscii(uint, uint, byte*, ushort*, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int ToAscii(uint uVirtKey, uint uScanCode, ReadOnlySpan<byte> lpKeyState, out ushort lpChar, uint uFlags)
		{
			fixed (ushort* lpCharLocal = &lpChar)
			{
				fixed (byte* lpKeyStateLocal = lpKeyState)
				{
					if (lpKeyState.Length < 256)throw new ArgumentException();
					int __result = PInvoke.ToAscii(uVirtKey, uScanCode, lpKeyStateLocal, lpCharLocal, uFlags);
					return __result;
				}
			}
		}

		/// <summary>Translates the specified virtual-key code and keyboard state to the corresponding character or characters.</summary>
		/// <param name="uVirtKey">
		/// <para>Type: <b>UINT</b> The virtual-key code to be translated. See <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual-Key Codes</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toascii#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uScanCode">
		/// <para>Type: <b>UINT</b> The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toascii#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpKeyState">
		/// <para>Type: <b>const BYTE*</b> A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed). The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toascii#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpChar">
		/// <para>Type: <b>LPWORD</b> The buffer that receives the translated character or characters.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toascii#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">
		/// <para>Type: <b>UINT</b> This parameter must be 1 if a menu is active, or 0 otherwise.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toascii#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toascii">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int ToAscii(uint uVirtKey, uint uScanCode, [Optional] byte* lpKeyState, ushort* lpChar, uint uFlags);

		/// <inheritdoc cref="ToAsciiEx(uint, uint, byte*, ushort*, uint, winmdroot.UI.TextServices.HKL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int ToAsciiEx(uint uVirtKey, uint uScanCode, ReadOnlySpan<byte> lpKeyState, out ushort lpChar, uint uFlags, winmdroot.UI.TextServices.HKL dwhkl)
		{
			fixed (ushort* lpCharLocal = &lpChar)
			{
				fixed (byte* lpKeyStateLocal = lpKeyState)
				{
					if (lpKeyState.Length < 256)throw new ArgumentException();
					int __result = PInvoke.ToAsciiEx(uVirtKey, uScanCode, lpKeyStateLocal, lpCharLocal, uFlags, dwhkl);
					return __result;
				}
			}
		}

		/// <summary>Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the input locale identifier.</summary>
		/// <param name="uVirtKey">
		/// <para>Type: <b>UINT</b> The virtual-key code to be translated. See <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual-Key Codes</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toasciiex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uScanCode">
		/// <para>Type: <b>UINT</b> The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toasciiex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpKeyState">
		/// <para>Type: <b>const BYTE*</b> A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed). The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCOLL LOCK keys is ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toasciiex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpChar">
		/// <para>Type: <b>LPWORD</b> A pointer to the buffer that receives the translated character or characters.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toasciiex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">
		/// <para>Type: <b>UINT</b> This parameter must be 1 if a menu is active, zero otherwise.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toasciiex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwhkl">
		/// <para>Type: <b>HKL</b> Input locale identifier to use to translate the code. This parameter can be any input locale identifier previously returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadkeyboardlayouta">LoadKeyboardLayout</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toasciiex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-toasciiex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int ToAsciiEx(uint uVirtKey, uint uScanCode, [Optional] byte* lpKeyState, ushort* lpChar, uint uFlags, winmdroot.UI.TextServices.HKL dwhkl);

		/// <inheritdoc cref="ToUnicode(uint, uint, byte*, winmdroot.Foundation.PWSTR, int, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int ToUnicode(uint wVirtKey, uint wScanCode, ReadOnlySpan<byte> lpKeyState, winmdroot.Foundation.PWSTR pwszBuff, int cchBuff, uint wFlags)
		{
			fixed (byte* lpKeyStateLocal = lpKeyState)
			{
				if (lpKeyState.Length < 256)throw new ArgumentException();
				int __result = PInvoke.ToUnicode(wVirtKey, wScanCode, lpKeyStateLocal, pwszBuff, cchBuff, wFlags);
				return __result;
			}
		}

		/// <summary>Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.</summary>
		/// <param name="wVirtKey">
		/// <para>Type: <b>UINT</b> The virtual-key code to be translated. See <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual-Key Codes</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicode#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wScanCode">
		/// <para>Type: <b>UINT</b> The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicode#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpKeyState">
		/// <para>Type: <b>const BYTE*</b> A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicode#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pwszBuff">
		/// <para>Type: <b>LPWSTR</b> The buffer that receives the translated Unicode character or characters. However, this buffer may be returned without being null-terminated even though the variable name suggests that it is null-terminated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicode#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchBuff">
		/// <para>Type: <b>int</b> The size, in characters, of the buffer pointed to by the <i>pwszBuff</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicode#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wFlags">
		/// <para>Type: <b>UINT</b> The behavior of the function.</para>
		/// <para>If bit 0 is set, a menu is active.</para>
		/// <para>If bit 2 is set, keyboard state is not changed (Windows 10, version 1607 and newer) All other bits (through 31) are reserved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicode#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> The function returns one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tounicode">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int ToUnicode(uint wVirtKey, uint wScanCode, [Optional] byte* lpKeyState, winmdroot.Foundation.PWSTR pwszBuff, int cchBuff, uint wFlags);

		/// <summary>Maps OEMASCII codes 0 through 0x0FF into the OEM scan codes and shift states. The function provides information that allows a program to send OEM text to another program by simulating keyboard input.</summary>
		/// <param name="wOemChar">
		/// <para>Type: <b>WORD</b> The ASCII value of the OEM character.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemkeyscan#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The low-order word of the return value contains the scan code of the OEM character, and the high-order word contains the shift state, which can be a combination of the following bits. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemkeyscan">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint OemKeyScan(ushort wOemChar);

		/// <summary>Translates a character to the corresponding virtual-key code and shift state for the current keyboard.</summary>
		/// <param name="ch">
		/// <para>Type: <b>TCHAR</b> The character to be translated into a virtual-key code.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-vkkeyscanw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>SHORT</b> If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-vkkeyscanw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "VkKeyScanW", CharSet = CharSet.Unicode)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern short VkKeyScan(char ch);

		/// <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
		/// <param name="ch">
		/// <para>Type: <b>TCHAR</b> The character to be translated into a virtual-key code.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-vkkeyscanexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwhkl">
		/// <para>Type: <b>HKL</b> Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadkeyboardlayouta">LoadKeyboardLayout</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-vkkeyscanexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>SHORT</b> If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-vkkeyscanexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "VkKeyScanExW", CharSet = CharSet.Unicode)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern short VkKeyScanEx(char ch, winmdroot.UI.TextServices.HKL dwhkl);

		/// <summary>Synthesizes a keystroke.</summary>
		/// <param name="bVk">
		/// <para>Type: <b>BYTE</b> A virtual-key code. The code must be a value in the range 1 to 254. For a complete list, see <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-keybd_event#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bScan">
		/// <para>Type: <b>BYTE</b> A hardware scan code for the key.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-keybd_event#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">Type: <b>DWORD</b></param>
		/// <param name="dwExtraInfo">
		/// <para>Type: <b>ULONG_PTR</b> An additional value associated with the key stroke.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-keybd_event#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>An application can simulate a press of the PRINTSCRN key in order to obtain a screen snapshot and save it to the clipboard. To do this, call <b>keybd_event</b> with the <i>bVk</i> parameter set to <b>VK_SNAPSHOT</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-keybd_event#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern void keybd_event(byte bVk, byte bScan, winmdroot.UI.Input.KeyboardAndMouse.KEYBD_EVENT_FLAGS dwFlags, nuint dwExtraInfo);

		/// <summary>The mouse_event function synthesizes mouse motion and button clicks.</summary>
		/// <param name="dwFlags">Type: <b>DWORD</b></param>
		/// <param name="dx">
		/// <para>Type: <b>DWORD</b> The mouse's absolute position along the x-axis or its amount of motion since the last mouse event was generated, depending on the setting of <b>MOUSEEVENTF_ABSOLUTE</b>. Absolute data is specified as the mouse's actual x-coordinate; relative data is specified as the number of mickeys moved. A <i>mickey</i> is the amount that a mouse has to move for it to report that it has moved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mouse_event#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dy">
		/// <para>Type: <b>DWORD</b> The mouse's absolute position along the y-axis or its amount of motion since the last mouse event was generated, depending on the setting of <b>MOUSEEVENTF_ABSOLUTE</b>. Absolute data is specified as the mouse's actual y-coordinate; relative data is specified as the number of mickeys moved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mouse_event#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwData">
		/// <para>Type: <b>DWORD</b> If <i>dwFlags</i> contains <b>MOUSEEVENTF_WHEEL</b>, then <i>dwData</i> specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as <b>WHEEL_DELTA</b>, which is 120. If <i>dwFlags</i> contains <b>MOUSEEVENTF_HWHEEL</b>, then <i>dwData</i> specifies the amount of wheel movement. A positive value indicates that the wheel was tilted to the right; a negative value indicates that the wheel was tilted to the left. If <i>dwFlags</i> contains <b>MOUSEEVENTF_XDOWN</b> or <b>MOUSEEVENTF_XUP</b>, then <i>dwData</i> specifies which X buttons were pressed or released. This value may be any combination of the following flags. If <i>dwFlags</i> is not <b>MOUSEEVENTF_WHEEL</b>, <b>MOUSEEVENTF_XDOWN</b>, or <b>MOUSEEVENTF_XUP</b>, then <i>dwData</i> should be zero. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mouse_event#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwExtraInfo">
		/// <para>Type: <b>ULONG_PTR</b> An additional value associated with the mouse event. An application calls <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessageextrainfo">GetMessageExtraInfo</a> to obtain this extra information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mouse_event#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>If the mouse has moved, indicated by <b>MOUSEEVENTF_MOVE</b> being set, <i>dx</i> and <i>dy</i> hold information about that motion. The information is specified as absolute or relative integer values. If <b>MOUSEEVENTF_ABSOLUTE</b> value is specified, <i>dx</i> and <i>dy</i> contain normalized absolute coordinates between 0 and 65,535. The event procedure maps these coordinates onto the display surface. Coordinate (0,0) maps onto the upper-left corner of the display surface, (65535,65535) maps onto the lower-right corner. If the <b>MOUSEEVENTF_ABSOLUTE</b> value is not specified, <i>dx</i> and <i>dy</i> specify relative motions from when the last mouse event was generated (the last reported position). Positive values mean the mouse moved right (or down); negative values mean the mouse moved left (or up). Relative mouse motion is subject to the settings for mouse speed and acceleration level. An end user sets these values using the Mouse application in Control Panel. An application obtains and sets these values with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfo</a> function. The system applies two tests to the specified relative mouse motion when applying acceleration. If the specified distance along either the x or y axis is greater than the first mouse threshold value, and the mouse acceleration level is not zero, the operating system doubles the distance. If the specified distance along either the x- or y-axis is greater than the second mouse threshold value, and the mouse acceleration level is equal to two, the operating system doubles the distance that resulted from applying the first threshold test. It is thus possible for the operating system to multiply relatively-specified mouse motion along the x- or y-axis by up to four times. Once acceleration has been applied, the system scales the resultant value by the desired mouse speed. Mouse speed can range from 1 (slowest) to 20 (fastest) and represents how much the pointer moves based on the distance the mouse moves. The default value is 10, which results in no additional modification to the mouse motion. The <b>mouse_event</b> function is used to synthesize mouse events by applications that need to do so. It is also used by applications that need to obtain more information from the mouse than its position and button state. For example, if a tablet manufacturer wants to pass pen-based information to its own applications, it can write a DLL that communicates directly to the tablet hardware, obtains the extra information, and saves it in a queue. The DLL then calls <b>mouse_event</b> with the standard button and x/y position data, along with, in the <i>dwExtraInfo</i> parameter, some pointer or index to the queued extra information. When the application needs the extra information, it calls the DLL with the pointer or index stored in <i>dwExtraInfo</i>, and the DLL returns the extra information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mouse_event#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern void mouse_event(winmdroot.UI.Input.KeyboardAndMouse.MOUSE_EVENT_FLAGS dwFlags, int dx, int dy, uint dwData, nuint dwExtraInfo);

		/// <inheritdoc cref="SendInput(uint, winmdroot.UI.Input.KeyboardAndMouse.INPUT*, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint SendInput(Span<winmdroot.UI.Input.KeyboardAndMouse.INPUT> pInputs, int cbSize)
		{
			fixed (winmdroot.UI.Input.KeyboardAndMouse.INPUT* pInputsLocal = pInputs)
			{
				uint __result = PInvoke.SendInput((uint )pInputs.Length, pInputsLocal, cbSize);
				return __result;
			}
		}

		/// <summary>Synthesizes keystrokes, mouse motions, and button clicks.</summary>
		/// <param name="cInputs">
		/// <para>Type: <b>UINT</b> The number of structures in the <i>pInputs</i> array.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pInputs">
		/// <para>Type: <b>LPINPUT</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input">INPUT</a> structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cbSize">
		/// <para>Type: <b>int</b> The size, in bytes, of an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input">INPUT</a> structure. If <i>cbSize</i> is not the size of an <b>INPUT</b> structure, the function fails.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> The function returns the number of events that it successfully inserted into the keyboard or mouse input stream. If the function returns zero, the input was already blocked by another thread. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function fails when it is blocked by UIPI. Note that neither <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> nor the return value will indicate the failure was caused by UIPI blocking.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint SendInput(uint cInputs, winmdroot.UI.Input.KeyboardAndMouse.INPUT* pInputs, int cbSize);

		/// <inheritdoc cref="GetLastInputInfo(winmdroot.UI.Input.KeyboardAndMouse.LASTINPUTINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetLastInputInfo(ref winmdroot.UI.Input.KeyboardAndMouse.LASTINPUTINFO plii)
		{
			fixed (winmdroot.UI.Input.KeyboardAndMouse.LASTINPUTINFO* pliiLocal = &plii)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetLastInputInfo(pliiLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the time of the last input event.</summary>
		/// <param name="plii">
		/// <para>Type: <b>PLASTINPUTINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-lastinputinfo">LASTINPUTINFO</a> structure that receives the time of the last input event.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlastinputinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlastinputinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetLastInputInfo(winmdroot.UI.Input.KeyboardAndMouse.LASTINPUTINFO* plii);

		/// <summary>Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.</summary>
		/// <param name="uCode">
		/// <para>Type: **UINT** The [virtual key code](/windows/desktop/inputdev/virtual-key-codes) or scan code for a key. How this value is interpreted depends on the value of the *uMapType* parameter. **Starting with Windows Vista**, the high byte of the *uCode* value can contain either 0xe0 or 0xe1 to specify the extended scan code.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapvirtualkeyw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uMapType">
		/// <para>Type: **UINT** The translation to be performed. The value of this parameter depends on the value of the *uCode* parameter. | Value | Meaning | |-------|---------| | **MAPVK\_VK\_TO\_VSC**<br>0 | The *uCode* parameter is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the function returns 0. | | **MAPVK\_VSC\_TO\_VK**<br>1 | The *uCode* parameter is a scan code and is translated into a virtual-key code that does not distinguish between left- and right-hand keys. If there is no translation, the function returns 0. | | **MAPVK\_VK\_TO\_CHAR**<br>2 | The *uCode* parameter is a virtual-key code and is translated into an unshifted character value in the low order word of the return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no translation, the function returns 0. | | **MAPVK\_VSC\_TO\_VK\_EX**<br>3 | The *uCode* parameter is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand keys. If there is no translation, the function returns 0. | | **MAPVK\_VK\_TO\_VSC\_EX**<br>4 | **Windows Vista and later:** The *uCode* parameter is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If the scan code is an extended scan code, the high byte of the *uCode* value can contain either 0xe0 or 0xe1 to specify the extended scan code. If there is no translation, the function returns 0. |</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapvirtualkeyw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: **UINT** The return value is either a scan code, a virtual-key code, or a character value, depending on the value of *uCode* and *uMapType*. If there is no translation, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapvirtualkeyw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "MapVirtualKeyW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint MapVirtualKey(uint uCode, uint uMapType);

		/// <summary>Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input language and an input locale identifier.</summary>
		/// <param name="uCode">
		/// <para>Type: **UINT** The [virtual key code](/windows/desktop/inputdev/virtual-key-codes) or scan code for a key. How this value is interpreted depends on the value of the *uMapType* parameter. **Starting with Windows Vista**, the high byte of the *uCode* value can contain either 0xe0 or 0xe1 to specify the extended scan code.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapvirtualkeyexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uMapType">
		/// <para>Type: **UINT** The translation to perform. The value of this parameter depends on the value of the <i>uCode</i> parameter. | Value | Meaning | |-------|---------| | **MAPVK\_VK\_TO\_VSC**<br>0 | The *uCode* parameter is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the function returns 0. | | **MAPVK\_VSC\_TO\_VK**<br>1 | The *uCode* parameter is a scan code and is translated into a virtual-key code that does not distinguish between left- and right-hand keys. If there is no translation, the function returns 0. | | **MAPVK\_VK\_TO\_CHAR**<br>2 | The *uCode* parameter is a virtual-key code and is translated into an unshifted character value in the low order word of the return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no translation, the function returns 0. | | **MAPVK\_VSC\_TO\_VK\_EX**<br>3 | The *uCode* parameter is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand keys. If there is no translation, the function returns 0. | | **MAPVK\_VK\_TO\_VSC\_EX**<br>4 | **Windows Vista and later:** The *uCode* parameter is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If the scan code is an extended scan code, the high byte of the *uCode* value can contain either 0xe0 or 0xe1 to specify the extended scan code. If there is no translation, the function returns 0. |</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapvirtualkeyexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwhkl">
		/// <para>Type: **HKL** Input locale identifier to use for translating the specified code. This parameter can be any input locale identifier previously returned by the [LoadKeyboardLayout](nf-winuser-loadkeyboardlayoutw.md) function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapvirtualkeyexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: **UINT** The return value is either a scan code, a virtual-key code, or a character value, depending on the value of *uCode* and *uMapType*. If there is no translation, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapvirtualkeyexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "MapVirtualKeyExW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint MapVirtualKeyEx(uint uCode, uint uMapType, winmdroot.UI.TextServices.HKL dwhkl);

		/// <summary>Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the capture window associated with the current thread. If no window in the thread has captured the mouse, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcapture">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetCapture();

		/// <summary>Sets the mouse capture to the specified window belonging to the current thread.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window in the current thread that is to capture the mouse.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcapture#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the window that had previously captured the mouse. If there is no such window, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcapture">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND SetCapture(winmdroot.Foundation.HWND hWnd);

		/// <summary>Releases the mouse capture from a window in the current thread and restores normal mouse input processing.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-releasecapture">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ReleaseCapture();

		/// <summary>Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be enabled or disabled.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bEnable">
		/// <para>Type: <b>BOOL</b> Indicates whether to enable or disable the window. If this parameter is <b>TRUE</b>, the window is enabled. If the parameter is <b>FALSE</b>, the window is disabled.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window was previously disabled, the return value is nonzero. If the window was not previously disabled, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablewindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnableWindow(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.BOOL bEnable);

		/// <summary>Determines whether the specified window is enabled for mouse and keyboard input.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindowenabled#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window is enabled, the return value is nonzero. If the window is not enabled, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindowenabled">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsWindowEnabled(winmdroot.Foundation.HWND hWnd);

		/// <summary>Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window receiving mouse input.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dragdetect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pt">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> Initial position of the mouse, in screen coordinates. The function determines the coordinates of the drag rectangle by using this point.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dragdetect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the user moved the mouse outside of the drag rectangle while holding down the left button, the return value is nonzero. If the user did not move the mouse outside of the drag rectangle while holding down the left button, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dragdetect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DragDetect(winmdroot.Foundation.HWND hwnd, global::System.Drawing.Point pt);

		/// <summary>Activates a window. The window must be attached to the calling thread's message queue.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the top-level window to be activated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setactivewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the handle to the window that was previously active. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setactivewindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND SetActiveWindow(winmdroot.Foundation.HWND hWnd);

		/// <summary>Blocks keyboard and mouse input events from reaching applications.</summary>
		/// <param name="fBlockIt">
		/// <para>Type: <b>BOOL</b> The function's purpose. If this parameter is <b>TRUE</b>, keyboard and mouse input events are blocked. If this parameter is <b>FALSE</b>, keyboard and mouse events are unblocked. Note that only the thread that blocked input can successfully unblock input.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-blockinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If input is already blocked, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-blockinput">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL BlockInput(winmdroot.Foundation.BOOL fBlockIt);

		/// <summary>Gets pointer data before it has gone through touch prediction processing.</summary>
		/// <returns>The screen location of the pointer input.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getunpredictedmessagepos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern uint GetUnpredictedMessagePos();

		/// <summary>Configures the touch injection context for the calling application and initializes the maximum number of simultaneous contacts that the app can inject.</summary>
		/// <param name="maxCount">
		/// <para>The maximum number of touch contacts. The <i>maxCount</i> parameter must be greater than 0 and less than or equal to MAX_TOUCH_COUNT (256) as  defined in winuser.h.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-initializetouchinjection#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwMode">
		/// <para>The contact visualization mode. The <i>dwMode</i> parameter must be   <a href="https://docs.microsoft.com/previous-versions/windows/desktop/input_touchinjection/constants">TOUCH_FEEDBACK_DEFAULT</a>, <b>TOUCH_FEEDBACK_INDIRECT</b>, or <b>TOUCH_FEEDBACK_NONE</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-initializetouchinjection#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-initializetouchinjection">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL InitializeTouchInjection(uint maxCount, winmdroot.UI.Input.Pointer.TOUCH_FEEDBACK_MODE dwMode);

		/// <inheritdoc cref="InjectTouchInput(uint, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL InjectTouchInput(ReadOnlySpan<winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO> contacts)
		{
			fixed (winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* contactsLocal = contacts)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.InjectTouchInput((uint )contacts.Length, contactsLocal);
				return __result;
			}
		}

		/// <summary>Simulates touch input.</summary>
		/// <param name="count">
		/// <para>The size of the array in <i>contacts</i>. The maximum value for <i>count</i> is specified by the <i>maxCount</i> parameter of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-initializetouchinjection">InitializeTouchInjection</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-injecttouchinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="contacts">Array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_touch_info">POINTER_TOUCH_INFO</a> structures that represents all contacts on the desktop. The  screen coordinates of each contact must be within the bounds of the desktop.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-injecttouchinput">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL InjectTouchInput(uint count, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* contacts);

		/// <inheritdoc cref="GetPointerType(uint, winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerType(uint pointerId, out winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE pointerType)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE* pointerTypeLocal = &pointerType)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerType(pointerId, pointerTypeLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the pointer type for a specified pointer.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve pointer type.</param>
		/// <param name="pointerType">An address of a <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">POINTER_INPUT_TYPE</a> type to receive a pointer input type.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointertype">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerType(uint pointerId, winmdroot.UI.WindowsAndMessaging.POINTER_INPUT_TYPE* pointerType);

		/// <inheritdoc cref="GetPointerCursorId(uint, uint*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerCursorId(uint pointerId, out uint cursorId)
		{
			fixed (uint* cursorIdLocal = &cursorId)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerCursorId(pointerId, cursorIdLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the cursor identifier associated with the specified pointer.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve the cursor identifier.</param>
		/// <param name="cursorId">An address of a <b>UINT32</b> to receive the tablet cursor identifier, if any, associated with the specified pointer.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointercursorid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerCursorId(uint pointerId, uint* cursorId);

		/// <inheritdoc cref="GetPointerInfo(uint, winmdroot.UI.Input.Pointer.POINTER_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerInfo(uint pointerId, out winmdroot.UI.Input.Pointer.POINTER_INFO pointerInfo)
		{
			fixed (winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfoLocal = &pointerInfo)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerInfo(pointerId, pointerInfoLocal);
				return __result;
			}
		}

		/// <summary>Gets the information for the specified pointer associated with the current message.</summary>
		/// <param name="pointerId">The pointer identifier.</param>
		/// <param name="pointerInfo">Address of a  <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structure that receives the pointer information.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerInfo(uint pointerId, winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfo);

		/// <inheritdoc cref="GetPointerInfoHistory(uint, uint*, winmdroot.UI.Input.Pointer.POINTER_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerInfoHistory(uint pointerId, ref uint entriesCount, winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfo)
		{
			fixed (uint* entriesCountLocal = &entriesCount)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerInfoHistory(pointerId, entriesCountLocal, pointerInfo);
				return __result;
			}
		}

		/// <summary>Gets the information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
		/// <param name="entriesCount">A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If <b>GetPointerInfoHistory</b> succceeds, <i>entriesCount</i>  is updated with the total count of structures available. The total count of structures available is the same as the <b>historyCount</b> field of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structure returned by a call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerinfo">GetPointerInfo</a>.</param>
		/// <param name="pointerInfo">Address of an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> is zero.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerinfohistory">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerInfoHistory(uint pointerId, uint* entriesCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfo);

		/// <inheritdoc cref="GetPointerFrameInfo(uint, uint*, winmdroot.UI.Input.Pointer.POINTER_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerFrameInfo(uint pointerId, ref uint pointerCount, winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfo)
		{
			fixed (uint* pointerCountLocal = &pointerCount)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerFrameInfo(pointerId, pointerCountLocal, pointerInfo);
				return __result;
			}
		}

		/// <summary>Gets the entire frame of information for the specified pointers associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
		/// <param name="pointerCount">A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If <b>GetPointerFrameInfo</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in the frame.</param>
		/// <param name="pointerInfo">Address of an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structures to receive the pointer information. This parameter can be <b>NULL</b> if <i>*pointerCount</i> is zero.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframeinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerFrameInfo(uint pointerId, uint* pointerCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfo);

		/// <inheritdoc cref="GetPointerFrameInfoHistory(uint, uint*, uint*, winmdroot.UI.Input.Pointer.POINTER_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerFrameInfoHistory(uint pointerId, ref uint entriesCount, ref uint pointerCount, winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfo)
		{
			fixed (uint* pointerCountLocal = &pointerCount)
			{
				fixed (uint* entriesCountLocal = &entriesCount)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.GetPointerFrameInfoHistory(pointerId, entriesCountLocal, pointerCountLocal, pointerInfo);
					return __result;
				}
			}
		}

		/// <summary>Gets the entire frame of information (including coalesced input frames) for the specified pointers associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
		/// <param name="entriesCount">A pointer to a variable that specifies the count of rows in the two-dimensional array to which pointerInfo points. If <b>GetPointerFrameInfoHistory</b> succeeds, <i>entriesCount</i> is updated with the total count of frames available in the history.</param>
		/// <param name="pointerCount">A pointer to a variable that specifies the count of columns in the two-dimensional array to which pointerInfo points. If <b>GetPointerFrameInfoHistory</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in each frame.</param>
		/// <param name="pointerInfo">
		/// <para>Address of a two-dimensional array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> and <i>*pointerCount</i> are both zero. This array is interpreted as <c>POINTER_INFO[*entriesCount][*pointerCount]</c>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframeinfohistory#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframeinfohistory">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerFrameInfoHistory(uint pointerId, uint* entriesCount, uint* pointerCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_INFO* pointerInfo);

		/// <inheritdoc cref="GetPointerTouchInfo(uint, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerTouchInfo(uint pointerId, out winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO touchInfo)
		{
			fixed (winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfoLocal = &touchInfo)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerTouchInfo(pointerId, touchInfoLocal);
				return __result;
			}
		}

		/// <summary>Gets the touch-based information for the specified pointer (of type PT_TOUCH) associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
		/// <param name="touchInfo">Address of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_touch_info">POINTER_TOUCH_INFO</a> structure to receive the touch-specific pointer information.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointertouchinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerTouchInfo(uint pointerId, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfo);

		/// <inheritdoc cref="GetPointerTouchInfoHistory(uint, uint*, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerTouchInfoHistory(uint pointerId, ref uint entriesCount, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfo)
		{
			fixed (uint* entriesCountLocal = &entriesCount)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerTouchInfoHistory(pointerId, entriesCountLocal, touchInfo);
				return __result;
			}
		}

		/// <summary>Gets the touch-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type PT_TOUCH).</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
		/// <param name="entriesCount">A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If <b>GetPointerTouchInfoHistory</b> succeeds, <i>entriesCount</i> is updated with the total count of structures available. The total count of structures available is the same as the <i>historyCount</i> field in the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structure returned by a call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerinfo">GetPointerInfo</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointertouchinfo">GetPointerTouchInfo</a>.</param>
		/// <param name="touchInfo">Address of an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_touch_info">POINTER_TOUCH_INFO</a> structures to receive the pointer information. This parameter can be NULL if *entriesCount is zero.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointertouchinfohistory">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerTouchInfoHistory(uint pointerId, uint* entriesCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfo);

		/// <inheritdoc cref="GetPointerFrameTouchInfo(uint, uint*, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerFrameTouchInfo(uint pointerId, ref uint pointerCount, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfo)
		{
			fixed (uint* pointerCountLocal = &pointerCount)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerFrameTouchInfo(pointerId, pointerCountLocal, touchInfo);
				return __result;
			}
		}

		/// <summary>Gets the entire frame of touch-based information for the specified pointers (of type PT_TOUCH) associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
		/// <param name="pointerCount">A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If <b>GetPointerFrameTouchInfo</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in the frame.</param>
		/// <param name="touchInfo">Address of an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_touch_info">POINTER_TOUCH_INFO</a> structures to receive the pointer information. This parameter can be NULL if <i>*pointerCount</i> is zero.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframetouchinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerFrameTouchInfo(uint pointerId, uint* pointerCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfo);

		/// <inheritdoc cref="GetPointerFrameTouchInfoHistory(uint, uint*, uint*, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerFrameTouchInfoHistory(uint pointerId, ref uint entriesCount, ref uint pointerCount, winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfo)
		{
			fixed (uint* pointerCountLocal = &pointerCount)
			{
				fixed (uint* entriesCountLocal = &entriesCount)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.GetPointerFrameTouchInfoHistory(pointerId, entriesCountLocal, pointerCountLocal, touchInfo);
					return __result;
				}
			}
		}

		/// <summary>Gets the entire frame of touch-based information (including coalesced input frames) for the specified pointers (of type PT_TOUCH) associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
		/// <param name="entriesCount">A pointer to variable that specifies the count of rows in the two-dimensional array to which touchInfo points. If <b>GetPointerFrameTouchInfoHistory</b> succeeds,  <i>entriesCount</i> is updated with the total count of frames available in the history.</param>
		/// <param name="pointerCount">A pointer to a variable that specifies the count of columns in the two-dimensional array to which touchInfo points. If <b>GetPointerFrameTouchInfoHistory</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in each frame.</param>
		/// <param name="touchInfo">
		/// <para>Address of a two-dimensional array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_touch_info">POINTER_TOUCH_INFO</a> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> and <i>*pointerCount</i> are both zero. This array is interpreted as <c>POINTER_TOUCH_INFO[*entriesCount][*pointerCount]</c>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframetouchinfohistory#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframetouchinfohistory">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerFrameTouchInfoHistory(uint pointerId, uint* entriesCount, uint* pointerCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_TOUCH_INFO* touchInfo);

		/// <inheritdoc cref="GetPointerPenInfo(uint, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerPenInfo(uint pointerId, out winmdroot.UI.Input.Pointer.POINTER_PEN_INFO penInfo)
		{
			fixed (winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfoLocal = &penInfo)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerPenInfo(pointerId, penInfoLocal);
				return __result;
			}
		}

		/// <summary>Gets the pen-based information for the specified pointer (of type PT_PEN) associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
		/// <param name="penInfo">Address of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_pen_info">POINTER_PEN_INFO</a> structure to receive the pen-specific pointer information.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerpeninfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerPenInfo(uint pointerId, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfo);

		/// <inheritdoc cref="GetPointerPenInfoHistory(uint, uint*, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerPenInfoHistory(uint pointerId, ref uint entriesCount, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfo)
		{
			fixed (uint* entriesCountLocal = &entriesCount)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerPenInfoHistory(pointerId, entriesCountLocal, penInfo);
				return __result;
			}
		}

		/// <summary>Gets the pen-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type PT_PEN).</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
		/// <param name="entriesCount">
		/// <para>A pointer to a variable that specifies the count of structures in the buffer to which <i>penInfo</i> points. If <b>GetPointerPenInfoHistory</b> succeeds, <i>entriesCount</i> is updated with the total count of structures available. The total count of structures available is the same as the <i>historyCount</i> field in the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_pen_info">POINTER_PEN_INFO</a> structure returned by a call to  <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerpeninfo">GetPointerPenInfo</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerpeninfohistory#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="penInfo">
		/// <para>Address of an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_pen_info">POINTER_PEN_INFO</a> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> is zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerpeninfohistory#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerpeninfohistory">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerPenInfoHistory(uint pointerId, uint* entriesCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfo);

		/// <inheritdoc cref="GetPointerFramePenInfo(uint, uint*, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerFramePenInfo(uint pointerId, ref uint pointerCount, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfo)
		{
			fixed (uint* pointerCountLocal = &pointerCount)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerFramePenInfo(pointerId, pointerCountLocal, penInfo);
				return __result;
			}
		}

		/// <summary>Gets the entire frame of pen-based information for the specified pointers (of type PT_PEN) associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
		/// <param name="pointerCount">A pointer to a variable that specifies the count of structures in the buffer to which penInfo points. If <b>GetPointerFramePenInfo</b> succeeds, <i>pointerCount</i>  is updated with the total count of pointers in the frame.</param>
		/// <param name="penInfo">Address of an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_pen_info">POINTER_PEN_INFO</a> structures to receive the pointer information. This parameter can be NULL if <i>*pointerCount</i> is zero.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframepeninfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerFramePenInfo(uint pointerId, uint* pointerCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfo);

		/// <inheritdoc cref="GetPointerFramePenInfoHistory(uint, uint*, uint*, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerFramePenInfoHistory(uint pointerId, ref uint entriesCount, ref uint pointerCount, winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfo)
		{
			fixed (uint* pointerCountLocal = &pointerCount)
			{
				fixed (uint* entriesCountLocal = &entriesCount)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.GetPointerFramePenInfoHistory(pointerId, entriesCountLocal, pointerCountLocal, penInfo);
					return __result;
				}
			}
		}

		/// <summary>Gets the entire frame of pen-based information (including coalesced input frames) for the specified pointers (of type PT_PEN) associated with the current message.</summary>
		/// <param name="pointerId">The identifier of the pointer for which to retrieve frame information.</param>
		/// <param name="entriesCount">A pointer to a variable that specifies the count of rows in the two-dimensional array to which penInfo points. If <b>GetPointerFramePenInfoHistory</b> succeeds,  <i>entriesCount</i> is updated with the total count of frames available in the history.</param>
		/// <param name="pointerCount">A pointer to a variaable that specifies the count of columns in the two-dimensional array to which penInfo points. If <b>GetPointerFramePenInfoHistory</b> succeeds, <i>pointerCount</i> is updated with  the total count of pointers in each frame.</param>
		/// <param name="penInfo">
		/// <para>Address of a two-dimensional array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_pen_info">POINTER_PEN_INFO</a> structures to receive the pointer information. This parameter can be NULL if *entriesCount and *pointerCount are both zero.</para>
		/// <para>This array is interpreted as POINTER_PEN_INFO[*entriesCount][*pointerCount].</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframepeninfohistory#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerframepeninfohistory">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerFramePenInfoHistory(uint pointerId, uint* entriesCount, uint* pointerCount, [Optional] winmdroot.UI.Input.Pointer.POINTER_PEN_INFO* penInfo);

		/// <summary>Determines which pointer input frame generated the most recently retrieved message for the specified pointer and discards any queued (unretrieved) pointer input messages generated from the same pointer input frame.</summary>
		/// <param name="pointerId">Identifier of the pointer. Pending messages will be skipped for the frame that includes the most recently retrieved input for this pointer.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-skippointerframemessages">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL SkipPointerFrameMessages(uint pointerId);

		/// <inheritdoc cref="InjectSyntheticPointerInput(winmdroot.UI.Controls.HSYNTHETICPOINTERDEVICE, winmdroot.UI.Controls.POINTER_TYPE_INFO*, uint)"/>
		[SupportedOSPlatform("windows10.0.17763")]
		internal static unsafe winmdroot.Foundation.BOOL InjectSyntheticPointerInput(winmdroot.UI.Controls.HSYNTHETICPOINTERDEVICE device, ReadOnlySpan<winmdroot.UI.Controls.POINTER_TYPE_INFO> pointerInfo)
		{
			fixed (winmdroot.UI.Controls.POINTER_TYPE_INFO* pointerInfoLocal = pointerInfo)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.InjectSyntheticPointerInput(device, pointerInfoLocal, (uint )pointerInfo.Length);
				return __result;
			}
		}

		/// <summary>Simulates pointer input (pen or touch).</summary>
		/// <param name="device">A handle to the pointer injection device created by <a href="../winuser/nf-winuser-createsyntheticpointerdevice.md">CreateSyntheticPointerDevice</a>.</param>
		/// <param name="pointerInfo">
		/// <para>Array of injected pointers. The type must match the <i>pointerType</i> parameter of the <a href="../winuser/nf-winuser-createsyntheticpointerdevice.md">CreateSyntheticPointerDevice</a> call that created the injection device.</para>
		/// <para>The ptPixelLocation for each POINTER_TYPE_INFO is specified relative to top left of the virtual screen:</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-injectsyntheticpointerinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="count">
		/// <para>The number of contacts.</para>
		/// <para>For <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">PT_TOUCH</a> this value must be greater than 0 and less than or equal to <a href="https://docs.microsoft.com/previous-versions/windows/desktop/input_touchinjection/constants">MAX_TOUCH_COUNT</a>. For <a href="https://docs.microsoft.com/windows/win32/api/winuser/ne-winuser-tagpointer_input_type">PT_PEN</a> this value must be 1.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-injectsyntheticpointerinput#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-injectsyntheticpointerinput">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows10.0.17763")]
		internal static extern unsafe winmdroot.Foundation.BOOL InjectSyntheticPointerInput(winmdroot.UI.Controls.HSYNTHETICPOINTERDEVICE device, winmdroot.UI.Controls.POINTER_TYPE_INFO* pointerInfo, uint count);

		/// <summary>Enables the mouse to act as a pointer input device and send WM_POINTER messages.</summary>
		/// <param name="fEnable"><b>TRUE</b> to turn on mouse input support in <a href="https://docs.microsoft.com/previous-versions/windows/desktop/inputmsg/messages">WM_POINTER</a>.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablemouseinpointer">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL EnableMouseInPointer(winmdroot.Foundation.BOOL fEnable);

		/// <summary>Indicates whether EnableMouseInPointer is set for the mouse to act as a pointer input device and send WM_POINTER messages.</summary>
		/// <returns>
		/// <para>If <a href="/windows/desktop/api/winuser/nf-winuser-enablemouseinpointer">EnableMouseInPointer</a> is set, the return value is nonzero. If <a href="/windows/desktop/api/winuser/nf-winuser-enablemouseinpointer">EnableMouseInPointer</a> is not set, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ismouseinpointerenabled">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern winmdroot.Foundation.BOOL IsMouseInPointerEnabled();

		/// <inheritdoc cref="GetPointerInputTransform(uint, uint, winmdroot.UI.Input.Pointer.INPUT_TRANSFORM*)"/>
		[SupportedOSPlatform("windows8.1")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerInputTransform(uint pointerId, Span<winmdroot.UI.Input.Pointer.INPUT_TRANSFORM> inputTransform)
		{
			fixed (winmdroot.UI.Input.Pointer.INPUT_TRANSFORM* inputTransformLocal = inputTransform)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerInputTransform(pointerId, (uint )inputTransform.Length, inputTransformLocal);
				return __result;
			}
		}

		/// <summary>Gets one or more transforms for the pointer information coordinates associated with the current message.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
		/// <param name="historyCount">
		/// <para>The number of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input_transform">INPUT_TRANSFORM</a> structures that <i>inputTransform</i> can point to. This value must be no less than 1 and no greater than the value specified in <b>historyCount</b> of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structure returned by <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerinfo">GetPointerInfo</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointertouchinfo">GetPointerTouchInfo</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerpeninfo">GetPointerPenInfo</a> (for a single input transform) or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerinfohistory">GetPointerInfoHistory</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointertouchinfohistory">GetPointerTouchInfoHistory</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerpeninfohistory">GetPointerPenInfoHistory</a> (for an array of input transforms). If <b>GetPointerInputTransform</b> succeeds, <i>inputTransform</i>  is updated with the total count of structures available. The total count of structures available is the same as the <b>historyCount</b> field of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_info">POINTER_INFO</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerinputtransform#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="inputTransform">Address of an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input_transform">INPUT_TRANSFORM</a> structures to receive the transform information. This parameter cannot be NULL.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerinputtransform">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerInputTransform(uint pointerId, uint historyCount, winmdroot.UI.Input.Pointer.INPUT_TRANSFORM* inputTransform);

		/// <inheritdoc cref="GetPointerDevices(uint*, winmdroot.UI.Controls.POINTER_DEVICE_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerDevices(ref uint deviceCount, winmdroot.UI.Controls.POINTER_DEVICE_INFO* pointerDevices)
		{
			fixed (uint* deviceCountLocal = &deviceCount)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPointerDevices(deviceCountLocal, pointerDevices);
				return __result;
			}
		}

		/// <summary>Gets information about the pointer devices attached to the system.</summary>
		/// <param name="deviceCount">If <i>pointerDevices</i> is NULL, <i>deviceCount</i> returns the total number of attached pointer devices. Otherwise, <i>deviceCount</i> specifies the number of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_device_info">POINTER_DEVICE_INFO</a> structures pointed to by <i>pointerDevices</i>.</param>
		/// <param name="pointerDevices">Array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_device_info">POINTER_DEVICE_INFO</a> structures for the pointer devices attached to the system. If NULL, the total number of attached pointer devices is returned in <i>deviceCount</i>.</param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerdevices">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerDevices(uint* deviceCount, [Optional] winmdroot.UI.Controls.POINTER_DEVICE_INFO* pointerDevices);

		/// <inheritdoc cref="GetPointerDevice(winmdroot.Foundation.HANDLE, winmdroot.UI.Controls.POINTER_DEVICE_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerDevice(SafeHandle device, out winmdroot.UI.Controls.POINTER_DEVICE_INFO pointerDevice)
		{
			bool deviceAddRef = false;
			try
			{
				fixed (winmdroot.UI.Controls.POINTER_DEVICE_INFO* pointerDeviceLocal = &pointerDevice)
				{
					winmdroot.Foundation.HANDLE deviceLocal;
					if (device is object)
					{
						device.DangerousAddRef(ref deviceAddRef);
						deviceLocal = (winmdroot.Foundation.HANDLE)device.DangerousGetHandle();
					}
					else
						deviceLocal = default(winmdroot.Foundation.HANDLE);
					winmdroot.Foundation.BOOL __result = PInvoke.GetPointerDevice(deviceLocal, pointerDeviceLocal);
					return __result;
				}
			}
			finally
			{
				if (deviceAddRef)
					device.DangerousRelease();
			}
		}

		/// <summary>Gets information about the pointer device.</summary>
		/// <param name="device">The handle to the device.</param>
		/// <param name="pointerDevice">A <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_device_info">POINTER_DEVICE_INFO</a> structure that contains information about the pointer device.</param>
		/// <returns>
		/// <para>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerdevice">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerDevice(winmdroot.Foundation.HANDLE device, winmdroot.UI.Controls.POINTER_DEVICE_INFO* pointerDevice);

		/// <inheritdoc cref="GetPointerDeviceProperties(winmdroot.Foundation.HANDLE, uint*, winmdroot.UI.Controls.POINTER_DEVICE_PROPERTY*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerDeviceProperties(SafeHandle device, ref uint propertyCount, winmdroot.UI.Controls.POINTER_DEVICE_PROPERTY* pointerProperties)
		{
			bool deviceAddRef = false;
			try
			{
				fixed (uint* propertyCountLocal = &propertyCount)
				{
					winmdroot.Foundation.HANDLE deviceLocal;
					if (device is object)
					{
						device.DangerousAddRef(ref deviceAddRef);
						deviceLocal = (winmdroot.Foundation.HANDLE)device.DangerousGetHandle();
					}
					else
						deviceLocal = default(winmdroot.Foundation.HANDLE);
					winmdroot.Foundation.BOOL __result = PInvoke.GetPointerDeviceProperties(deviceLocal, propertyCountLocal, pointerProperties);
					return __result;
				}
			}
			finally
			{
				if (deviceAddRef)
					device.DangerousRelease();
			}
		}

		/// <summary>Gets device properties that aren't included in the POINTER_DEVICE_INFO structure.</summary>
		/// <param name="device">
		/// <para>The pointer device to query properties from. A call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getpointerdevices">GetPointerDevices</a> function returns this handle in the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_device_info">POINTER_DEVICE_INFO</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerdeviceproperties#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="propertyCount">
		/// <para>The number  of properties. Returns the count that's written or needed if <i>pointerProperties</i> is NULL. If this value is less than the number of properties that the pointer device supports and <i>pointerProperties</i> is not NULL, the function returns the actual number of properties in this variable and fails.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerdeviceproperties#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pointerProperties">The array of properties.</param>
		/// <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function for more information.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerdeviceproperties">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerDeviceProperties(winmdroot.Foundation.HANDLE device, uint* propertyCount, [Optional] winmdroot.UI.Controls.POINTER_DEVICE_PROPERTY* pointerProperties);

		/// <inheritdoc cref="GetPointerDeviceRects(winmdroot.Foundation.HANDLE, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerDeviceRects(SafeHandle device, out winmdroot.Foundation.RECT pointerDeviceRect, out winmdroot.Foundation.RECT displayRect)
		{
			bool deviceAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* displayRectLocal = &displayRect)
				{
					fixed (winmdroot.Foundation.RECT* pointerDeviceRectLocal = &pointerDeviceRect)
					{
						winmdroot.Foundation.HANDLE deviceLocal;
						if (device is object)
						{
							device.DangerousAddRef(ref deviceAddRef);
							deviceLocal = (winmdroot.Foundation.HANDLE)device.DangerousGetHandle();
						}
						else
							deviceLocal = default(winmdroot.Foundation.HANDLE);
						winmdroot.Foundation.BOOL __result = PInvoke.GetPointerDeviceRects(deviceLocal, pointerDeviceRectLocal, displayRectLocal);
						return __result;
					}
				}
			}
			finally
			{
				if (deviceAddRef)
					device.DangerousRelease();
			}
		}

		/// <summary>Gets the x and y range for the pointer device (in himetric) and the x and y range (current resolution) for the display that the pointer device is mapped to.</summary>
		/// <param name="device">The handle to the pointer device.</param>
		/// <param name="pointerDeviceRect">The structure for retrieving the device's physical range data.</param>
		/// <param name="displayRect">The structure for retrieving the display resolution.</param>
		/// <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function for more information.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerdevicerects">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerDeviceRects(winmdroot.Foundation.HANDLE device, winmdroot.Foundation.RECT* pointerDeviceRect, winmdroot.Foundation.RECT* displayRect);

		/// <inheritdoc cref="GetPointerDeviceCursors(winmdroot.Foundation.HANDLE, uint*, winmdroot.UI.Controls.POINTER_DEVICE_CURSOR_INFO*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetPointerDeviceCursors(SafeHandle device, ref uint cursorCount, winmdroot.UI.Controls.POINTER_DEVICE_CURSOR_INFO* deviceCursors)
		{
			bool deviceAddRef = false;
			try
			{
				fixed (uint* cursorCountLocal = &cursorCount)
				{
					winmdroot.Foundation.HANDLE deviceLocal;
					if (device is object)
					{
						device.DangerousAddRef(ref deviceAddRef);
						deviceLocal = (winmdroot.Foundation.HANDLE)device.DangerousGetHandle();
					}
					else
						deviceLocal = default(winmdroot.Foundation.HANDLE);
					winmdroot.Foundation.BOOL __result = PInvoke.GetPointerDeviceCursors(deviceLocal, cursorCountLocal, deviceCursors);
					return __result;
				}
			}
			finally
			{
				if (deviceAddRef)
					device.DangerousRelease();
			}
		}

		/// <summary>Gets the cursor IDs that are mapped to the cursors associated with a pointer device.</summary>
		/// <param name="device">The device handle.</param>
		/// <param name="cursorCount">The number of cursors associated with the pointer device.</param>
		/// <param name="deviceCursors">An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_device_cursor_info">POINTER_DEVICE_CURSOR_INFO</a> structures that contain info about the cursors. If NULL, <i>cursorCount</i> returns the number of cursors associated with the pointer device.</param>
		/// <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function for more information.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpointerdevicecursors">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPointerDeviceCursors(winmdroot.Foundation.HANDLE device, uint* cursorCount, [Optional] winmdroot.UI.Controls.POINTER_DEVICE_CURSOR_INFO* deviceCursors);

		/// <inheritdoc cref="GetRawPointerDeviceData(uint, uint, uint, winmdroot.UI.Controls.POINTER_DEVICE_PROPERTY*, int*)"/>
		[SupportedOSPlatform("windows8.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetRawPointerDeviceData(uint pointerId, uint historyCount, Span<winmdroot.UI.Controls.POINTER_DEVICE_PROPERTY> pProperties, out int pValues)
		{
			fixed (int* pValuesLocal = &pValues)
			{
				fixed (winmdroot.UI.Controls.POINTER_DEVICE_PROPERTY* pPropertiesLocal = pProperties)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.GetRawPointerDeviceData(pointerId, historyCount, (uint )pProperties.Length, pPropertiesLocal, pValuesLocal);
					return __result;
				}
			}
		}

		/// <summary>Gets the raw input data from the pointer device.</summary>
		/// <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
		/// <param name="historyCount">The pointer history.</param>
		/// <param name="propertiesCount">Number of properties to retrieve.</param>
		/// <param name="pProperties">Array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-pointer_device_property">POINTER_DEVICE_PROPERTY</a> structures that contain raw data reported by the device.</param>
		/// <param name="pValues">The values for <i>pProperties</i>.</param>
		/// <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function for more information.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getrawpointerdevicedata">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetRawPointerDeviceData(uint pointerId, uint historyCount, uint propertiesCount, winmdroot.UI.Controls.POINTER_DEVICE_PROPERTY* pProperties, int* pValues);

		/// <inheritdoc cref="GetTouchInputInfo(winmdroot.UI.Input.Touch.HTOUCHINPUT, uint, winmdroot.UI.Input.Touch.TOUCHINPUT*, int)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe winmdroot.Foundation.BOOL GetTouchInputInfo(winmdroot.UI.Input.Touch.HTOUCHINPUT hTouchInput, Span<winmdroot.UI.Input.Touch.TOUCHINPUT> pInputs, int cbSize)
		{
			fixed (winmdroot.UI.Input.Touch.TOUCHINPUT* pInputsLocal = pInputs)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetTouchInputInfo(hTouchInput, (uint )pInputs.Length, pInputsLocal, cbSize);
				return __result;
			}
		}

		/// <summary>Retrieves detailed information about touch inputs associated with a particular touch input handle.</summary>
		/// <param name="hTouchInput">The touch input handle received in the <b>LPARAM</b> of a touch message. The function fails with <b>ERROR_INVALID_HANDLE</b> if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-closetouchinputhandle">CloseTouchInputHandle</a> or after it has been passed to <a href="https://docs.microsoft.com/windows/desktop/wintouch/sendmessage--postmessage--and-related-functions">DefWindowProc, PostMessage, SendMessage</a> or one of their variants.</param>
		/// <param name="cInputs">The number of structures in the <i>pInputs</i> array. This should ideally be at least equal to the number of touch points associated with the message as indicated in the message <b>WPARAM</b>. If <i>cInputs</i> is less than the number of touch points, the function will still succeed and populate the <i>pInputs</i> buffer with information about <i>cInputs</i> touch points.</param>
		/// <param name="pInputs">A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-touchinput">TOUCHINPUT</a> structures to receive information about the touch points associated with the specified touch input handle.</param>
		/// <param name="cbSize">The size, in bytes, of a single <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-touchinput">TOUCHINPUT</a> structure. If <i>cbSize</i> is not the size of a single <b>TOUCHINPUT</b> structure, the function fails with <b>ERROR_INVALID_PARAMETER</b>.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-gettouchinputinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetTouchInputInfo(winmdroot.UI.Input.Touch.HTOUCHINPUT hTouchInput, uint cInputs, winmdroot.UI.Input.Touch.TOUCHINPUT* pInputs, int cbSize);

		/// <summary>Closes a touch input handle, frees process memory associated with it, and invalidates the handle.</summary>
		/// <param name="hTouchInput">The touch input handle received in the <b>LPARAM</b> of a touch message. The function fails with <b>ERROR_INVALID_HANDLE</b> if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to <b>CloseTouchInputHandle</b> or after it has been passed to <a href="https://docs.microsoft.com/windows/desktop/wintouch/sendmessage--postmessage--and-related-functions">DefWindowProc, PostMessage, SendMessage</a> or one of their variants.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closetouchinputhandle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern winmdroot.Foundation.BOOL CloseTouchInputHandle(winmdroot.UI.Input.Touch.HTOUCHINPUT hTouchInput);

		/// <summary>Registers a window as being touch-capable.</summary>
		/// <param name="hwnd">The handle of the window being registered. The function fails with <b>ERROR_ACCESS_DENIED</b> if the calling thread does not own the specified window.</param>
		/// <param name="ulFlags"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registertouchwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern winmdroot.Foundation.BOOL RegisterTouchWindow(winmdroot.Foundation.HWND hwnd, winmdroot.UI.Input.Touch.REGISTER_TOUCH_WINDOW_FLAGS ulFlags);

		/// <summary>Registers a window as no longer being touch-capable.</summary>
		/// <param name="hwnd">The handle of the window. The function fails with <b>ERROR_ACCESS_DENIED</b> if the calling thread does not own the specified window.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregistertouchwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern winmdroot.Foundation.BOOL UnregisterTouchWindow(winmdroot.Foundation.HWND hwnd);

		/// <summary>Checks whether a specified window is touch-capable and, optionally, retrieves the modifier flags set for the window's touch capability.</summary>
		/// <param name="hwnd">The handle of the window. The function fails with <b>ERROR_ACCESS_DENIED</b> if the calling thread is not on the same desktop as the specified window.</param>
		/// <param name="pulFlags">The address of the <b>ULONG</b> variable to receive the modifier flags for the specified window's touch capability.</param>
		/// <returns>Returns <b>TRUE</b> if the window supports Windows Touch; returns <b>FALSE</b> if the window does not support Windows Touch.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-istouchwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL IsTouchWindow(winmdroot.Foundation.HWND hwnd, [Optional] uint* pulFlags);

		/// <inheritdoc cref="GetGestureInfo(winmdroot.UI.Input.Touch.HGESTUREINFO, winmdroot.UI.Input.Touch.GESTUREINFO*)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe winmdroot.Foundation.BOOL GetGestureInfo(winmdroot.UI.Input.Touch.HGESTUREINFO hGestureInfo, out winmdroot.UI.Input.Touch.GESTUREINFO pGestureInfo)
		{
			fixed (winmdroot.UI.Input.Touch.GESTUREINFO* pGestureInfoLocal = &pGestureInfo)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetGestureInfo(hGestureInfo, pGestureInfoLocal);
				return __result;
			}
		}

		/// <summary>Retrieves a GESTUREINFO structure given a handle to the gesture information.</summary>
		/// <param name="hGestureInfo">The gesture information handle.</param>
		/// <param name="pGestureInfo">A pointer to the gesture information structure.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getgestureinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetGestureInfo(winmdroot.UI.Input.Touch.HGESTUREINFO hGestureInfo, winmdroot.UI.Input.Touch.GESTUREINFO* pGestureInfo);

		/// <inheritdoc cref="GetGestureExtraArgs(winmdroot.UI.Input.Touch.HGESTUREINFO, uint, byte*)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe winmdroot.Foundation.BOOL GetGestureExtraArgs(winmdroot.UI.Input.Touch.HGESTUREINFO hGestureInfo, uint cbExtraArgs, out byte pExtraArgs)
		{
			fixed (byte* pExtraArgsLocal = &pExtraArgs)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetGestureExtraArgs(hGestureInfo, cbExtraArgs, pExtraArgsLocal);
				return __result;
			}
		}

		/// <summary>Retrieves additional information about a gesture from its GESTUREINFO handle.</summary>
		/// <param name="hGestureInfo">The handle to the gesture information that is passed in the <i>lParam</i> of a <a href="https://docs.microsoft.com/windows/desktop/wintouch/wm-gesture">WM_GESTURE</a> message.</param>
		/// <param name="cbExtraArgs">A count of the bytes of data stored in the extra arguments.</param>
		/// <param name="pExtraArgs">A pointer to the extra argument information.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getgestureextraargs">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetGestureExtraArgs(winmdroot.UI.Input.Touch.HGESTUREINFO hGestureInfo, uint cbExtraArgs, byte* pExtraArgs);

		/// <summary>Closes resources associated with a gesture information handle.</summary>
		/// <param name="hGestureInfo">The gesture information handle.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closegestureinfohandle">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern winmdroot.Foundation.BOOL CloseGestureInfoHandle(winmdroot.UI.Input.Touch.HGESTUREINFO hGestureInfo);

		/// <inheritdoc cref="SetGestureConfig(winmdroot.Foundation.HWND, uint, uint, winmdroot.UI.Input.Touch.GESTURECONFIG*, uint)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe winmdroot.Foundation.BOOL SetGestureConfig(winmdroot.Foundation.HWND hwnd, uint dwReserved, Span<winmdroot.UI.Input.Touch.GESTURECONFIG> pGestureConfig, uint cbSize)
		{
			fixed (winmdroot.UI.Input.Touch.GESTURECONFIG* pGestureConfigLocal = pGestureConfig)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.SetGestureConfig(hwnd, dwReserved, (uint )pGestureConfig.Length, pGestureConfigLocal, cbSize);
				return __result;
			}
		}

		/// <summary>Configures the messages that are sent from a window for Windows Touch gestures.</summary>
		/// <param name="hwnd">A handle to the window to set the gesture configuration on.</param>
		/// <param name="dwReserved">This value is reserved and must be set to 0.</param>
		/// <param name="cIDs">A count of the gesture configuration structures that are being passed.</param>
		/// <param name="pGestureConfig">An array of gesture configuration structures that specify the gesture configuration.</param>
		/// <param name="cbSize">The size of the gesture configuration (<a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-gestureconfig">GESTURECONFIG</a>) structure.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setgestureconfig">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetGestureConfig(winmdroot.Foundation.HWND hwnd, uint dwReserved, uint cIDs, winmdroot.UI.Input.Touch.GESTURECONFIG* pGestureConfig, uint cbSize);

		/// <inheritdoc cref="GetGestureConfig(winmdroot.Foundation.HWND, uint, uint, uint*, winmdroot.UI.Input.Touch.GESTURECONFIG*, uint)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe winmdroot.Foundation.BOOL GetGestureConfig(winmdroot.Foundation.HWND hwnd, uint dwReserved, uint dwFlags, in uint pcIDs, winmdroot.UI.Input.Touch.GESTURECONFIG* pGestureConfig, uint cbSize)
		{
			fixed (uint* pcIDsLocal = &pcIDs)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetGestureConfig(hwnd, dwReserved, dwFlags, pcIDsLocal, pGestureConfig, cbSize);
				return __result;
			}
		}

		/// <summary>Retrieves the configuration for which Windows Touch gesture messages are sent from a window.</summary>
		/// <param name="hwnd">A handle to the window to get the gesture configuration from.</param>
		/// <param name="dwReserved">This value is reserved and must be set to 0.</param>
		/// <param name="dwFlags">A gesture command flag value indicating options for retrieving the gesture configuration.  See Remarks for additional information and supported values.</param>
		/// <param name="pcIDs">The size, in number of gesture configuration structures, that is in the <i>pGestureConfig</i> buffer.</param>
		/// <param name="pGestureConfig">An array of gesture configuration structures that specify the gesture configuration.</param>
		/// <param name="cbSize">The size of the gesture configuration (<a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-gestureconfig">GESTURECONFIG</a>) structure.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getgestureconfig">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetGestureConfig(winmdroot.Foundation.HWND hwnd, uint dwReserved, uint dwFlags, uint* pcIDs, winmdroot.UI.Input.Touch.GESTURECONFIG* pGestureConfig, uint cbSize);

		/// <inheritdoc cref="LoadString(winmdroot.Foundation.HINSTANCE, uint, winmdroot.Foundation.PWSTR, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int LoadString(SafeHandle hInstance, uint uID, winmdroot.Foundation.PWSTR lpBuffer, int cchBufferMax)
		{
			bool hInstanceAddRef = false;
			try
			{
				winmdroot.Foundation.HINSTANCE hInstanceLocal;
				if (hInstance is object)
				{
					hInstance.DangerousAddRef(ref hInstanceAddRef);
					hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
				}
				else
					hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
				int __result = PInvoke.LoadString(hInstanceLocal, uID, lpBuffer, cchBufferMax);
				return __result;
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a> function with <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadstringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uID">
		/// <para>Type: <b>UINT</b> The identifier of the string to be loaded.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadstringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpBuffer">
		/// <para>Type: <b>LPTSTR</b> The buffer to receive the string (if *cchBufferMax* is non-zero) or a read-only pointer to the string resource itself (if *cchBufferMax* is zero). Must be of sufficient length to hold a pointer (8 bytes).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadstringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchBufferMax">
		/// <para>Type: <b>int</b> The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then <i>lpBuffer</i> receives a read-only pointer to the string resource itself.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadstringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is one of the following: - The number of characters copied into the buffer (if *cchBufferMax* is non-zero), not including the terminating null character. - The number of characters in the string resource that *lpBuffer* points to (if *cchBufferMax* is zero). The string resource is not guaranteed to be null-terminated in the module's resource table, and you can use this value to determine where the string resource ends. - Zero if the string resource does not exist. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadstringw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadStringW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int LoadString(winmdroot.Foundation.HINSTANCE hInstance, uint uID, winmdroot.Foundation.PWSTR lpBuffer, int cchBufferMax);

		/// <inheritdoc cref="wvsprintf(winmdroot.Foundation.PWSTR, winmdroot.Foundation.PCWSTR, sbyte*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int wvsprintf(winmdroot.Foundation.PWSTR param0, string param1, in sbyte arglist)
		{
			fixed (sbyte* arglistLocal = &arglist)
			{
				fixed (char* param1Local = param1)
				{
					int __result = PInvoke.wvsprintf(param0, param1Local, arglistLocal);
					return __result;
				}
			}
		}

		/// <summary>Writes formatted data to the specified buffer using a pointer to a list of arguments.</summary>
		/// <param name="arglist">
		/// <para>Type: <b>va_list</b> Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the <i>lpFmt</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-wvsprintfw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the number of characters stored in the buffer, not counting the terminating null character. If the function fails, the return value is less than the length of the expected output. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-wvsprintfw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "wvsprintfW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int wvsprintf(winmdroot.Foundation.PWSTR param0, winmdroot.Foundation.PCWSTR param1, sbyte* arglist);

		/// <inheritdoc cref="wsprintf(winmdroot.Foundation.PWSTR, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int wsprintf(winmdroot.Foundation.PWSTR param0, string param1)
		{
			fixed (char* param1Local = param1)
			{
				int __result = PInvoke.wsprintf(param0, param1Local);
				return __result;
			}
		}

		/// <summary>Writes formatted data to the specified buffer.</summary>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the number of characters stored in the output buffer, not counting the terminating null character. If the function fails, the return value is less than the length of the expected output. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-wsprintfw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "wsprintfW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int wsprintf(winmdroot.Foundation.PWSTR param0, winmdroot.Foundation.PCWSTR param1);

		/// <summary>Determines whether the system considers that a specified application is not responding.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ishungappwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value is <b>TRUE</b> if the window stops responding; otherwise, it is <b>FALSE</b>.  Ghost windows always return <b>TRUE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ishungappwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsHungAppWindow(winmdroot.Foundation.HWND hwnd);

		/// <summary>Disables the window ghosting feature for the calling GUI process. Window ghosting is a Windows Manager feature that lets the user minimize, move, or close the main window of an application that is not responding.</summary>
		/// <remarks>
		/// <para>After calling <b>DisableProcessWindowsGhosting</b>, the ghosting feature is disabled for the duration of the process.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-disableprocesswindowsghosting#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern void DisableProcessWindowsGhosting();

		/// <inheritdoc cref="RegisterWindowMessage(winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint RegisterWindowMessage(string lpString)
		{
			fixed (char* lpStringLocal = lpString)
			{
				uint __result = PInvoke.RegisterWindowMessage(lpStringLocal);
				return __result;
			}
		}

		/// <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
		/// <param name="lpString">
		/// <para>Type: <b>LPCTSTR</b> The message to be registered.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerwindowmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerwindowmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "RegisterWindowMessageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint RegisterWindowMessage(winmdroot.Foundation.PCWSTR lpString);

		/// <inheritdoc cref="GetMessage(winmdroot.UI.WindowsAndMessaging.MSG*, winmdroot.Foundation.HWND, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetMessage(out winmdroot.UI.WindowsAndMessaging.MSG lpMsg, winmdroot.Foundation.HWND hWnd, uint wMsgFilterMin, uint wMsgFilterMax)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetMessage(lpMsgLocal, hWnd, wMsgFilterMin, wMsgFilterMax);
				return __result;
			}
		}

		/// <summary>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</summary>
		/// <param name="lpMsg">
		/// <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that receives message information from the thread's message queue.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
		/// <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed. If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>,  that is, thread messages as posted by  <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postmessagea">PostMessage</a> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postthreadmessagea">PostThreadMessage</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wMsgFilterMin">
		/// <para>Type: <b>UINT</b> The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message. Use <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wMsgFilterMax">
		/// <para>Type: <b>UINT</b> The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
		/// <para>Use <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function retrieves a message other than <a href="/windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero. If the function retrieves the <a href="/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero. If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetMessageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetMessage(winmdroot.UI.WindowsAndMessaging.MSG* lpMsg, winmdroot.Foundation.HWND hWnd, uint wMsgFilterMin, uint wMsgFilterMax);

		/// <inheritdoc cref="TranslateMessage(winmdroot.UI.WindowsAndMessaging.MSG*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL TranslateMessage(in winmdroot.UI.WindowsAndMessaging.MSG lpMsg)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.TranslateMessage(lpMsgLocal);
				return __result;
			}
		}

		/// <summary>Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function.</summary>
		/// <param name="lpMsg">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that contains message information retrieved from the calling thread's message queue by using the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemessage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the message is translated (that is, a character message is posted to the thread's message queue), the return value is nonzero. If the message is <a href="/windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>, <a href="/windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>, <a href="/windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a>, or <a href="/windows/desktop/inputdev/wm-syskeyup">WM_SYSKEYUP</a>, the return value is nonzero, regardless of the translation. If the message is not translated (that is, a character message is not posted to the thread's message queue), the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemessage">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL TranslateMessage(winmdroot.UI.WindowsAndMessaging.MSG* lpMsg);

		/// <inheritdoc cref="DispatchMessage(winmdroot.UI.WindowsAndMessaging.MSG*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.LRESULT DispatchMessage(in winmdroot.UI.WindowsAndMessaging.MSG lpMsg)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
			{
				winmdroot.Foundation.LRESULT __result = PInvoke.DispatchMessage(lpMsgLocal);
				return __result;
			}
		}

		/// <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.</summary>
		/// <param name="lpMsg">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a>*</b> A pointer to a structure that contains the message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dispatchmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dispatchmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DispatchMessageW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.LRESULT DispatchMessage(winmdroot.UI.WindowsAndMessaging.MSG* lpMsg);

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL SetMessageQueue(int cMessagesMax);

		/// <inheritdoc cref="PeekMessage(winmdroot.UI.WindowsAndMessaging.MSG*, winmdroot.Foundation.HWND, uint, uint, winmdroot.UI.WindowsAndMessaging.PEEK_MESSAGE_REMOVE_TYPE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL PeekMessage(out winmdroot.UI.WindowsAndMessaging.MSG lpMsg, winmdroot.Foundation.HWND hWnd, uint wMsgFilterMin, uint wMsgFilterMax, winmdroot.UI.WindowsAndMessaging.PEEK_MESSAGE_REMOVE_TYPE wRemoveMsg)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.PeekMessage(lpMsgLocal, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
				return __result;
			}
		}

		/// <summary>Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).</summary>
		/// <param name="lpMsg">
		/// <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that receives message information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-peekmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
		/// <para>If <i>hWnd</i> is <b>NULL</b>, <b>PeekMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed. If <i>hWnd</i> is -1, <b>PeekMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by  <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postmessagea">PostMessage</a> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postthreadmessagea">PostThreadMessage</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-peekmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wMsgFilterMin">
		/// <para>Type: <b>UINT</b> The value of the first message in the range of messages to be examined. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-peekmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wMsgFilterMax">
		/// <para>Type: <b>UINT</b> The value of the last message in the range of messages to be examined. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-peekmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wRemoveMsg">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If a message is available, the return value is nonzero. If no messages are available, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-peekmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "PeekMessageW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL PeekMessage(winmdroot.UI.WindowsAndMessaging.MSG* lpMsg, winmdroot.Foundation.HWND hWnd, uint wMsgFilterMin, uint wMsgFilterMax, winmdroot.UI.WindowsAndMessaging.PEEK_MESSAGE_REMOVE_TYPE wRemoveMsg);

		/// <summary>Retrieves the cursor position for the last message retrieved by the GetMessage function.</summary>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The return value specifies the x- and y-coordinates of the cursor position. The x-coordinate is the low order <b>short</b> and the y-coordinate is the high-order <b>short</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagepos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetMessagePos();

		/// <summary>Retrieves the message time for the last message retrieved by the GetMessage function.</summary>
		/// <returns>
		/// <para>Type: <b>LONG</b> The return value specifies the message time.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagetime">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetMessageTime();

		/// <summary>Retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue.</summary>
		/// <returns>
		/// <para>Type: <b>LPARAM</b> The return value specifies the extra information. The meaning of the extra information is device specific.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessageextrainfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LPARAM GetMessageExtraInfo();

		/// <summary>Determines whether the last message read from the current thread's queue originated from a WOW64 process.</summary>
		/// <returns>The function returns TRUE if the last message read from the current thread's queue originated from a WOW64 process, and FALSE otherwise.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswow64message">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL IsWow64Message();

		/// <summary>Sets the extra message information for the current thread.</summary>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> The value to be associated with the current thread.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmessageextrainfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPARAM</b> The return value is the previous value associated with the current thread.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmessageextrainfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LPARAM SetMessageExtraInfo(winmdroot.Foundation.LPARAM lParam);

		/// <summary>Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows. Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value specifies the result of the message processing; it depends on the message sent.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SendMessageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT SendMessage(winmdroot.Foundation.HWND hWnd, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Sends the specified message to one or more windows.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of <i>uTimeout</i> multiplied by the number of top-level windows.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagetimeoutw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagetimeoutw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Any additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagetimeoutw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Any additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagetimeoutw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fuFlags">Type: <b>UINT</b></param>
		/// <param name="uTimeout">
		/// <para>Type: <b>UINT</b> The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagetimeoutw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpdwResult">
		/// <para>Type: <b>PDWORD_PTR</b> The result of the message processing. The value of this parameter depends on the message that is specified.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagetimeoutw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> If the function succeeds, the return value is nonzero. <b>SendMessageTimeout</b> does not provide information about individual windows timing out if <b>HWND_BROADCAST</b> is used. If the function fails or times out, the return value is 0. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If <b>GetLastError</b> returns <b>ERROR_TIMEOUT</b>, then the function timed out. <b>Windows 2000:  </b>If <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns 0, then the function timed out.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagetimeoutw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SendMessageTimeoutW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.LRESULT SendMessageTimeout(winmdroot.Foundation.HWND hWnd, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam, winmdroot.UI.WindowsAndMessaging.SEND_MESSAGE_TIMEOUT_FLAGS fuFlags, uint uTimeout, [Optional] nuint* lpdwResult);

		/// <summary>Sends the specified message to a window or windows.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendnotifymessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendnotifymessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendnotifymessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendnotifymessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendnotifymessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SendNotifyMessageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SendNotifyMessage(winmdroot.Foundation.HWND hWnd, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Sends the specified message to a window or windows.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagecallbackw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagecallbackw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagecallbackw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagecallbackw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpResultCallBack">
		/// <para>Type: <b>SENDASYNCPROC</b> A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a>.</para>
		/// <para>If <i>hWnd</i> is <b>HWND_BROADCAST</b> ((HWND)0xffff), the system calls the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a> callback function once for each top-level window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagecallbackw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwData">
		/// <para>Type: <b>ULONG_PTR</b> An application-defined value to be sent to the callback function pointed to by the <i>lpCallBack</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagecallbackw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagecallbackw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SendMessageCallbackW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SendMessageCallback(winmdroot.Foundation.HWND hWnd, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam, winmdroot.UI.WindowsAndMessaging.SENDASYNCPROC lpResultCallBack, nuint dwData);

		/// <inheritdoc cref="RegisterDeviceNotification(winmdroot.Foundation.HANDLE, void*, winmdroot.System.Power.POWER_SETTING_REGISTER_NOTIFICATION_FLAGS)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe void* RegisterDeviceNotification(SafeHandle hRecipient, void* NotificationFilter, winmdroot.System.Power.POWER_SETTING_REGISTER_NOTIFICATION_FLAGS Flags)
		{
			bool hRecipientAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hRecipientLocal;
				if (hRecipient is object)
				{
					hRecipient.DangerousAddRef(ref hRecipientAddRef);
					hRecipientLocal = (winmdroot.Foundation.HANDLE)hRecipient.DangerousGetHandle();
				}
				else
					hRecipientLocal = default(winmdroot.Foundation.HANDLE);
				void* __result = PInvoke.RegisterDeviceNotification(hRecipientLocal, NotificationFilter, Flags);
				return __result;
			}
			finally
			{
				if (hRecipientAddRef)
					hRecipient.DangerousRelease();
			}
		}

		/// <summary>Registers the device or type of device for which a window will receive notifications.</summary>
		/// <param name="hRecipient">
		/// <para>A handle to the window or service that will receive device events for the devices specified in the <i>NotificationFilter</i> parameter. The same window handle can be used in multiple calls to <b>RegisterDeviceNotification</b>. Services can specify either a window handle or service status handle.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerdevicenotificationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="NotificationFilter">
		/// <para>A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the <a href="https://docs.microsoft.com/windows/desktop/api/dbt/ns-dbt-dev_broadcast_hdr">DEV_BROADCAST_HDR</a> structure. The data following this header is dependent on the value of the <b>dbch_devicetype</b> member, which can be <b>DBT_DEVTYP_DEVICEINTERFACE</b> or <b>DBT_DEVTYP_HANDLE</b>. For more information, see Remarks.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerdevicenotificationw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Flags"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a device notification handle. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerdevicenotificationw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "RegisterDeviceNotificationW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe void* RegisterDeviceNotification(winmdroot.Foundation.HANDLE hRecipient, void* NotificationFilter, winmdroot.System.Power.POWER_SETTING_REGISTER_NOTIFICATION_FLAGS Flags);

		/// <summary>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose window procedure is to receive the message. The following values have special meanings. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be posted. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the limit is hit.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "PostMessageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL PostMessage(winmdroot.Foundation.HWND hWnd, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
		/// <param name="idThread">
		/// <para>Type: <b>DWORD</b> The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section. Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level. This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>. This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The type of message to be posted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "PostThreadMessageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL PostThreadMessage(uint idThread, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Replies to a message sent from another thread by the SendMessage function.</summary>
		/// <param name="lResult">
		/// <para>Type: <b>LRESULT</b> The result of the message processing. The possible values are based on the message sent.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-replymessage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the calling thread was processing a message sent from another thread or process, the return value is nonzero. If the calling thread was not processing a message sent from another thread or process, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-replymessage">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ReplyMessage(winmdroot.Foundation.LRESULT lResult);

		/// <summary>Yields control to other threads when a thread has no other messages in its message queue. The WaitMessage function suspends the thread and does not return until a new message is placed in the thread's message queue.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-waitmessage">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL WaitMessage();

		/// <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window procedure that received the message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value is the result of the message processing and depends on the message.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DefWindowProcW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT DefWindowProc(winmdroot.Foundation.HWND hWnd, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a WM_DESTROY message.</summary>
		/// <param name="nExitCode">
		/// <para>Type: <b>int</b> The application exit code. This value is used as the <i>wParam</i> parameter of the <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postquitmessage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>The <b>PostQuitMessage</b> function posts a <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message to the thread's message queue and returns immediately; the function simply indicates to the system that the thread is requesting to quit at some time in the future. When the thread retrieves the <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message from its message queue, it should exit its message loop and return control to the system. The exit value returned to the system must be the <i>wParam</i> parameter of the <b>WM_QUIT</b> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postquitmessage#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern void PostQuitMessage(int nExitCode);

		/// <summary>Passes message information to the specified window procedure.</summary>
		/// <param name="lpPrevWndFunc">
		/// <para>Type: <b>WNDPROC</b> The previous window procedure. If this value is obtained by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getwindowlonga">GetWindowLong</a> function with the <i>nIndex</i> parameter set to <b>GWL_WNDPROC</b> or <b>DWL_DLGPROC</b>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <b>CallWindowProc</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window procedure to receive the message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value specifies the result of the message processing and depends on the message sent.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callwindowprocw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CallWindowProcW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT CallWindowProc(winmdroot.UI.WindowsAndMessaging.WNDPROC lpPrevWndFunc, winmdroot.Foundation.HWND hWnd, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window procedure is processing a message sent to it from another thread using the <a href="/windows/desktop/api/winuser/nf-winuser-sendmessage">SendMessage</a> function, the return value is nonzero. If the window procedure is not processing a message sent to it from another thread using the <a href="/windows/desktop/api/winuser/nf-winuser-sendmessage">SendMessage</a> function, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insendmessage">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL InSendMessage();

		/// <summary>Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process).</summary>
		/// <param name="lpReserved">
		/// <para>Type: <b>LPVOID</b> Reserved; must be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insendmessageex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> If the message was not sent, the return value is <b>ISMEX_NOSEND</b> (0x00000000). Otherwise, the return value is one or more of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insendmessageex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint InSendMessageEx(void* lpReserved);

		/// <summary>Destroys an icon and frees any memory the icon occupied.</summary>
		/// <param name="hIcon">
		/// <para>Type: <b>HICON</b> A handle to the icon to be destroyed. The icon must not be in use.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DestroyIcon(winmdroot.UI.WindowsAndMessaging.HICON hIcon);

		/// <summary>Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.</summary>
		/// <param name="hCursor">
		/// <para>Type: <b>HCURSOR</b> A handle to the cursor to be destroyed. The cursor must not be in use.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DestroyCursor(winmdroot.UI.WindowsAndMessaging.HCURSOR hCursor);

		/// <summary>Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.</summary>
		/// <param name="lpWndClass">
		/// <para>Type: <b>const WNDCLASS*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassa">WNDCLASS</a> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>ATOM</b> If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <a href="/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoa">GetClassInfo</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoexa">GetClassInfoEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowa">FindWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowexa">FindWindowEx</a>, and <a href="/windows/desktop/api/winuser/nf-winuser-unregisterclassa">UnregisterClass</a> functions and the <b>IActiveIMMap::FilterClientWindows</b> method. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "RegisterClassW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern ushort RegisterClass(in winmdroot.UI.WindowsAndMessaging.WNDCLASSW lpWndClass);

		/// <inheritdoc cref="UnregisterClass(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.HINSTANCE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL UnregisterClass(string lpClassName, SafeHandle hInstance)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpClassNameLocal = lpClassName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.Foundation.BOOL __result = PInvoke.UnregisterClass(lpClassNameLocal, hInstanceLocal);
					return __result;
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Unregisters a window class, freeing the memory required for the class.</summary>
		/// <param name="lpClassName">
		/// <para>Type: <b>LPCTSTR</b> A null-terminated string or a class atom. If <i>lpClassName</i> is a string, it specifies the window class name. This class name must have been registered by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the <b>RegisterClass</b> or <b>RegisterClassEx</b> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterclassw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the instance of the module that created the class.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterclassw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the class could not be found or if a window still exists that was created with the class, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unregisterclassw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "UnregisterClassW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL UnregisterClass(winmdroot.Foundation.PCWSTR lpClassName, winmdroot.Foundation.HINSTANCE hInstance);

		/// <inheritdoc cref="GetClassInfo(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR, out winmdroot.UI.WindowsAndMessaging.WNDCLASSW)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetClassInfo(SafeHandle hInstance, string lpClassName, out winmdroot.UI.WindowsAndMessaging.WNDCLASSW lpWndClass)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpClassNameLocal = lpClassName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.Foundation.BOOL __result = PInvoke.GetClassInfo(hInstanceLocal, lpClassNameLocal, out lpWndClass);
					return __result;
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about a window class.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpClassName">
		/// <para>Type: <b>LPCTSTR</b> The class name. The name must be that of a preregistered class or a class registered by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a>. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpWndClass">
		/// <para>Type: <b>LPWNDCLASS</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassa">WNDCLASS</a> structure that receives the information about the class.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function finds a matching class and successfully copies the data, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetClassInfoW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL GetClassInfo(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpClassName, out winmdroot.UI.WindowsAndMessaging.WNDCLASSW lpWndClass);

		/// <summary>Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.</summary>
		/// <returns>
		/// <para>Type: <b>ATOM</b> If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <a href="/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoa">GetClassInfo</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoexa">GetClassInfoEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowa">FindWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowexa">FindWindowEx</a>, and <a href="/windows/desktop/api/winuser/nf-winuser-unregisterclassa">UnregisterClass</a> functions and the <b>IActiveIMMap::FilterClientWindows</b> method. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "RegisterClassExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern ushort RegisterClassEx(in winmdroot.UI.WindowsAndMessaging.WNDCLASSEXW param0);

		/// <inheritdoc cref="GetClassInfoEx(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR, out winmdroot.UI.WindowsAndMessaging.WNDCLASSEXW)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetClassInfoEx(SafeHandle hInstance, string lpszClass, out winmdroot.UI.WindowsAndMessaging.WNDCLASSEXW lpwcx)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpszClassLocal = lpszClass)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.Foundation.BOOL __result = PInvoke.GetClassInfoEx(hInstanceLocal, lpszClassLocal, out lpwcx);
					return __result;
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfoexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszClass">
		/// <para>Type: <b>LPCTSTR</b> The class name. The name must be that of a preregistered class or a class registered by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. Alternatively, this parameter can be a class atom created by a previous call to <b>RegisterClass</b> or <b>RegisterClassEx</b>. The atom must be in the low-order word of <i>lpszClass</i>; the high-order word must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfoexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpwcx">
		/// <para>Type: <b>LPWNDCLASSEX</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassexa">WNDCLASSEX</a> structure that receives the information about the class.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfoexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function finds a matching class and successfully copies the data, the return value is nonzero. If the function does not find a matching class and successfully copy the data, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassinfoexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetClassInfoExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL GetClassInfoEx(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpszClass, out winmdroot.UI.WindowsAndMessaging.WNDCLASSEXW lpwcx);

		/// <inheritdoc cref="CreateWindowEx(winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE, winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE, int, int, int, int, winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.HMENU, winmdroot.Foundation.HINSTANCE, void*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.HWND CreateWindowEx(winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle, string lpClassName, string lpWindowName, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, winmdroot.Foundation.HWND hWndParent, SafeHandle hMenu, SafeHandle hInstance, void* lpParam)
		{
			bool hMenuAddRef = false;
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpWindowNameLocal = lpWindowName)
				{
					fixed (char* lpClassNameLocal = lpClassName)
					{
						winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
						if (hMenu is object)
						{
							hMenu.DangerousAddRef(ref hMenuAddRef);
							hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
						}
						else
							hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
						winmdroot.Foundation.HINSTANCE hInstanceLocal;
						if (hInstance is object)
						{
							hInstance.DangerousAddRef(ref hInstanceAddRef);
							hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
						}
						else
							hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
						winmdroot.Foundation.HWND __result = PInvoke.CreateWindowEx(dwExStyle, lpClassNameLocal, lpWindowNameLocal, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenuLocal, hInstanceLocal, lpParam);
						return __result;
					}
				}
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.</summary>
		/// <param name="dwExStyle">
		/// <para>Type: <b>DWORD</b> The extended window style of the window being created. For a list of possible values, see  <a href="https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpClassName">
		/// <para>Type: <b>LPCTSTR</b> A <b>null</b>-terminated string or a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-window-classes">system class</a> names.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpWindowName">
		/// <para>Type: <b>LPCTSTR</b> The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwStyle">
		/// <para>Type: <b>DWORD</b> The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="X">
		/// <para>Type: <b>int</b> The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
		/// <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nWidth">
		/// <para>Type: <b>int</b> The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nHeight">
		/// <para>Type: <b>int</b> The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. To create a <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the instance of the module to be associated with the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpParam">
		/// <para>Type: <b>LPVOID</b> Pointer to a value to be passed to the window through the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-createstructa">CREATESTRUCT</a> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message.  This message is sent to the created window by this function before it returns. If an application calls <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create a MDI client window, <i>lpParam</i> should point to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-clientcreatestruct">CLIENTCREATESTRUCT</a> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-mdicreatestructa">MDICREATESTRUCT</a> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the new window. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function typically fails for one of the following reasons: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateWindowExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.HWND CreateWindowEx(winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle, winmdroot.Foundation.PCWSTR lpClassName, winmdroot.Foundation.PCWSTR lpWindowName, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.HMENU hMenu, winmdroot.Foundation.HINSTANCE hInstance, [Optional] void* lpParam);

		/// <summary>Determines whether the specified window handle identifies an existing window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window handle identifies an existing window, the return value is nonzero. If the window handle does not identify an existing window, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsWindow(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="IsMenu(winmdroot.UI.WindowsAndMessaging.HMENU)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL IsMenu(SafeHandle hMenu)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.IsMenu(hMenuLocal);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Determines whether a handle is a menu handle.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ismenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the handle is a menu handle, the return value is nonzero. If the handle is not a menu handle, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ismenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu);

		/// <summary>Determines whether a window is a child window or descendant window of a specified parent window.</summary>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the parent window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischild#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischild#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window is a child or descendant window of the specified parent window, the return value is nonzero. If the window is not a child or descendant window of the specified parent window, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischild">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsChild(winmdroot.Foundation.HWND hWndParent, winmdroot.Foundation.HWND hWnd);

		/// <summary>Destroys the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be destroyed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroywindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroywindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DestroyWindow(winmdroot.Foundation.HWND hWnd);

		/// <summary>Sets the specified window's show state.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nCmdShow">Type: <b>int</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window was previously visible, the return value is nonzero. If the window was previously hidden, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ShowWindow(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SHOW_WINDOW_CMD nCmdShow);

		/// <summary>Enables you to produce special effects when showing or hiding windows. There are four types of animation:\_roll, slide, collapse or expand, and alpha-blended fade.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to animate. The calling thread must own this window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-animatewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwTime">
		/// <para>Type: <b>DWORD</b> The time it takes to play the animation, in milliseconds. Typically, an animation takes 200 milliseconds to play.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-animatewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">Type: <b>DWORD</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The function will fail in the following situations: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-animatewindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL AnimateWindow(winmdroot.Foundation.HWND hWnd, uint dwTime, winmdroot.UI.WindowsAndMessaging.ANIMATE_WINDOW_FLAGS dwFlags);

		/// <summary>The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.</summary>
		/// <param name="hWnd">A handle to the window whose DC is to be released.</param>
		/// <param name="hDC">A handle to the DC to be released.</param>
		/// <returns>
		/// <para>The return value indicates whether the DC was released. If the DC was released, the return value is 1. If the DC was not released, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-releasedc">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int ReleaseDC(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HDC hDC);

		/// <inheritdoc cref="UpdateLayeredWindow(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HDC, global::System.Drawing.Point*, winmdroot.Foundation.SIZE*, winmdroot.Graphics.Gdi.HDC, global::System.Drawing.Point*, winmdroot.Foundation.COLORREF, winmdroot.Graphics.Gdi.BLENDFUNCTION*, winmdroot.UI.WindowsAndMessaging.UPDATE_LAYERED_WINDOW_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL UpdateLayeredWindow(winmdroot.Foundation.HWND hWnd, SafeHandle hdcDst, global::System.Drawing.Point? pptDst, winmdroot.Foundation.SIZE? psize, SafeHandle hdcSrc, global::System.Drawing.Point? pptSrc, winmdroot.Foundation.COLORREF crKey, winmdroot.Graphics.Gdi.BLENDFUNCTION? pblend, winmdroot.UI.WindowsAndMessaging.UPDATE_LAYERED_WINDOW_FLAGS dwFlags)
		{
			bool hdcDstAddRef = false;
			bool hdcSrcAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hdcDstLocal;
				if (hdcDst is object)
				{
					hdcDst.DangerousAddRef(ref hdcDstAddRef);
					hdcDstLocal = (winmdroot.Graphics.Gdi.HDC)hdcDst.DangerousGetHandle();
				}
				else
					hdcDstLocal = default(winmdroot.Graphics.Gdi.HDC);
				global::System.Drawing.Point pptDstLocal = pptDst.HasValue ? pptDst.Value : default(global::System.Drawing.Point);
				winmdroot.Foundation.SIZE psizeLocal = psize.HasValue ? psize.Value : default(winmdroot.Foundation.SIZE);
				winmdroot.Graphics.Gdi.HDC hdcSrcLocal;
				if (hdcSrc is object)
				{
					hdcSrc.DangerousAddRef(ref hdcSrcAddRef);
					hdcSrcLocal = (winmdroot.Graphics.Gdi.HDC)hdcSrc.DangerousGetHandle();
				}
				else
					hdcSrcLocal = default(winmdroot.Graphics.Gdi.HDC);
				global::System.Drawing.Point pptSrcLocal = pptSrc.HasValue ? pptSrc.Value : default(global::System.Drawing.Point);
				winmdroot.Graphics.Gdi.BLENDFUNCTION pblendLocal = pblend.HasValue ? pblend.Value : default(winmdroot.Graphics.Gdi.BLENDFUNCTION);
				winmdroot.Foundation.BOOL __result = PInvoke.UpdateLayeredWindow(hWnd, hdcDstLocal, pptDst.HasValue ? &pptDstLocal : null, psize.HasValue ? &psizeLocal : null, hdcSrcLocal, pptSrc.HasValue ? &pptSrcLocal : null, crKey, pblend.HasValue ? &pblendLocal : null, dwFlags);
				return __result;
			}
			finally
			{
				if (hdcDstAddRef)
					hdcDst.DangerousRelease();
				if (hdcSrcAddRef)
					hdcSrc.DangerousRelease();
			}
		}

		/// <summary>Updates the position, size, shape, content, and translucency of a layered window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to a layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a> function. <b>Windows 8:  </b>The <b>WS_EX_LAYERED</b> style is supported for top-level windows and child windows. Previous Windows versions support <b>WS_EX_LAYERED</b> only for top-level windows.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hdcDst">
		/// <para>Type: <b>HDC</b> A handle to a DC for the screen. This handle is obtained by specifying <b>NULL</b> when calling the <a href="https://docs.microsoft.com/windows/win32/api/winuser/nf-winuser-getdc">GetDC</a> function. It is used for palette color matching when the window contents are updated. If <i>hdcDst</i> is <b>NULL</b>, the default palette will be used. If <i>hdcSrc</i> is <b>NULL</b>, <i>hdcDst</i> must be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pptDst">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a>*</b> A pointer to a structure that specifies the new screen position of the layered window. If the current position is not changing, <i>pptDst</i> can be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="psize">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd145106(v=vs.85)">SIZE</a>*</b> A pointer to a structure that specifies the new size of the layered window. If the size of the window is not changing, <i>psize</i> can be <b>NULL</b>. If <i>hdcSrc</i> is <b>NULL</b>, <i>psize</i> must be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hdcSrc">
		/// <para>Type: <b>HDC</b> A handle to a DC for the surface that defines the layered window. This handle can be obtained by calling the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createcompatibledc">CreateCompatibleDC</a> function. If the shape and visual context of the window are not changing, <i>hdcSrc</i> can be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pptSrc">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a>*</b> A pointer to a structure that specifies the location of the layer in the device context. If <i>hdcSrc</i> is <b>NULL</b>, <i>pptSrc</i> should be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="crKey">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a></b> A structure that specifies the color key to be used when composing the layered window. To generate a <a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a>, use the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-rgb">RGB</a> macro.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pblend">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-blendfunction">BLENDFUNCTION</a>*</b> A pointer to a structure that specifies the transparency value to be used when composing the layered window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">Type: <b>DWORD</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatelayeredwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL UpdateLayeredWindow(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HDC hdcDst, [Optional] global::System.Drawing.Point* pptDst, [Optional] winmdroot.Foundation.SIZE* psize, winmdroot.Graphics.Gdi.HDC hdcSrc, [Optional] global::System.Drawing.Point* pptSrc, winmdroot.Foundation.COLORREF crKey, [Optional] winmdroot.Graphics.Gdi.BLENDFUNCTION* pblend, winmdroot.UI.WindowsAndMessaging.UPDATE_LAYERED_WINDOW_FLAGS dwFlags);

		/// <inheritdoc cref="UpdateLayeredWindowIndirect(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.UPDATELAYEREDWINDOWINFO*)"/>
		internal static unsafe winmdroot.Foundation.BOOL UpdateLayeredWindowIndirect(winmdroot.Foundation.HWND hWnd, in winmdroot.UI.WindowsAndMessaging.UPDATELAYEREDWINDOWINFO pULWInfo)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.UPDATELAYEREDWINDOWINFO* pULWInfoLocal = &pULWInfo)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.UpdateLayeredWindowIndirect(hWnd, pULWInfoLocal);
				return __result;
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL UpdateLayeredWindowIndirect(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.UPDATELAYEREDWINDOWINFO* pULWInfo);

		/// <summary>Retrieves the opacity and transparency color key of a layered window.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a> function or by setting <b>WS_EX_LAYERED</b> using <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowlonga">SetWindowLong</a> after the window has been created.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pcrKey">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a> value that receives the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. This can be <b>NULL</b> if the argument is not needed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pbAlpha">
		/// <para>Type: <b>BYTE*</b> The Alpha value used to describe the opacity of the layered window. Similar to the <b>SourceConstantAlpha</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-blendfunction">BLENDFUNCTION</a> structure. When the variable referred to by <i>pbAlpha</i> is 0, the window is completely transparent. When the variable referred to by <i>pbAlpha</i> is 255, the window is opaque. This can be <b>NULL</b> if the argument is not needed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pdwFlags">Type: <b>DWORD*</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlayeredwindowattributes">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetLayeredWindowAttributes(winmdroot.Foundation.HWND hwnd, [Optional] winmdroot.Foundation.COLORREF* pcrKey, [Optional] byte* pbAlpha, [Optional] winmdroot.UI.WindowsAndMessaging.LAYERED_WINDOW_ATTRIBUTES_FLAGS* pdwFlags);

		/// <summary>Sets the opacity and transparency color key of a layered window.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a> function or by setting <b>WS_EX_LAYERED</b> via <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowlonga">SetWindowLong</a> after the window has been created. <b>Windows 8:  </b>The <b>WS_EX_LAYERED</b> style is supported for top-level windows and child windows. Previous Windows versions support <b>WS_EX_LAYERED</b> only for top-level windows.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="crKey">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a></b> A <a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a> structure that specifies the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. To generate a <b>COLORREF</b>, use the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-rgb">RGB</a> macro.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bAlpha">
		/// <para>Type: <b>BYTE</b> Alpha value used to describe the opacity of the layered window. Similar to the <b>SourceConstantAlpha</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-blendfunction">BLENDFUNCTION</a> structure. When <i>bAlpha</i> is 0, the window is completely transparent. When <i>bAlpha</i> is 255, the window is opaque.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">Type: <b>DWORD</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetLayeredWindowAttributes(winmdroot.Foundation.HWND hwnd, winmdroot.Foundation.COLORREF crKey, byte bAlpha, winmdroot.UI.WindowsAndMessaging.LAYERED_WINDOW_ATTRIBUTES_FLAGS dwFlags);

		/// <summary>Sets the show state of a window without waiting for the operation to complete.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindowasync#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nCmdShow">
		/// <para>Type: <b>int</b> Controls how the window is to be shown. For a list of possible values, see the description of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindowasync#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the operation was successfully started, the return value is nonzero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindowasync">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ShowWindowAsync(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SHOW_WINDOW_CMD nCmdShow);

		/// <summary>Flashes the specified window one time. It does not change the active state of the window.</summary>
		/// <param name="hWnd">A handle to the window to be flashed. The window can be either open or minimized.</param>
		/// <param name="bInvert">
		/// <para>If this parameter is <b>TRUE</b>, the window is flashed from one state to the other. If it is <b>FALSE</b>, the window is returned to its original state (either active or inactive).</para>
		/// <para>When an application is minimized and this parameter is <b>TRUE</b>, the taskbar window button flashes active/inactive. If it is <b>FALSE</b>, the taskbar window button flashes inactive, meaning that it does not change colors. It flashes, as if it were being redrawn, but it does not provide the visual invert clue to the user.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-flashwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>The return value specifies the window's state before the call to the <b>FlashWindow</b> function. If the window caption was drawn as active before the call, the return value is nonzero. Otherwise, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-flashwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL FlashWindow(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.BOOL bInvert);

		/// <inheritdoc cref="FlashWindowEx(winmdroot.UI.WindowsAndMessaging.FLASHWINFO*)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL FlashWindowEx(in winmdroot.UI.WindowsAndMessaging.FLASHWINFO pfwi)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.FLASHWINFO* pfwiLocal = &pfwi)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.FlashWindowEx(pfwiLocal);
				return __result;
			}
		}

		/// <summary>Flashes the specified window. It does not change the active state of the window.</summary>
		/// <param name="pfwi">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-flashwinfo">FLASHWINFO</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-flashwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>The return value specifies the window's state before the call to the <b>FlashWindowEx</b> function. If the window caption was drawn as active before the call, the return value is nonzero. Otherwise, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-flashwindowex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe winmdroot.Foundation.BOOL FlashWindowEx(winmdroot.UI.WindowsAndMessaging.FLASHWINFO* pfwi);

		/// <summary>Shows or hides all pop-up windows owned by the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the pop-up windows to be shown or hidden.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showownedpopups#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fShow">
		/// <para>Type: <b>BOOL</b> If this parameter is <b>TRUE</b>, all hidden pop-up windows are shown. If this parameter is <b>FALSE</b>, all visible pop-up windows are hidden.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showownedpopups#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showownedpopups">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ShowOwnedPopups(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.BOOL fShow);

		/// <summary>Restores a minimized (iconic) window to its previous size and position; it then activates the window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be restored and activated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-openicon">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL OpenIcon(winmdroot.Foundation.HWND hWnd);

		/// <summary>Minimizes (but does not destroy) the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be minimized.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-closewindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CloseWindow(winmdroot.Foundation.HWND hWnd);

		/// <summary>Changes the position and dimensions of the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-movewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="X">
		/// <para>Type: <b>int</b> The new position of the left side of the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-movewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The new position of the top of the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-movewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nWidth">
		/// <para>Type: <b>int</b> The new width of the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-movewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nHeight">
		/// <para>Type: <b>int</b> The new height of the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-movewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bRepaint">
		/// <para>Type: <b>BOOL</b> Indicates whether the window is to be repainted. If this parameter is <b>TRUE</b>, the window receives a  message. If the parameter is <b>FALSE</b>, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-movewindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-movewindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL MoveWindow(winmdroot.Foundation.HWND hWnd, int X, int Y, int nWidth, int nHeight, winmdroot.Foundation.BOOL bRepaint);

		/// <summary>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndInsertAfter">Type: <b>HWND</b></param>
		/// <param name="X">
		/// <para>Type: <b>int</b> The new position of the left side of the window, in client coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The new position of the top of the window, in client coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cx">
		/// <para>Type: <b>int</b> The new width of the window, in pixels.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cy">
		/// <para>Type: <b>int</b> The new height of the window, in pixels.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetWindowPos(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.HWND hWndInsertAfter, int X, int Y, int cx, int cy, winmdroot.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS uFlags);

		/// <inheritdoc cref="GetWindowPlacement(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetWindowPlacement(winmdroot.Foundation.HWND hWnd, ref winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT lpwndpl)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT* lpwndplLocal = &lpwndpl)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetWindowPlacement(hWnd, lpwndplLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the show state and the restored, minimized, and maximized positions of the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowplacement#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpwndpl">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-windowplacement">WINDOWPLACEMENT</a>*</b> A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-windowplacement">WINDOWPLACEMENT</a> structure that receives the show state and position information. Before calling <b>GetWindowPlacement</b>, set the <b>length</b> member to <c>sizeof(WINDOWPLACEMENT)</c>. <b>GetWindowPlacement</b> fails if <i>lpwndpl</i>-&gt; <i>length</i> is not set correctly.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowplacement#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowplacement">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetWindowPlacement(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT* lpwndpl);

		/// <inheritdoc cref="SetWindowPlacement(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetWindowPlacement(winmdroot.Foundation.HWND hWnd, in winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT lpwndpl)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT* lpwndplLocal = &lpwndpl)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.SetWindowPlacement(hWnd, lpwndplLocal);
				return __result;
			}
		}

		/// <summary>Sets the show state and the restored, minimized, and maximized positions of the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowplacement#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpwndpl">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-windowplacement">WINDOWPLACEMENT</a>*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-windowplacement">WINDOWPLACEMENT</a> structure that specifies the new show state and window positions. Before calling <b>SetWindowPlacement</b>, set the <b>length</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-windowplacement">WINDOWPLACEMENT</a> structure to sizeof(<b>WINDOWPLACEMENT</b>). <b>SetWindowPlacement</b> fails if the <b>length</b> member is not set correctly.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowplacement#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowplacement">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetWindowPlacement(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.WINDOWPLACEMENT* lpwndpl);

		/// <inheritdoc cref="GetWindowDisplayAffinity(winmdroot.Foundation.HWND, uint*)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe winmdroot.Foundation.BOOL GetWindowDisplayAffinity(winmdroot.Foundation.HWND hWnd, out uint pdwAffinity)
		{
			fixed (uint* pdwAffinityLocal = &pdwAffinity)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetWindowDisplayAffinity(hWnd, pdwAffinityLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the current display affinity setting, from any process, for a given window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowdisplayaffinity#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pdwAffinity">
		/// <para>Type: <b>DWORD*</b> A pointer to a variable that receives the display affinity setting. See <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowdisplayaffinity">SetWindowDisplayAffinity</a> for a list of affinity settings and their meanings.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowdisplayaffinity#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> This function succeeds only when the window is layered and Desktop Windows Manager is composing the desktop. If this function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowdisplayaffinity">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetWindowDisplayAffinity(winmdroot.Foundation.HWND hWnd, uint* pdwAffinity);

		/// <summary>Stores the display affinity setting in kernel mode on the hWnd associated with the window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the top-level window. The window must belong to the current process.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowdisplayaffinity#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwAffinity">
		/// <para>Type: <b>DWORD</b> The display affinity setting that specifies where the content of the window can be displayed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowdisplayaffinity#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> when, for example, the function call is made on a non top-level window. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowdisplayaffinity">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern winmdroot.Foundation.BOOL SetWindowDisplayAffinity(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.WINDOW_DISPLAY_AFFINITY dwAffinity);

		/// <summary>Allocates memory for a multiple-window- position structure and returns the handle to the structure.</summary>
		/// <param name="nNumWindows">
		/// <para>Type: <b>int</b> The initial number of windows for which to store position information. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-deferwindowpos">DeferWindowPos</a> function increases the size of the structure, if necessary.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-begindeferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HDWP</b> If the function succeeds, the return value identifies the multiple-window-position structure. If insufficient system resources are available to allocate the structure, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-begindeferwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern nint BeginDeferWindowPos(int nNumWindows);

		/// <summary>Updates the specified multiple-window � position structure for the specified window.</summary>
		/// <param name="hWinPosInfo">
		/// <para>Type: <b>HDWP</b> A handle to a multiple-window – position structure that contains size and position information for one or more windows. This structure is returned by <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-begindeferwindowpos">BeginDeferWindowPos</a> or by the most recent call to <b>DeferWindowPos</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window for which update information is stored in the structure. All windows in a multiple-window – position structure must have the same parent.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndInsertAfter">Type: <b>HWND</b></param>
		/// <param name="x">
		/// <para>Type: <b>int</b> The x-coordinate of the window's upper-left corner.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="y">
		/// <para>Type: <b>int</b> The y-coordinate of the window's upper-left corner.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cx">
		/// <para>Type: <b>int</b> The window's new width, in pixels.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cy">
		/// <para>Type: <b>int</b> The window's new height, in pixels.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HDWP</b> The return value identifies the updated multiple-window – position structure. The handle returned by this function may differ from the handle passed to the function. The new handle that this function returns should be passed during the next call to the <b>DeferWindowPos</b> or <a href="/windows/desktop/api/winuser/nf-winuser-enddeferwindowpos">EndDeferWindowPos</a> function. If insufficient system resources are available for the function to succeed, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deferwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern nint DeferWindowPos(nint hWinPosInfo, winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.HWND hWndInsertAfter, int x, int y, int cx, int cy, winmdroot.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS uFlags);

		/// <summary>Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle.</summary>
		/// <param name="hWinPosInfo">
		/// <para>Type: <b>HDWP</b> A handle to a multiple-window – position structure that contains size and position information for one or more windows. This internal structure is returned by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-begindeferwindowpos">BeginDeferWindowPos</a> function or by the most recent call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-deferwindowpos">DeferWindowPos</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enddeferwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enddeferwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EndDeferWindowPos(nint hWinPosInfo);

		/// <summary>Determines the visibility state of the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindowvisible#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the specified window, its parent window, its parent's parent window, and so forth, have the <b>WS_VISIBLE</b> style, the return value is nonzero. Otherwise, the return value is zero. Because the return value specifies whether the window has the <b>WS_VISIBLE</b> style, it may be nonzero even if the window is totally obscured by other windows.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindowvisible">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsWindowVisible(winmdroot.Foundation.HWND hWnd);

		/// <summary>Determines whether the specified window is minimized (iconic).</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isiconic#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window is iconic, the return value is nonzero. If the window is not iconic, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isiconic">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsIconic(winmdroot.Foundation.HWND hWnd);

		/// <summary>Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If a pop-up window exists, the return value is nonzero, even if the pop-up window is completely covered by other windows. If a pop-up window does not exist, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-anypopup">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL AnyPopup();

		/// <summary>Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to bring to the top of the Z order.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-bringwindowtotop#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-bringwindowtotop">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL BringWindowToTop(winmdroot.Foundation.HWND hWnd);

		/// <summary>Determines whether a window is maximized.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iszoomed#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window is zoomed, the return value is nonzero. If the window is not zoomed, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iszoomed">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsZoomed(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="CreateDialogParam(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR, winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.DLGPROC, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.HWND CreateDialogParam(SafeHandle hInstance, string lpTemplateName, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpTemplateNameLocal = lpTemplateName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.Foundation.HWND __result = PInvoke.CreateDialogParam(hInstanceLocal, lpTemplateNameLocal, hWndParent, lpDialogFunc, dwInitParam);
					return __result;
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates a modeless dialog box from a dialog box template resource.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpTemplateName">
		/// <para>Type: <b>LPCTSTR</b> The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro to create this value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpDialogFunc">
		/// <para>Type: <b>DLGPROC</b> A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwInitParam">
		/// <para>Type: <b>LPARAM</b> The value to be passed to the dialog box procedure in the <i>lParam</i> parameter in the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the window handle to the dialog box. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogparamw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateDialogParamW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND CreateDialogParam(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpTemplateName, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam);

		/// <inheritdoc cref="CreateDialogIndirectParam(winmdroot.Foundation.HINSTANCE, winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE*, winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.DLGPROC, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.HWND CreateDialogIndirectParam(SafeHandle hInstance, in winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE lpTemplate, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE* lpTemplateLocal = &lpTemplate)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.Foundation.HWND __result = PInvoke.CreateDialogIndirectParam(hInstanceLocal, lpTemplateLocal, hWndParent, lpDialogFunc, dwInitParam);
					return __result;
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates a modeless dialog box from a dialog box template in memory.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpTemplate">
		/// <para>Type: <b>LPCDLGTEMPLATE</b> The template <b>CreateDialogIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
		/// <para>In a standard template, the header is a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-dlgtemplate">DLGTEMPLATE</a> structure followed by additional variable-length arrays. The data for each control consists of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-dlgitemtemplate">DLGITEMTEMPLATE</a> structure followed by additional variable-length arrays. In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format. After <b>CreateDialogIndirectParam</b> returns, you can free the template, which is only used to get the dialog box started.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpDialogFunc">
		/// <para>Type: <b>DLGPROC</b> A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwInitParam">
		/// <para>Type: <b>LPARAM</b> The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the window handle to the dialog box. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createdialogindirectparamw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateDialogIndirectParamW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.HWND CreateDialogIndirectParam(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE* lpTemplate, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam);

		/// <inheritdoc cref="DialogBoxParam(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR, winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.DLGPROC, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe nint DialogBoxParam(SafeHandle hInstance, string lpTemplateName, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpTemplateNameLocal = lpTemplateName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					nint __result = PInvoke.DialogBoxParam(hInstanceLocal, lpTemplateNameLocal, hWndParent, lpDialogFunc, dwInitParam);
					return __result;
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates a modal dialog box from a dialog box template resource.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpTemplateName">
		/// <para>Type: <b>LPCTSTR</b> The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro to create this value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpDialogFunc">
		/// <para>Type: <b>DLGPROC</b> A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwInitParam">
		/// <para>Type: <b>LPARAM</b> The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>INT_PTR</b> If the function succeeds, the return value is the value of the <i>nResult</i> parameter specified in the call to the <a href="/windows/desktop/api/winuser/nf-winuser-enddialog">EndDialog</a> function used to terminate the dialog box. If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxparamw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DialogBoxParamW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern nint DialogBoxParam(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpTemplateName, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam);

		/// <inheritdoc cref="DialogBoxIndirectParam(winmdroot.Foundation.HINSTANCE, winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE*, winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.DLGPROC, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe nint DialogBoxIndirectParam(SafeHandle hInstance, in winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE hDialogTemplate, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE* hDialogTemplateLocal = &hDialogTemplate)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					nint __result = PInvoke.DialogBoxIndirectParam(hInstanceLocal, hDialogTemplateLocal, hWndParent, lpDialogFunc, dwInitParam);
					return __result;
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates a modal dialog box from a dialog box template in memory.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the module that creates the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hDialogTemplate">
		/// <para>Type: <b>LPCDLGTEMPLATE</b> The template that <b>DialogBoxIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
		/// <para>In a standard template for a dialog box, the header is a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-dlgtemplate">DLGTEMPLATE</a> structure followed by additional variable-length arrays. The data for each control consists of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-dlgitemtemplate">DLGITEMTEMPLATE</a> structure followed by additional variable-length arrays. In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpDialogFunc">
		/// <para>Type: <b>DLGPROC</b> A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwInitParam">
		/// <para>Type: <b>LPARAM</b> The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com/windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxindirectparamw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>INT_PTR</b> If the function succeeds, the return value is the <i>nResult</i> parameter specified in the call to the <a href="/windows/desktop/api/winuser/nf-winuser-enddialog">EndDialog</a> function that was used to terminate the dialog box. If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dialogboxindirectparamw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DialogBoxIndirectParamW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe nint DialogBoxIndirectParam(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.UI.WindowsAndMessaging.DLGTEMPLATE* hDialogTemplate, winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.DLGPROC lpDialogFunc, winmdroot.Foundation.LPARAM dwInitParam);

		/// <summary>Destroys a modal dialog box, causing the system to end any processing for the dialog box.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box to be destroyed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enddialog#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nResult">
		/// <para>Type: <b>INT_PTR</b> The value to be returned to the application from the function that created the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enddialog#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enddialog">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EndDialog(winmdroot.Foundation.HWND hDlg, nint nResult);

		/// <summary>Retrieves a handle to a control in the specified dialog box.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box that contains the control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDDlgItem">
		/// <para>Type: <b>int</b> The identifier of the control to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the window handle of the specified control. If the function fails, the return value is <b>NULL</b>, indicating an invalid dialog box handle or a nonexistent control. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetDlgItem(winmdroot.Foundation.HWND hDlg, int nIDDlgItem);

		/// <summary>Sets the text of a control in a dialog box to the string representation of a specified integer value.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box that contains the control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDDlgItem">
		/// <para>Type: <b>int</b> The control to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uValue">
		/// <para>Type: <b>UINT</b> The integer value used to generate the item text.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bSigned">
		/// <para>Type: <b>BOOL</b> Indicates whether the <i>uValue</i> parameter is signed or unsigned. If this parameter is <b>TRUE</b>, <i>uValue</i> is signed. If this parameter is <b>TRUE</b> and <i>uValue</i> is less than zero, a minus sign is placed before the first digit in the string. If this parameter is <b>FALSE</b>, <i>uValue</i> is unsigned.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetDlgItemInt(winmdroot.Foundation.HWND hDlg, int nIDDlgItem, uint uValue, winmdroot.Foundation.BOOL bSigned);

		/// <summary>Translates the text of a specified control in a dialog box into an integer value.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box that contains the control of interest.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDDlgItem">
		/// <para>Type: <b>int</b> The identifier of the control whose text is to be translated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpTranslated">
		/// <para>Type: <b>BOOL*</b> Indicates success or failure (<b>TRUE</b> indicates success, <b>FALSE</b> indicates failure). If this parameter is <b>NULL</b>, the function returns no information about success or failure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bSigned">
		/// <para>Type: <b>BOOL</b> Indicates whether the function should examine the text for a minus sign at the beginning and return a signed integer value if it finds one (<b>TRUE</b> specifies this should be done, <b>FALSE</b> that it should not).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the variable pointed to by <i>lpTranslated</i> is set to <b>TRUE</b>, and the return value is the translated value of the control text. If the function fails, the variable pointed to by <i>lpTranslated</i> is set to <b>FALSE</b>, and the return value is zero. Note that, because zero is a possible translated value, a return value of zero does not by itself indicate failure. If <i>lpTranslated</i> is <b>NULL</b>, the function returns no information about success or failure. Note that, if the <i>bSigned</i> parameter is <b>TRUE</b> and there is a minus sign (–) at the beginning of the text, <b>GetDlgItemInt</b> translates the text into a signed integer value. Otherwise, the function creates an unsigned integer value. To obtain the proper value in this case, cast the return value to an <b>int</b> type. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint GetDlgItemInt(winmdroot.Foundation.HWND hDlg, int nIDDlgItem, [Optional] winmdroot.Foundation.BOOL* lpTranslated, winmdroot.Foundation.BOOL bSigned);

		/// <inheritdoc cref="SetDlgItemText(winmdroot.Foundation.HWND, int, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetDlgItemText(winmdroot.Foundation.HWND hDlg, int nIDDlgItem, string lpString)
		{
			fixed (char* lpStringLocal = lpString)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.SetDlgItemText(hDlg, nIDDlgItem, lpStringLocal);
				return __result;
			}
		}

		/// <summary>Sets the title or text of a control in a dialog box.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box that contains the control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDDlgItem">
		/// <para>Type: <b>int</b> The control with a title or text to be set.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPCTSTR</b> The text to be copied to the control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdlgitemtextw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetDlgItemTextW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetDlgItemText(winmdroot.Foundation.HWND hDlg, int nIDDlgItem, winmdroot.Foundation.PCWSTR lpString);

		/// <summary>Retrieves the title or text associated with a control in a dialog box.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box that contains the control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDDlgItem">
		/// <para>Type: <b>int</b> The identifier of the control whose title or text is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPTSTR</b> The buffer to receive the title or text.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchMax">
		/// <para>Type: <b>int</b> The maximum length, in characters, of the string to be copied to the buffer pointed to by <i>lpString</i>. If the length of the string, including the null character, exceeds the limit, the string is truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgitemtextw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetDlgItemTextW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetDlgItemText(winmdroot.Foundation.HWND hDlg, int nIDDlgItem, winmdroot.Foundation.PWSTR lpString, int cchMax);

		/// <summary>Sends a message to the specified control in a dialog box.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box that contains the control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-senddlgitemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDDlgItem">
		/// <para>Type: <b>int</b> The identifier of the control that receives the message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-senddlgitemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-senddlgitemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-senddlgitemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-senddlgitemmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value specifies the result of the message processing and depends on the message sent.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-senddlgitemmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SendDlgItemMessageW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT SendDlgItemMessage(winmdroot.Foundation.HWND hDlg, int nIDDlgItem, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box to be searched.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlggroupitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hCtl">
		/// <para>Type: <b>HWND</b> A handle to the control to be used as the starting point for the search. If this parameter is <b>NULL</b>, the function uses the last (or first) control in the dialog box as the starting point for the search.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlggroupitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bPrevious">
		/// <para>Type: <b>BOOL</b> Indicates how the function is to search the group of controls in the dialog box. If this parameter is <b>TRUE</b>, the function searches for the previous control in the group. If it is <b>FALSE</b>, the function searches for the next control in the group.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlggroupitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the previous (or next) control in the group of controls. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlggroupitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetNextDlgGroupItem(winmdroot.Foundation.HWND hDlg, winmdroot.Foundation.HWND hCtl, winmdroot.Foundation.BOOL bPrevious);

		/// <summary>Retrieves a handle to the first control that has the WS_TABSTOP style that precedes (or follows) the specified control.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box to be searched.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlgtabitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hCtl">
		/// <para>Type: <b>HWND</b> A handle to the control to be used as the starting point for the search. If this parameter is <b>NULL</b>, the function fails.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlgtabitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bPrevious">
		/// <para>Type: <b>BOOL</b> Indicates how the function is to search the dialog box. If this parameter is <b>TRUE</b>, the function searches for the previous control in the dialog box. If this parameter is <b>FALSE</b>, the function searches for the next control in the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlgtabitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the window handle of the previous (or next) control that has the <a href="/windows/desktop/dlgbox/dlgbox-programming-considerations">WS_TABSTOP</a> style set. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getnextdlgtabitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetNextDlgTabItem(winmdroot.Foundation.HWND hDlg, winmdroot.Foundation.HWND hCtl, winmdroot.Foundation.BOOL bPrevious);

		/// <summary>Retrieves the identifier of the specified control.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgctrlid#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the identifier of the control. If the function fails, the return value is zero. An invalid value for the <i>hwndCtl</i> parameter, for example, will cause the function to fail. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdlgctrlid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetDlgCtrlID(winmdroot.Foundation.HWND hWnd);

		/// <summary>Retrieves the system's dialog base units, which are the average width and height of characters in the system font.</summary>
		/// <returns>
		/// <para>Type: <b>LONG</b> The function returns the dialog base units. The low-order word of the return value contains the horizontal dialog box base unit, and the high-order word contains the vertical dialog box base unit.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdialogbaseunits">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetDialogBaseUnits();

		/// <summary>Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defdlgprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		/// <para>Type: <b>UINT</b> The message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defdlgprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defdlgprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defdlgprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value specifies the result of the message processing and depends on the message sent.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defdlgprocw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DefDlgProcW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT DefDlgProc(winmdroot.Foundation.HWND hDlg, uint Msg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="CallMsgFilter(winmdroot.UI.WindowsAndMessaging.MSG*, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL CallMsgFilter(in winmdroot.UI.WindowsAndMessaging.MSG lpMsg, int nCode)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.CallMsgFilter(lpMsgLocal, nCode);
				return __result;
			}
		}

		/// <summary>Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.</summary>
		/// <param name="lpMsg">
		/// <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that contains the message to be passed to the hook procedures.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callmsgfilterw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nCode">
		/// <para>Type: <b>int</b> An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER</a> and <b>WH_MSGFILTER</b> hooks.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callmsgfilterw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the application should process the message further, the return value is zero. If the application should not process the message further, the return value is nonzero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callmsgfilterw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CallMsgFilterW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL CallMsgFilter(winmdroot.UI.WindowsAndMessaging.MSG* lpMsg, int nCode);

		/// <inheritdoc cref="CharToOem(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL CharToOem(string pSrc, winmdroot.Foundation.PSTR pDst)
		{
			fixed (char* pSrcLocal = pSrc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.CharToOem(pSrcLocal, pDst);
				return __result;
			}
		}

		/// <summary>Translates a string into the OEM-defined character set.Warning  Do not use.</summary>
		/// <param name="pSrc">
		/// <para>Type: <b>LPCTSTR</b> The null-terminated string to be translated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-chartooemw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pDst">
		/// <para>Type: <b>LPSTR</b> The destination buffer, which receives the translated string. If the <b>CharToOem</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOem</b> is being used as a wide-character function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-chartooemw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>ERROR_INVALID_ADDRESS</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-chartooemw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharToOemW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CharToOem(winmdroot.Foundation.PCWSTR pSrc, winmdroot.Foundation.PSTR pDst);

		/// <inheritdoc cref="OemToChar(winmdroot.Foundation.PCSTR, winmdroot.Foundation.PWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL OemToChar(string pSrc, winmdroot.Foundation.PWSTR pDst)
		{
			fixed (byte* pSrcLocal = pSrc is object ? global::System.Text.Encoding.UTF8.GetBytes(pSrc) : null)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.OemToChar(new winmdroot.Foundation.PCSTR (pSrcLocal), pDst);
				return __result;
			}
		}

		/// <summary>Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.Warning  Do not use.</summary>
		/// <param name="pSrc">
		/// <para>Type: <b>LPCSTR</b> A null-terminated string of characters from the OEM-defined character set.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemtocharw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pDst">
		/// <para>Type: <b>LPTSTR</b> The destination buffer, which receives the translated string. If the <b>OemToChar</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>OemToChar</b> is being used as a wide-character function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemtocharw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>ERROR_INVALID_ADDRESS</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemtocharw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "OemToCharW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL OemToChar(winmdroot.Foundation.PCSTR pSrc, winmdroot.Foundation.PWSTR pDst);

		/// <inheritdoc cref="CharToOemBuff(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PSTR, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL CharToOemBuff(string lpszSrc, winmdroot.Foundation.PSTR lpszDst, uint cchDstLength)
		{
			fixed (char* lpszSrcLocal = lpszSrc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.CharToOemBuff(lpszSrcLocal, lpszDst, cchDstLength);
				return __result;
			}
		}

		/// <summary>Translates a specified number of characters in a string into the OEM-defined character set.</summary>
		/// <param name="lpszSrc">
		/// <para>Type: <b>LPCTSTR</b> The null-terminated string to be translated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-chartooembuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszDst">
		/// <para>Type: <b>LPSTR</b> The buffer for the translated string. If the <b>CharToOemBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOemBuff</b> is being used as a wide-character function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-chartooembuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchDstLength">
		/// <para>Type: <b>DWORD</b> The number of characters to translate in the string identified by the <i>lpszSrc</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-chartooembuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>ERROR_INVALID_ADDRESS</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-chartooembuffw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharToOemBuffW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CharToOemBuff(winmdroot.Foundation.PCWSTR lpszSrc, winmdroot.Foundation.PSTR lpszDst, uint cchDstLength);

		/// <inheritdoc cref="OemToCharBuff(winmdroot.Foundation.PCSTR, winmdroot.Foundation.PWSTR, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL OemToCharBuff(string lpszSrc, winmdroot.Foundation.PWSTR lpszDst, uint cchDstLength)
		{
			fixed (byte* lpszSrcLocal = lpszSrc is object ? global::System.Text.Encoding.UTF8.GetBytes(lpszSrc) : null)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.OemToCharBuff(new winmdroot.Foundation.PCSTR (lpszSrcLocal), lpszDst, cchDstLength);
				return __result;
			}
		}

		/// <summary>Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.</summary>
		/// <param name="lpszSrc">
		/// <para>Type: <b>LPCSTR</b> One or more characters from the OEM-defined character set.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemtocharbuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszDst">
		/// <para>Type: <b>LPTSTR</b> The destination buffer, which receives the translated string. If the <b>OemToCharBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if the <b>OemToCharBuff</b> function is being used as a wide-character function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemtocharbuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchDstLength">
		/// <para>Type: <b>DWORD</b> The number of characters to be translated in the buffer identified by the <i>lpszSrc</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemtocharbuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>ERROR_INVALID_ADDRESS</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-oemtocharbuffw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "OemToCharBuffW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL OemToCharBuff(winmdroot.Foundation.PCSTR lpszSrc, winmdroot.Foundation.PWSTR lpszDst, uint cchDstLength);

		/// <inheritdoc cref="CharUpper(winmdroot.Foundation.PWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.PWSTR CharUpper(ref Span<char>lpsz)
		{
			if (lpsz.LastIndexOf('\0') == -1)throw new ArgumentException("Required null terminator missing.", "lpsz");
			fixed (char* plpsz = lpsz)
			{
				winmdroot.Foundation.PWSTR wstrlpsz = plpsz;
				winmdroot.Foundation.PWSTR __result = PInvoke.CharUpper(wstrlpsz);
				lpsz= lpsz.Slice(0, wstrlpsz.Length);
				return __result;
			}
		}

		/// <summary>Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.</summary>
		/// <param name="lpsz">
		/// <para>Type: <b>LPTSTR</b> A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charupperw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPTSTR</b> If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to <i>lpsz</i>. If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character. There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charupperw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharUpperW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.PWSTR CharUpper(winmdroot.Foundation.PWSTR lpsz);

		/// <inheritdoc cref="CharUpperBuff(winmdroot.Foundation.PWSTR, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint CharUpperBuff(ref Span<char>lpsz, uint cchLength)
		{
			if (lpsz.LastIndexOf('\0') == -1)throw new ArgumentException("Required null terminator missing.", "lpsz");
			fixed (char* plpsz = lpsz)
			{
				winmdroot.Foundation.PWSTR wstrlpsz = plpsz;
				uint __result = PInvoke.CharUpperBuff(wstrlpsz, cchLength);
				lpsz= lpsz.Slice(0, wstrlpsz.Length);
				return __result;
			}
		}

		/// <summary>Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.</summary>
		/// <param name="lpsz">
		/// <para>Type: <b>LPTSTR</b> A buffer containing one or more characters to be processed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charupperbuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchLength">
		/// <para>Type: <b>DWORD</b> The size, in characters, of the buffer pointed to by <i>lpsz</i>. The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by <i>cchLength</i>, even if one or more characters are null characters.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charupperbuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The return value is the number of characters processed. For example, if <b>CharUpperBuff</b>("Zenith of API Sets", 10) succeeds, the return value is 10.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charupperbuffw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharUpperBuffW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint CharUpperBuff(winmdroot.Foundation.PWSTR lpsz, uint cchLength);

		/// <inheritdoc cref="CharLower(winmdroot.Foundation.PWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.PWSTR CharLower(ref Span<char>lpsz)
		{
			if (lpsz.LastIndexOf('\0') == -1)throw new ArgumentException("Required null terminator missing.", "lpsz");
			fixed (char* plpsz = lpsz)
			{
				winmdroot.Foundation.PWSTR wstrlpsz = plpsz;
				winmdroot.Foundation.PWSTR __result = PInvoke.CharLower(wstrlpsz);
				lpsz= lpsz.Slice(0, wstrlpsz.Length);
				return __result;
			}
		}

		/// <summary>Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.</summary>
		/// <param name="lpsz">
		/// <para>Type: <b>LPTSTR</b> A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charlowerw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPTSTR</b> If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to <i>lpsz</i>. If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character. There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charlowerw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharLowerW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.PWSTR CharLower(winmdroot.Foundation.PWSTR lpsz);

		/// <inheritdoc cref="CharLowerBuff(winmdroot.Foundation.PWSTR, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint CharLowerBuff(ref Span<char>lpsz, uint cchLength)
		{
			if (lpsz.LastIndexOf('\0') == -1)throw new ArgumentException("Required null terminator missing.", "lpsz");
			fixed (char* plpsz = lpsz)
			{
				winmdroot.Foundation.PWSTR wstrlpsz = plpsz;
				uint __result = PInvoke.CharLowerBuff(wstrlpsz, cchLength);
				lpsz= lpsz.Slice(0, wstrlpsz.Length);
				return __result;
			}
		}

		/// <summary>Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.</summary>
		/// <param name="lpsz">
		/// <para>Type: <b>LPTSTR</b> A buffer containing one or more characters to be processed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charlowerbuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchLength">
		/// <para>Type: <b>DWORD</b> The size, in characters, of the buffer pointed to by <i>lpsz</i>. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of characters indicated by <i>cchLength</i>, even if one or more characters are null characters.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charlowerbuffw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The return value is the number of characters processed. For example, if <b>CharLowerBuff</b>("Acme of Operating Systems", 10) succeeds, the return value is 10.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charlowerbuffw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharLowerBuffW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint CharLowerBuff(winmdroot.Foundation.PWSTR lpsz, uint cchLength);

		/// <inheritdoc cref="CharNext(winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.PWSTR CharNext(string lpsz)
		{
			fixed (char* lpszLocal = lpsz)
			{
				winmdroot.Foundation.PWSTR __result = PInvoke.CharNext(lpszLocal);
				return __result;
			}
		}

		/// <summary>Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
		/// <param name="lpsz">
		/// <para>Type: <b>LPCTSTR</b> A character in a null-terminated string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charnextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPTSTR</b> The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string. If <i>lpsz</i> points to the terminating null character, the return value is equal to <i>lpsz</i>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charnextw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharNextW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.PWSTR CharNext(winmdroot.Foundation.PCWSTR lpsz);

		/// <inheritdoc cref="CharPrev(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.PWSTR CharPrev(string lpszStart, string lpszCurrent)
		{
			fixed (char* lpszCurrentLocal = lpszCurrent)
			{
				fixed (char* lpszStartLocal = lpszStart)
				{
					winmdroot.Foundation.PWSTR __result = PInvoke.CharPrev(lpszStartLocal, lpszCurrentLocal);
					return __result;
				}
			}
		}

		/// <summary>Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
		/// <param name="lpszStart">
		/// <para>Type: <b>LPCTSTR</b> The beginning of the string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charprevw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszCurrent">
		/// <para>Type: <b>LPCTSTR</b> A character in a null-terminated string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charprevw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LPTSTR</b> The return value is a pointer to the preceding character in the string, or to the first character in the string if the <i>lpszCurrent</i> parameter equals the <i>lpszStart</i> parameter.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-charprevw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CharPrevW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.PWSTR CharPrev(winmdroot.Foundation.PCWSTR lpszStart, winmdroot.Foundation.PCWSTR lpszCurrent);

		/// <summary>Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
		/// <param name="ch">
		/// <para>Type: <b>TCHAR</b> The character to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischaralphaw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the character is alphabetical, the return value is nonzero. If the character is not alphabetical, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischaralphaw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "IsCharAlphaW", SetLastError = true, CharSet = CharSet.Unicode)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsCharAlpha(char ch);

		/// <summary>Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
		/// <param name="ch">
		/// <para>Type: <b>TCHAR</b> The character to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischaralphanumericw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the character is alphanumeric, the return value is nonzero. If the character is not alphanumeric, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischaralphanumericw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "IsCharAlphaNumericW", SetLastError = true, CharSet = CharSet.Unicode)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsCharAlphaNumeric(char ch);

		/// <summary>Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
		/// <param name="ch">
		/// <para>Type: <b>TCHAR</b> The character to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischarupperw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the character is uppercase, the return value is nonzero. If the character is not uppercase, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ischarupperw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "IsCharUpperW", SetLastError = true, CharSet = CharSet.Unicode)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsCharUpper(char ch);

		/// <summary>Determines whether there are mouse-button or keyboard messages in the calling thread's message queue.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the queue contains one or more new mouse-button or keyboard messages, the return value is nonzero. If there are no new mouse-button or keyboard messages in the queue, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getinputstate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL GetInputState();

		/// <summary>Retrieves the type of messages found in the calling thread's message queue.</summary>
		/// <param name="flags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The high-order word of the return value indicates the types of messages currently in the queue. The low-order word indicates the types of messages that have been added to the queue and that are still in the queue since the last call to the <b>GetQueueStatus</b>, <a href="/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a>, or <a href="/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getqueuestatus">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetQueueStatus(winmdroot.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS flags);

		/// <inheritdoc cref="MsgWaitForMultipleObjects(uint, winmdroot.Foundation.HANDLE*, winmdroot.Foundation.BOOL, uint, winmdroot.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint MsgWaitForMultipleObjects(ReadOnlySpan<winmdroot.Foundation.HANDLE> pHandles, winmdroot.Foundation.BOOL fWaitAll, uint dwMilliseconds, winmdroot.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS dwWakeMask)
		{
			fixed (winmdroot.Foundation.HANDLE* pHandlesLocal = pHandles)
			{
				uint __result = PInvoke.MsgWaitForMultipleObjects((uint )pHandles.Length, pHandlesLocal, fWaitAll, dwMilliseconds, dwWakeMask);
				return __result;
			}
		}

		/// <summary>Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects.</summary>
		/// <param name="nCount">The number of object handles in the array pointed to by <i>pHandles</i>. The maximum number of object handles is <b>MAXIMUM_WAIT_OBJECTS</b> minus one. If this parameter has the value zero, then the function waits only for an input event.</param>
		/// <param name="pHandles">
		/// <para>An array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. It may not contain multiple copies of the same handle.</para>
		/// <para>If one of these handles is closed while the wait is still pending, the function's behavior is undefined. The handles must have the <b>SYNCHRONIZE</b> access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-msgwaitformultipleobjects#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fWaitAll">If this parameter is <b>TRUE</b>, the function returns when the states of all objects in the <i>pHandles</i> array have been set to signaled and an input event has been received. If this parameter is <b>FALSE</b>, the function returns when the state of any one of the objects is set to signaled or an input event has been received. In this case, the return value indicates the object whose state caused the function to return.</param>
		/// <param name="dwMilliseconds">
		/// <para>The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses. If <i>dwMilliseconds</i> is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately. If <i>dwMilliseconds</i> is <b>INFINITE</b>, the function will return only when the specified objects are signaled. <b>Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2:  </b>The <i>dwMilliseconds</i> value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep. <b>Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2016:  </b>The <i>dwMilliseconds</i> value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-msgwaitformultipleobjects#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwWakeMask"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value indicates the event that caused the function to return. It can be one of the following values. (Note that <b>WAIT_OBJECT_0</b> is defined as 0 and <b>WAIT_ABANDONED_0</b> is defined as 0x00000080L.) </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-msgwaitformultipleobjects">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe uint MsgWaitForMultipleObjects(uint nCount, [Optional] winmdroot.Foundation.HANDLE* pHandles, winmdroot.Foundation.BOOL fWaitAll, uint dwMilliseconds, winmdroot.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS dwWakeMask);

		/// <inheritdoc cref="MsgWaitForMultipleObjectsEx(uint, winmdroot.Foundation.HANDLE*, uint, winmdroot.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS, winmdroot.UI.WindowsAndMessaging.MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe uint MsgWaitForMultipleObjectsEx(ReadOnlySpan<winmdroot.Foundation.HANDLE> pHandles, uint dwMilliseconds, winmdroot.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS dwWakeMask, winmdroot.UI.WindowsAndMessaging.MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS dwFlags)
		{
			fixed (winmdroot.Foundation.HANDLE* pHandlesLocal = pHandles)
			{
				uint __result = PInvoke.MsgWaitForMultipleObjectsEx((uint )pHandles.Length, pHandlesLocal, dwMilliseconds, dwWakeMask, dwFlags);
				return __result;
			}
		}

		/// <summary>Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The array of objects can include input event objects.</summary>
		/// <param name="nCount">The number of object handles in the array pointed to by <i>pHandles</i>. The maximum number of object handles is <b>MAXIMUM_WAIT_OBJECTS</b> minus one. If this parameter has the value zero, then the function waits only for an input event.</param>
		/// <param name="pHandles">
		/// <para>An array of object handles. For a list of the object types whose handles you can specify, see the Remarks section later in this topic. The array can contain handles to multiple types of objects. It may not contain multiple copies of the same handle.</para>
		/// <para>If one of these handles is closed while the wait is still pending, the function's behavior is undefined. The handles must have the <b>SYNCHRONIZE</b> access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-msgwaitformultipleobjectsex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwMilliseconds">
		/// <para>The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled, an I/O completion routine or APC is queued, or the interval elapses. If <i>dwMilliseconds</i> is zero, the function does not enter a wait state if the criteria is not met; it always returns immediately. If <i>dwMilliseconds</i> is <b>INFINITE</b>, the function will return only when the specified objects are signaled or an I/O completion routine or APC is queued. <b>Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2:  </b>The <i>dwMilliseconds</i> value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep. <b>Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2016:  </b>The <i>dwMilliseconds</i> value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-msgwaitformultipleobjectsex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwWakeMask"></param>
		/// <param name="dwFlags"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value indicates the event that caused the function to return. It can be one of the following values. (Note that <b>WAIT_OBJECT_0</b> is defined as 0 and <b>WAIT_ABANDONED_0</b> is defined as 0x00000080L.) </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-msgwaitformultipleobjectsex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe uint MsgWaitForMultipleObjectsEx(uint nCount, [Optional] winmdroot.Foundation.HANDLE* pHandles, uint dwMilliseconds, winmdroot.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS dwWakeMask, winmdroot.UI.WindowsAndMessaging.MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS dwFlags);

		/// <summary>Creates a timer with the specified time-out value.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a <b>NULL</b> value for <i>hWnd</i> is passed in along with an <i>nIDEvent</i> of an existing timer, that timer will be replaced in the same way that an existing non-NULL <i>hWnd</i> timer will be.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-settimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDEvent">
		/// <para>Type: <b>UINT_PTR</b> A nonzero timer identifier. If the <i>hWnd</i> parameter is <b>NULL</b>, and the <i>nIDEvent</i> does not match an existing timer then it is ignored and a new timer ID is generated. If the <i>hWnd</i> parameter is not <b>NULL</b> and the window specified by <i>hWnd</i> already has a timer with the value <i>nIDEvent</i>, then the existing timer is replaced by the new timer. When <b>SetTimer</b> replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, <i>nIDEvent</i> should be 0 if the <i>hWnd</i> is <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-settimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uElapse">
		/// <para>Type: <b>UINT</b> The time-out value, in milliseconds. If <i>uElapse</i> is less than <b>USER_TIMER_MINIMUM</b> (0x0000000A), the timeout is set to <b>USER_TIMER_MINIMUM</b>. If <i>uElapse</i> is greater than <b>USER_TIMER_MAXIMUM</b> (0x7FFFFFFF), the timeout is set to <b>USER_TIMER_MAXIMUM</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-settimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpTimerFunc">
		/// <para>Type: <b>TIMERPROC</b> A pointer to the function to be notified when the time-out value elapses. For more information about the function, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. If <i>lpTimerFunc</i> is <b>NULL</b>, the system posts a <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-timer">WM_TIMER</a> message to the application queue. The <b>hwnd</b> member of the message's <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure contains the value of the <i>hWnd</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-settimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT_PTR</b> If the function succeeds and the <i>hWnd</i> parameter is <b>NULL</b>, the return value is an integer identifying the new timer. An application can pass this value to the <a href="/windows/desktop/api/winuser/nf-winuser-killtimer">KillTimer</a> function to destroy the timer. If the function succeeds and the <i>hWnd</i> parameter is not <b>NULL</b>, then the return value is a nonzero integer. An application can pass the value of the <i>nIDEvent</i> parameter to the <a href="/windows/desktop/api/winuser/nf-winuser-killtimer">KillTimer</a> function to destroy the timer. If the function fails to create a timer, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-settimer">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern nuint SetTimer(winmdroot.Foundation.HWND hWnd, nuint nIDEvent, uint uElapse, winmdroot.UI.WindowsAndMessaging.TIMERPROC lpTimerFunc);

		/// <summary>Creates a timer with the specified time-out value and coalescing tolerance delay.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a <b>NULL</b> value for <i>hWnd</i> is passed in along with an <i>nIDEvent</i> of an existing timer, that timer will be replaced in the same way that an existing non-NULL <i>hWnd</i> timer will be.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcoalescabletimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIDEvent">
		/// <para>Type: <b>UINT_PTR</b> A timer identifier. If the <i>hWnd</i> parameter is <b>NULL</b>, and the <i>nIDEvent</i> does not match an existing timer, then the <i>nIDEvent</i> is ignored and a new timer ID is generated. If the <i>hWnd</i> parameter is not <b>NULL</b> and the window specified by <i>hWnd</i> already has a timer with the value <i>nIDEvent</i>, then the existing timer is replaced by the new timer. When <b>SetCoalescableTimer</b> replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, <i>nIDEvent</i> should be 0 if the <i>hWnd</i> is <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcoalescabletimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uElapse">
		/// <para>Type: <b>UINT</b> The time-out value, in milliseconds. If <i>uElapse</i> is less than <b>USER_TIMER_MINIMUM</b> (0x0000000A), the timeout is set to <b>USER_TIMER_MINIMUM</b>. If <i>uElapse</i> is greater than <b>USER_TIMER_MAXIMUM</b> (0x7FFFFFFF), the timeout is set to <b>USER_TIMER_MAXIMUM</b>. If the sum of <i>uElapse</i> and <i>uToleranceDelay</i> exceeds <b>USER_TIMER_MAXIMUM</b>, an ERROR_INVALID_PARAMETER exception occurs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcoalescabletimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpTimerFunc">
		/// <para>Type: <b>TIMERPROC</b> A pointer to the function to be notified when the time-out value elapses. For more information about the function, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. If <i>lpTimerFunc</i> is <b>NULL</b>, the system posts a <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-timer">WM_TIMER</a> message to the application queue. The <b>hwnd</b> member of the message's <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure contains the value of the <i>hWnd</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcoalescabletimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uToleranceDelay">Type: <b>ULONG</b></param>
		/// <returns>
		/// <para>Type: <b>UINT_PTR</b> If the function succeeds and the <i>hWnd</i> parameter is <b>NULL</b>, the return value is an integer identifying the new timer. An application can pass this value to the <a href="/windows/desktop/api/winuser/nf-winuser-killtimer">KillTimer</a> function to destroy the timer. If the function succeeds and the <i>hWnd</i> parameter is not <b>NULL</b>, then the return value is a nonzero integer. An application can pass the value of the <i>nIDEvent</i> parameter to the <a href="/windows/desktop/api/winuser/nf-winuser-killtimer">KillTimer</a> function to destroy the timer. If the function fails to create a timer, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcoalescabletimer">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows8.0")]
		internal static extern nuint SetCoalescableTimer(winmdroot.Foundation.HWND hWnd, nuint nIDEvent, uint uElapse, winmdroot.UI.WindowsAndMessaging.TIMERPROC lpTimerFunc, uint uToleranceDelay);

		/// <summary>Destroys the specified timer.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window associated with the specified timer. This value must be the same as the <i>hWnd</i> value passed to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-settimer">SetTimer</a> function that created the timer.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-killtimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uIDEvent">
		/// <para>Type: <b>UINT_PTR</b> The timer to be destroyed. If the window handle passed to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-settimer">SetTimer</a> is valid, this parameter must be the same as the <i>nIDEvent</i> value passed to <b>SetTimer</b>. If the application calls <b>SetTimer</b> with <i>hWnd</i> set to <b>NULL</b>, this parameter must be the timer identifier returned by <b>SetTimer</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-killtimer#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-killtimer">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL KillTimer(winmdroot.Foundation.HWND hWnd, nuint uIDEvent);

		/// <summary>Determines whether the specified window is a native Unicode window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be tested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindowunicode#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window is a native Unicode window, the return value is nonzero. If the window is not a native Unicode window, the return value is zero. The window is a native ANSI window.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-iswindowunicode">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL IsWindowUnicode(winmdroot.Foundation.HWND hWnd);

		/// <summary>Destroys an accelerator table.</summary>
		/// <param name="hAccel">
		/// <para>Type: <b>HACCEL</b> A handle to the accelerator table to be destroyed. This handle must have been created by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createacceleratortablea">CreateAcceleratorTable</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadacceleratorsa">LoadAccelerators</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyacceleratortable#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. However, if the table has been loaded more than one call to <a href="/windows/desktop/api/winuser/nf-winuser-loadacceleratorsa">LoadAccelerators</a>, the function will return a nonzero value only when <b>DestroyAcceleratorTable</b> has been called an equal number of times. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyacceleratortable">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DestroyAcceleratorTable(winmdroot.UI.WindowsAndMessaging.HACCEL hAccel);

		/// <inheritdoc cref="LoadAccelerators(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyAcceleratorTableSafeHandle LoadAccelerators(SafeHandle hInstance, string lpTableName)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpTableNameLocal = lpTableName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.UI.WindowsAndMessaging.HACCEL __result = PInvoke.LoadAccelerators(hInstanceLocal, lpTableNameLocal);
					return new DestroyAcceleratorTableSafeHandle(__result, ownsHandle: true);
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Loads the specified accelerator table.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the module whose executable file contains the accelerator table to be loaded.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadacceleratorsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpTableName">
		/// <para>Type: <b>LPCTSTR</b> The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadacceleratorsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HACCEL</b> If the function succeeds, the return value is a handle to the loaded accelerator table. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadacceleratorsw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadAcceleratorsW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HACCEL LoadAccelerators(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpTableName);

		/// <inheritdoc cref="CreateAcceleratorTable(winmdroot.UI.WindowsAndMessaging.ACCEL*, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyAcceleratorTableSafeHandle CreateAcceleratorTable(Span<winmdroot.UI.WindowsAndMessaging.ACCEL> paccel)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.ACCEL* paccelLocal = paccel)
			{
				winmdroot.UI.WindowsAndMessaging.HACCEL __result = PInvoke.CreateAcceleratorTable(paccelLocal, paccel.Length);
				return new DestroyAcceleratorTableSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Creates an accelerator table.</summary>
		/// <param name="paccel">
		/// <para>Type: <b>LPACCEL</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-accel">ACCEL</a> structures that describes the accelerator table.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createacceleratortablew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cAccel">
		/// <para>Type: <b>int</b> The number of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-accel">ACCEL</a> structures in the array. This must be within the range 1 to 32767 or the function will fail.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createacceleratortablew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HACCEL</b> If the function succeeds, the return value is the handle to the created accelerator table; otherwise, it is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createacceleratortablew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateAcceleratorTableW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.UI.WindowsAndMessaging.HACCEL CreateAcceleratorTable(winmdroot.UI.WindowsAndMessaging.ACCEL* paccel, int cAccel);

		/// <inheritdoc cref="CopyAcceleratorTable(winmdroot.UI.WindowsAndMessaging.HACCEL, winmdroot.UI.WindowsAndMessaging.ACCEL*, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int CopyAcceleratorTable(SafeHandle hAccelSrc, Span<winmdroot.UI.WindowsAndMessaging.ACCEL> lpAccelDst)
		{
			bool hAccelSrcAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.ACCEL* lpAccelDstLocal = lpAccelDst)
				{
					winmdroot.UI.WindowsAndMessaging.HACCEL hAccelSrcLocal;
					if (hAccelSrc is object)
					{
						hAccelSrc.DangerousAddRef(ref hAccelSrcAddRef);
						hAccelSrcLocal = (winmdroot.UI.WindowsAndMessaging.HACCEL)hAccelSrc.DangerousGetHandle();
					}
					else
						hAccelSrcLocal = default(winmdroot.UI.WindowsAndMessaging.HACCEL);
					int __result = PInvoke.CopyAcceleratorTable(hAccelSrcLocal, lpAccelDstLocal, lpAccelDst.Length);
					return __result;
				}
			}
			finally
			{
				if (hAccelSrcAddRef)
					hAccelSrc.DangerousRelease();
			}
		}

		/// <summary>Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.</summary>
		/// <param name="hAccelSrc">
		/// <para>Type: <b>HACCEL</b> A handle to the accelerator table to copy.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyacceleratortablew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpAccelDst">
		/// <para>Type: <b>LPACCEL</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-accel">ACCEL</a> structures that receives the accelerator-table information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyacceleratortablew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cAccelEntries">
		/// <para>Type: <b>int</b> The number of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-accel">ACCEL</a> structures to copy to the buffer pointed to by the <i>lpAccelDst</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyacceleratortablew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If <i>lpAccelDst</i> is <b>NULL</b>, the return value specifies the number of accelerator-table entries in the original table. Otherwise, it specifies the number of accelerator-table entries that were copied.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyacceleratortablew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CopyAcceleratorTableW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int CopyAcceleratorTable(winmdroot.UI.WindowsAndMessaging.HACCEL hAccelSrc, [Optional] winmdroot.UI.WindowsAndMessaging.ACCEL* lpAccelDst, int cAccelEntries);

		/// <inheritdoc cref="TranslateAccelerator(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.HACCEL, winmdroot.UI.WindowsAndMessaging.MSG*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int TranslateAccelerator(winmdroot.Foundation.HWND hWnd, SafeHandle hAccTable, in winmdroot.UI.WindowsAndMessaging.MSG lpMsg)
		{
			bool hAccTableAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
				{
					winmdroot.UI.WindowsAndMessaging.HACCEL hAccTableLocal;
					if (hAccTable is object)
					{
						hAccTable.DangerousAddRef(ref hAccTableAddRef);
						hAccTableLocal = (winmdroot.UI.WindowsAndMessaging.HACCEL)hAccTable.DangerousGetHandle();
					}
					else
						hAccTableLocal = default(winmdroot.UI.WindowsAndMessaging.HACCEL);
					int __result = PInvoke.TranslateAccelerator(hWnd, hAccTableLocal, lpMsgLocal);
					return __result;
				}
			}
			finally
			{
				if (hAccTableAddRef)
					hAccTable.DangerousRelease();
			}
		}

		/// <summary>Processes accelerator keys for menu commands.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose messages are to be translated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translateacceleratorw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hAccTable">
		/// <para>Type: <b>HACCEL</b> A handle to the accelerator table. The accelerator table must have been loaded by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadacceleratorsa">LoadAccelerators</a> function or created by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createacceleratortablea">CreateAcceleratorTable</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translateacceleratorw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpMsg">
		/// <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that contains message information retrieved from the calling thread's message queue using the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translateacceleratorw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translateacceleratorw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "TranslateAcceleratorW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int TranslateAccelerator(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.HACCEL hAccTable, winmdroot.UI.WindowsAndMessaging.MSG* lpMsg);

		/// <summary>Retrieves the specified system metric or system configuration setting.</summary>
		/// <param name="nIndex">Type: <b>int</b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the requested system metric or configuration setting. If the function fails, the return value is 0. <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> does not provide extended error information.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetSystemMetrics(winmdroot.UI.WindowsAndMessaging.SYSTEM_METRICS_INDEX nIndex);

		/// <inheritdoc cref="LoadMenu(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyMenuSafeHandle LoadMenu(SafeHandle hInstance, string lpMenuName)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpMenuNameLocal = lpMenuName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.UI.WindowsAndMessaging.HMENU __result = PInvoke.LoadMenu(hInstanceLocal, lpMenuNameLocal);
					return new DestroyMenuSafeHandle(__result, ownsHandle: true);
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Loads the specified menu resource from the executable (.exe) file associated with an application instance.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the module containing the menu resource to be loaded.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpMenuName">
		/// <para>Type: <b>LPCTSTR</b> The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HMENU</b> If the function succeeds, the return value is a handle to the menu resource. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadmenuw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadMenuW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HMENU LoadMenu(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpMenuName);

		/// <inheritdoc cref="LoadMenuIndirect(void*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyMenuSafeHandle LoadMenuIndirect_SafeHandle(void* lpMenuTemplate)
		{
			winmdroot.UI.WindowsAndMessaging.HMENU __result = PInvoke.LoadMenuIndirect(lpMenuTemplate);
			return new DestroyMenuSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Loads the specified menu template in memory.</summary>
		/// <param name="lpMenuTemplate">
		/// <para>Type: <b>const MENUTEMPLATE*</b> A pointer to a menu template or an extended menu template. A menu template consists of a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-menuitemtemplateheader">MENUITEMTEMPLATEHEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-menuitemtemplate">MENUITEMTEMPLATE</a> structures. An extended menu template consists of a <a href="https://docs.microsoft.com/windows/desktop/menurc/menuex-template-header">MENUEX_TEMPLATE_HEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com/windows/desktop/menurc/menuex-template-item">MENUEX_TEMPLATE_ITEM</a> structures.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadmenuindirectw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HMENU</b> If the function succeeds, the return value is a handle to the menu. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadmenuindirectw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadMenuIndirectW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.UI.WindowsAndMessaging.HMENU LoadMenuIndirect(void* lpMenuTemplate);

		/// <inheritdoc cref="GetMenu(winmdroot.Foundation.HWND)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyMenuSafeHandle GetMenu_SafeHandle(winmdroot.Foundation.HWND hWnd)
		{
			winmdroot.UI.WindowsAndMessaging.HMENU __result = PInvoke.GetMenu(hWnd);
			return new DestroyMenuSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Retrieves a handle to the menu assigned to the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose menu handle is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HMENU</b> The return value is a handle to the menu. If the specified window has no menu, the return value is <b>NULL</b>. If the window is a child window, the return value is undefined.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HMENU GetMenu(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="SetMenu(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.HMENU)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetMenu(winmdroot.Foundation.HWND hWnd, SafeHandle hMenu)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.SetMenu(hWnd, hMenuLocal);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Assigns a new menu to the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window to which the menu is to be assigned.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the new menu. If this parameter is <b>NULL</b>, the window's current menu is removed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetMenu(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.HMENU hMenu);

		/// <inheritdoc cref="ChangeMenu(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.Foundation.PCWSTR, uint, uint)"/>
		internal static unsafe winmdroot.Foundation.BOOL ChangeMenu(SafeHandle hMenu, uint cmd, string lpszNewItem, uint cmdInsert, uint flags)
		{
			bool hMenuAddRef = false;
			try
			{
				fixed (char* lpszNewItemLocal = lpszNewItem)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
					if (hMenu is object)
					{
						hMenu.DangerousAddRef(ref hMenuAddRef);
						hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
					}
					else
						hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.ChangeMenu(hMenuLocal, cmd, lpszNewItemLocal, cmdInsert, flags);
					return __result;
				}
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "ChangeMenuW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL ChangeMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint cmd, winmdroot.Foundation.PCWSTR lpszNewItem, uint cmdInsert, uint flags);

		/// <inheritdoc cref="HiliteMenuItem(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.HMENU, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL HiliteMenuItem(winmdroot.Foundation.HWND hWnd, SafeHandle hMenu, uint uIDHiliteItem, uint uHilite)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.HiliteMenuItem(hWnd, hMenuLocal, uIDHiliteItem, uHilite);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Adds or removes highlighting from an item in a menu bar.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that contains the menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-hilitemenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu bar that contains the item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-hilitemenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uIDHiliteItem">
		/// <para>Type: <b>UINT</b> The menu item. This parameter is either the identifier of the menu item or the offset of the menu item in the menu bar, depending on the value of the <i>uHilite</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-hilitemenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uHilite">
		/// <para>Type: <b>UINT</b> Controls the interpretation of the <i>uItemHilite</i> parameter and indicates whether the menu item is highlighted. This parameter must be a combination of either <b>MF_BYCOMMAND</b> or <b>MF_BYPOSITION</b> and <b>MF_HILITE</b> or <b>MF_UNHILITE</b>. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-hilitemenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the menu item is set to the specified highlight state, the return value is nonzero. If the menu item is not set to the specified highlight state, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-hilitemenuitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL HiliteMenuItem(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uIDHiliteItem, uint uHilite);

		/// <inheritdoc cref="GetMenuString(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.Foundation.PWSTR, int, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int GetMenuString(SafeHandle hMenu, uint uIDItem, winmdroot.Foundation.PWSTR lpString, int cchMax, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS flags)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				int __result = PInvoke.GetMenuString(hMenuLocal, uIDItem, lpString, cchMax, flags);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Copies the text string of the specified menu item into the specified buffer.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uIDItem">
		/// <para>Type: <b>UINT</b> The menu item to be changed, as determined by the <i>uFlag</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPTSTR</b> The buffer that receives the null-terminated string. If the string is as long or longer than <i>lpString</i>, the string is truncated and the terminating null character is added. If <i>lpString</i> is <b>NULL</b>, the function returns the length of the menu string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchMax">
		/// <para>Type: <b>int</b> The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the <i>nMaxCount</i> parameter, the extra characters are truncated. If <i>nMaxCount</i> is 0, the function returns the length of the menu string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustringw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="flags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character. If the function fails, the return value is zero. If the specified item is not of type <b>MIIM_STRING</b> or <b>MFT_STRING</b>, then the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustringw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetMenuStringW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetMenuString(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uIDItem, winmdroot.Foundation.PWSTR lpString, int cchMax, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS flags);

		/// <inheritdoc cref="GetMenuState(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint GetMenuState(SafeHandle hMenu, uint uId, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				uint __result = PInvoke.GetMenuState(hMenuLocal, uId, uFlags);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Retrieves the menu flags associated with the specified menu item.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu that contains the menu item whose flags are to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustate#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uId">
		/// <para>Type: <b>UINT</b> The menu item for which the menu flags are to be retrieved, as determined by the <i>uFlags</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustate#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the specified item does not exist, the return value is -1. If the menu item opens a submenu, the low-order byte of the return value contains the menu flags associated with the item, and the high-order byte contains the number of items in the submenu opened by the item. Otherwise, the return value is a mask (Bitwise OR) of the menu flags. Following are the menu flags associated with the menu item. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenustate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetMenuState(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uId, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags);

		/// <summary>Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose menu bar is to be redrawn.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawmenubar#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawmenubar">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DrawMenuBar(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="GetSystemMenu(winmdroot.Foundation.HWND, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyMenuSafeHandle GetSystemMenu_SafeHandle(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.BOOL bRevert)
		{
			winmdroot.UI.WindowsAndMessaging.HMENU __result = PInvoke.GetSystemMenu(hWnd, bRevert);
			return new DestroyMenuSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that will own a copy of the window menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bRevert">
		/// <para>Type: <b>BOOL</b> The action to be taken. If this parameter is <b>FALSE</b>, <b>GetSystemMenu</b> returns a handle to the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified. If this parameter is <b>TRUE</b>, <b>GetSystemMenu</b> resets the window menu back to the default state. The previous window menu, if any, is destroyed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HMENU</b> If the <i>bRevert</i> parameter is <b>FALSE</b>, the return value is a handle to a copy of the window menu. If the <i>bRevert</i> parameter is <b>TRUE</b>, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HMENU GetSystemMenu(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.BOOL bRevert);

		/// <inheritdoc cref="CreateMenu()"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyMenuSafeHandle CreateMenu_SafeHandle()
		{
			winmdroot.UI.WindowsAndMessaging.HMENU __result = PInvoke.CreateMenu();
			return new DestroyMenuSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions.</summary>
		/// <returns>
		/// <para>Type: <b>HMENU</b> If the function succeeds, the return value is a handle to the newly created menu. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HMENU CreateMenu();

		/// <inheritdoc cref="CreatePopupMenu()"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyMenuSafeHandle CreatePopupMenu_SafeHandle()
		{
			winmdroot.UI.WindowsAndMessaging.HMENU __result = PInvoke.CreatePopupMenu();
			return new DestroyMenuSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Creates a drop-down menu, submenu, or shortcut menu.</summary>
		/// <returns>
		/// <para>Type: <b>HMENU</b> If the function succeeds, the return value is a handle to the newly created menu. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createpopupmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HMENU CreatePopupMenu();

		/// <inheritdoc cref="CheckMenuItem(winmdroot.UI.WindowsAndMessaging.HMENU, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint CheckMenuItem(SafeHandle hMenu, uint uIDCheckItem, uint uCheck)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				uint __result = PInvoke.CheckMenuItem(hMenuLocal, uIDCheckItem, uCheck);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Sets the state of the specified menu item's check-mark attribute to either selected or clear.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu of interest.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uIDCheckItem">
		/// <para>Type: <b>UINT</b> The menu item whose check-mark attribute is to be set, as determined by the <i>uCheck</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uCheck">
		/// <para>Type: <b>UINT</b> The flags that control the interpretation of the <i>uIDCheckItem</i> parameter and the state of the menu item's check-mark attribute. This parameter can be a combination of either <b>MF_BYCOMMAND</b>, or <b>MF_BYPOSITION</b> and <b>MF_CHECKED</b> or <b>MF_UNCHECKED</b>. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The return value specifies the previous state of the menu item (either <b>MF_CHECKED</b> or <b>MF_UNCHECKED</b>). If the menu item does not exist, the return value is –1.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint CheckMenuItem(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uIDCheckItem, uint uCheck);

		/// <inheritdoc cref="EnableMenuItem(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EnableMenuItem(SafeHandle hMenu, uint uIDEnableItem, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uEnable)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.EnableMenuItem(hMenuLocal, uIDEnableItem, uEnable);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Enables, disables, or grays the specified menu item.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablemenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uIDEnableItem">
		/// <para>Type: <b>UINT</b> The menu item to be enabled, disabled, or grayed, as determined by the <i>uEnable</i> parameter. This parameter specifies an item in a menu bar, menu, or submenu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablemenuitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uEnable">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value specifies the previous state of the menu item (it is either <b>MF_DISABLED</b>, <b>MF_ENABLED</b>, or <b>MF_GRAYED</b>). If the menu item does not exist, the return value is -1.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enablemenuitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnableMenuItem(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uIDEnableItem, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uEnable);

		/// <inheritdoc cref="GetSubMenu(winmdroot.UI.WindowsAndMessaging.HMENU, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyMenuSafeHandle GetSubMenu(SafeHandle hMenu, int nPos)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.UI.WindowsAndMessaging.HMENU __result = PInvoke.GetSubMenu(hMenuLocal, nPos);
				return new DestroyMenuSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Retrieves a handle to the drop-down menu or submenu activated by the specified menu item.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsubmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nPos">
		/// <para>Type: <b>int</b> The zero-based relative position in the specified menu of an item that activates a drop-down menu or submenu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsubmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HMENU</b> If the function succeeds, the return value is a handle to the drop-down menu or submenu activated by the menu item. If the menu item does not activate a drop-down menu or submenu, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsubmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HMENU GetSubMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, int nPos);

		/// <inheritdoc cref="GetMenuItemID(winmdroot.UI.WindowsAndMessaging.HMENU, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint GetMenuItemID(SafeHandle hMenu, int nPos)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				uint __result = PInvoke.GetMenuItemID(hMenuLocal, nPos);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Retrieves the menu item identifier of a menu item located at the specified position in a menu.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu that contains the item whose identifier is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemid#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nPos">
		/// <para>Type: <b>int</b> The zero-based relative position of the menu item whose identifier is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemid#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> The return value is the identifier of the specified menu item. If the menu item identifier is <b>NULL</b> or if the specified item opens a submenu, the return value is -1.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetMenuItemID(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, int nPos);

		/// <inheritdoc cref="GetMenuItemCount(winmdroot.UI.WindowsAndMessaging.HMENU)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int GetMenuItemCount(SafeHandle hMenu)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				int __result = PInvoke.GetMenuItemCount(hMenuLocal);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Determines the number of items in the specified menu.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu to be examined.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemcount#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value specifies the number of items in the menu. If the function fails, the return value is -1. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemcount">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetMenuItemCount(winmdroot.UI.WindowsAndMessaging.HMENU hMenu);

		/// <inheritdoc cref="InsertMenu(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, nuint, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL InsertMenu(SafeHandle hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, nuint uIDNewItem, string lpNewItem)
		{
			bool hMenuAddRef = false;
			try
			{
				fixed (char* lpNewItemLocal = lpNewItem)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
					if (hMenu is object)
					{
						hMenu.DangerousAddRef(ref hMenuAddRef);
						hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
					}
					else
						hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.InsertMenu(hMenuLocal, uPosition, uFlags, uIDNewItem, lpNewItemLocal);
					return __result;
				}
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Inserts a new menu item into a menu, moving other items down the menu.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uPosition">
		/// <para>Type: <b>UINT</b> The menu item before which the new menu item is to be inserted, as determined by the <i>uFlags</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">
		/// <para>Type: <b>UINT</b> Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uIDNewItem">
		/// <para>Type: <b>UINT_PTR</b> The identifier of the new menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpNewItem">
		/// <para>Type: <b>LPCTSTR</b> The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag, as follows. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "InsertMenuW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL InsertMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, nuint uIDNewItem, winmdroot.Foundation.PCWSTR lpNewItem);

		/// <inheritdoc cref="AppendMenu(winmdroot.UI.WindowsAndMessaging.HMENU, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, nuint, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL AppendMenu(SafeHandle hMenu, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, nuint uIDNewItem, string lpNewItem)
		{
			bool hMenuAddRef = false;
			try
			{
				fixed (char* lpNewItemLocal = lpNewItem)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
					if (hMenu is object)
					{
						hMenu.DangerousAddRef(ref hMenuAddRef);
						hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
					}
					else
						hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.AppendMenu(hMenuLocal, uFlags, uIDNewItem, lpNewItemLocal);
					return __result;
				}
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">Type: <b>UINT</b></param>
		/// <param name="uIDNewItem">
		/// <para>Type: <b>UINT_PTR</b> The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpNewItem">
		/// <para>Type: <b>LPCTSTR</b> The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "AppendMenuW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL AppendMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, nuint uIDNewItem, winmdroot.Foundation.PCWSTR lpNewItem);

		/// <inheritdoc cref="ModifyMenu(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, nuint, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL ModifyMenu(SafeHandle hMnu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, nuint uIDNewItem, string lpNewItem)
		{
			bool hMnuAddRef = false;
			try
			{
				fixed (char* lpNewItemLocal = lpNewItem)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hMnuLocal;
					if (hMnu is object)
					{
						hMnu.DangerousAddRef(ref hMnuAddRef);
						hMnuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMnu.DangerousGetHandle();
					}
					else
						hMnuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.ModifyMenu(hMnuLocal, uPosition, uFlags, uIDNewItem, lpNewItemLocal);
					return __result;
				}
			}
			finally
			{
				if (hMnuAddRef)
					hMnu.DangerousRelease();
			}
		}

		/// <summary>Changes an existing menu item.</summary>
		/// <param name="hMnu">
		/// <para>Type: <b>HMENU</b> A handle to the menu to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-modifymenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uPosition">
		/// <para>Type: <b>UINT</b> The menu item to be changed, as determined by the <i>uFlags</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-modifymenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">
		/// <para>Type: <b>UINT</b> Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-modifymenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uIDNewItem">
		/// <para>Type: <b>UINT_PTR</b> The identifier of the modified menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-modifymenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpNewItem">
		/// <para>Type: <b>LPCTSTR</b> The contents of the changed menu item. The interpretation of this parameter depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-modifymenuw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-modifymenuw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "ModifyMenuW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ModifyMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMnu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, nuint uIDNewItem, winmdroot.Foundation.PCWSTR lpNewItem);

		/// <inheritdoc cref="RemoveMenu(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL RemoveMenu(SafeHandle hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.RemoveMenu(hMenuLocal, uPosition, uFlags);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Deletes a menu item or detaches a submenu from the specified menu.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removemenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uPosition">
		/// <para>Type: <b>UINT</b> The menu item to be deleted, as determined by the <i>uFlags</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removemenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removemenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL RemoveMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags);

		/// <inheritdoc cref="DeleteMenu(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DeleteMenu(SafeHandle hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.DeleteMenu(hMenuLocal, uPosition, uFlags);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deletemenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uPosition">
		/// <para>Type: <b>UINT</b> The menu item to be deleted, as determined by the <i>uFlags</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deletemenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deletemenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DeleteMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags);

		/// <inheritdoc cref="SetMenuItemBitmaps(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, winmdroot.Graphics.Gdi.HBITMAP, winmdroot.Graphics.Gdi.HBITMAP)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetMenuItemBitmaps(SafeHandle hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, SafeHandle hBitmapUnchecked, SafeHandle hBitmapChecked)
		{
			bool hMenuAddRef = false;
			bool hBitmapUncheckedAddRef = false;
			bool hBitmapCheckedAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Graphics.Gdi.HBITMAP hBitmapUncheckedLocal;
				if (hBitmapUnchecked is object)
				{
					hBitmapUnchecked.DangerousAddRef(ref hBitmapUncheckedAddRef);
					hBitmapUncheckedLocal = (winmdroot.Graphics.Gdi.HBITMAP)hBitmapUnchecked.DangerousGetHandle();
				}
				else
					hBitmapUncheckedLocal = default(winmdroot.Graphics.Gdi.HBITMAP);
				winmdroot.Graphics.Gdi.HBITMAP hBitmapCheckedLocal;
				if (hBitmapChecked is object)
				{
					hBitmapChecked.DangerousAddRef(ref hBitmapCheckedAddRef);
					hBitmapCheckedLocal = (winmdroot.Graphics.Gdi.HBITMAP)hBitmapChecked.DangerousGetHandle();
				}
				else
					hBitmapCheckedLocal = default(winmdroot.Graphics.Gdi.HBITMAP);
				winmdroot.Foundation.BOOL __result = PInvoke.SetMenuItemBitmaps(hMenuLocal, uPosition, uFlags, hBitmapUncheckedLocal, hBitmapCheckedLocal);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
				if (hBitmapUncheckedAddRef)
					hBitmapUnchecked.DangerousRelease();
				if (hBitmapCheckedAddRef)
					hBitmapChecked.DangerousRelease();
			}
		}

		/// <summary>Associates the specified bitmap with a menu item. Whether the menu item is selected or clear, the system displays the appropriate bitmap next to the menu item.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu containing the item to receive new check-mark bitmaps.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuitembitmaps#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uPosition">
		/// <para>Type: <b>UINT</b> The menu item to be changed, as determined by the <i>uFlags</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuitembitmaps#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">Type: <b>UINT</b></param>
		/// <param name="hBitmapUnchecked">
		/// <para>Type: <b>HBITMAP</b> A handle to the bitmap displayed when the menu item is not selected.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuitembitmaps#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hBitmapChecked">
		/// <para>Type: <b>HBITMAP</b> A handle to the bitmap displayed when the menu item is selected.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuitembitmaps#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuitembitmaps">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetMenuItemBitmaps(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uPosition, winmdroot.UI.WindowsAndMessaging.MENU_ITEM_FLAGS uFlags, winmdroot.Graphics.Gdi.HBITMAP hBitmapUnchecked, winmdroot.Graphics.Gdi.HBITMAP hBitmapChecked);

		/// <summary>Retrieves the dimensions of the default check-mark bitmap.</summary>
		/// <returns>
		/// <para>Type: <b>LONG</b> The return value specifies the height and width, in pixels, of the default check-mark bitmap. The high-order word contains the height; the low-order word contains the width.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenucheckmarkdimensions">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetMenuCheckMarkDimensions();

		/// <inheritdoc cref="TrackPopupMenu(winmdroot.UI.WindowsAndMessaging.HMENU, winmdroot.UI.WindowsAndMessaging.TRACK_POPUP_MENU_FLAGS, int, int, int, winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL TrackPopupMenu(SafeHandle hMenu, winmdroot.UI.WindowsAndMessaging.TRACK_POPUP_MENU_FLAGS uFlags, int x, int y, int nReserved, winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.RECT? prcRect)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.RECT prcRectLocal = prcRect.HasValue ? prcRect.Value : default(winmdroot.Foundation.RECT);
				winmdroot.Foundation.BOOL __result = PInvoke.TrackPopupMenu(hMenuLocal, uFlags, x, y, nReserved, hWnd, prcRect.HasValue ? &prcRectLocal : null);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the shortcut menu to be displayed. The handle can be obtained by calling <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createpopupmenu">CreatePopupMenu</a> to create a new shortcut menu, or by calling <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getsubmenu">GetSubMenu</a> to retrieve a handle to a submenu associated with an existing menu item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">
		/// <para>Type: <b>UINT</b> Use zero of more of these flags to specify function options.</para>
		/// <para>Use one of the following flags to specify how the function positions the shortcut menu horizontally.</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="x">
		/// <para>Type: <b>int</b> The horizontal location of the shortcut menu, in screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="y">
		/// <para>Type: <b>int</b> The vertical location of the shortcut menu, in screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nReserved">
		/// <para>Type: <b>int</b> Reserved; must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a <a href="https://docs.microsoft.com/windows/desktop/menurc/wm-command">WM_COMMAND</a> message from the menu until the function returns. If you specify TPM_NONOTIFY in the <i>uFlags</i> parameter, the function does not send messages to the window identified by <i>hWnd</i>. However, you must still pass a window handle in <i>hWnd</i>. It can be any window handle from your application.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="prcRect">
		/// <para>Type: <b>const RECT*</b> Ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If you specify <b>TPM_RETURNCMD</b> in the <i>uFlags</i> parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, the return value is zero. If you do not specify <b>TPM_RETURNCMD</b> in the <i>uFlags</i> parameter, the return value is nonzero if the function succeeds and zero if it fails. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL TrackPopupMenu(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, winmdroot.UI.WindowsAndMessaging.TRACK_POPUP_MENU_FLAGS uFlags, int x, int y, int nReserved, winmdroot.Foundation.HWND hWnd, [Optional] winmdroot.Foundation.RECT* prcRect);

		/// <inheritdoc cref="TrackPopupMenuEx(winmdroot.UI.WindowsAndMessaging.HMENU, uint, int, int, winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.TPMPARAMS*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL TrackPopupMenuEx(SafeHandle hMenu, uint uFlags, int x, int y, winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.TPMPARAMS? lptpm)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.UI.WindowsAndMessaging.TPMPARAMS lptpmLocal = lptpm.HasValue ? lptpm.Value : default(winmdroot.UI.WindowsAndMessaging.TPMPARAMS);
				winmdroot.Foundation.BOOL __result = PInvoke.TrackPopupMenuEx(hMenuLocal, uFlags, x, y, hwnd, lptpm.HasValue ? &lptpmLocal : null);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the shortcut menu to be displayed. This handle can be obtained by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createpopupmenu">CreatePopupMenu</a> function to create a new shortcut menu or by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getsubmenu">GetSubMenu</a> function to retrieve a handle to a submenu associated with an existing menu item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uFlags">
		/// <para>Type: <b>UINT</b> Specifies function options.</para>
		/// <para>Use one of the following flags to specify how the function positions the shortcut menu horizontally.</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="x">
		/// <para>Type: <b>int</b> The horizontal location of the shortcut menu, in screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="y">
		/// <para>Type: <b>int</b> The vertical location of the shortcut menu, in screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a <a href="https://docs.microsoft.com/windows/desktop/menurc/wm-command">WM_COMMAND</a> message from the menu until the function returns. If you specify TPM_NONOTIFY in the <i>fuFlags</i> parameter, the function does not send messages to the window identified by <i>hwnd</i>. However, you must still pass a window handle in <i>hwnd</i>. It can be any window handle from your application.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lptpm">
		/// <para>Type: <b>LPTPMPARAMS</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-tpmparams">TPMPARAMS</a> structure that specifies an area of the screen the menu should not overlap. This parameter can be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If you specify <b>TPM_RETURNCMD</b> in the <i>fuFlags</i> parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, the return value is zero. If you do not specify <b>TPM_RETURNCMD</b> in the <i>fuFlags</i> parameter, the return value is nonzero if the function succeeds and zero if it fails. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL TrackPopupMenuEx(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uFlags, int x, int y, winmdroot.Foundation.HWND hwnd, [Optional] winmdroot.UI.WindowsAndMessaging.TPMPARAMS* lptpm);

		/// <inheritdoc cref="CalculatePopupWindowPosition(global::System.Drawing.Point*, winmdroot.Foundation.SIZE*, uint, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe winmdroot.Foundation.BOOL CalculatePopupWindowPosition(in global::System.Drawing.Point anchorPoint, in winmdroot.Foundation.SIZE windowSize, uint flags, winmdroot.Foundation.RECT? excludeRect, out winmdroot.Foundation.RECT popupWindowPosition)
		{
			fixed (winmdroot.Foundation.RECT* popupWindowPositionLocal = &popupWindowPosition)
			{
				fixed (winmdroot.Foundation.SIZE* windowSizeLocal = &windowSize)
				{
					fixed (global::System.Drawing.Point* anchorPointLocal = &anchorPoint)
					{
						winmdroot.Foundation.RECT excludeRectLocal = excludeRect.HasValue ? excludeRect.Value : default(winmdroot.Foundation.RECT);
						winmdroot.Foundation.BOOL __result = PInvoke.CalculatePopupWindowPosition(anchorPointLocal, windowSizeLocal, flags, excludeRect.HasValue ? &excludeRectLocal : null, popupWindowPositionLocal);
						return __result;
					}
				}
			}
		}

		/// <summary>Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle.</summary>
		/// <param name="anchorPoint">
		/// <para>Type: <b>const POINT*</b> The specified anchor point.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="windowSize">
		/// <para>Type: <b>const SIZE*</b> The specified window size.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="flags">
		/// <para>Type: <b>UINT</b> Use one of the following flags to specify how the function positions the pop-up window horizontally and vertically. The flags are the same as the vertical and horizontal positioning flags of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-trackpopupmenuex">TrackPopupMenuEx</a> function.</para>
		/// <para>Use one of the following flags to specify how the function positions the pop-up window horizontally.</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="excludeRect">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> A pointer to a structure that specifies the exclude rectangle. It can be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="popupWindowPosition">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> A pointer to a structure that specifies the pop-up window position.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL CalculatePopupWindowPosition(global::System.Drawing.Point* anchorPoint, winmdroot.Foundation.SIZE* windowSize, uint flags, [Optional] winmdroot.Foundation.RECT* excludeRect, winmdroot.Foundation.RECT* popupWindowPosition);

		/// <inheritdoc cref="GetMenuInfo(winmdroot.UI.WindowsAndMessaging.HMENU, winmdroot.UI.WindowsAndMessaging.MENUINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetMenuInfo(SafeHandle param0, ref winmdroot.UI.WindowsAndMessaging.MENUINFO param1)
		{
			bool param0AddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.MENUINFO* param1Local = &param1)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU param0Local;
					if (param0 is object)
					{
						param0.DangerousAddRef(ref param0AddRef);
						param0Local = (winmdroot.UI.WindowsAndMessaging.HMENU)param0.DangerousGetHandle();
					}
					else
						param0Local = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.GetMenuInfo(param0Local, param1Local);
					return __result;
				}
			}
			finally
			{
				if (param0AddRef)
					param0.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about a specified menu.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetMenuInfo(winmdroot.UI.WindowsAndMessaging.HMENU param0, winmdroot.UI.WindowsAndMessaging.MENUINFO* param1);

		/// <inheritdoc cref="SetMenuInfo(winmdroot.UI.WindowsAndMessaging.HMENU, winmdroot.UI.WindowsAndMessaging.MENUINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetMenuInfo(SafeHandle param0, in winmdroot.UI.WindowsAndMessaging.MENUINFO param1)
		{
			bool param0AddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.MENUINFO* param1Local = &param1)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU param0Local;
					if (param0 is object)
					{
						param0.DangerousAddRef(ref param0AddRef);
						param0Local = (winmdroot.UI.WindowsAndMessaging.HMENU)param0.DangerousGetHandle();
					}
					else
						param0Local = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.SetMenuInfo(param0Local, param1Local);
					return __result;
				}
			}
			finally
			{
				if (param0AddRef)
					param0.DangerousRelease();
			}
		}

		/// <summary>Sets information for a specified menu.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetMenuInfo(winmdroot.UI.WindowsAndMessaging.HMENU param0, winmdroot.UI.WindowsAndMessaging.MENUINFO* param1);

		/// <summary>Ends the calling thread's active menu.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-endmenu">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EndMenu();

		/// <inheritdoc cref="InsertMenuItem(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.Foundation.BOOL, winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL InsertMenuItem(SafeHandle hmenu, uint item, winmdroot.Foundation.BOOL fByPosition, in winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW lpmi)
		{
			bool hmenuAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW* lpmiLocal = &lpmi)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hmenuLocal;
					if (hmenu is object)
					{
						hmenu.DangerousAddRef(ref hmenuAddRef);
						hmenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hmenu.DangerousGetHandle();
					}
					else
						hmenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.InsertMenuItem(hmenuLocal, item, fByPosition, lpmiLocal);
					return __result;
				}
			}
			finally
			{
				if (hmenuAddRef)
					hmenu.DangerousRelease();
			}
		}

		/// <summary>Inserts a new menu item at the specified position in a menu.</summary>
		/// <param name="hmenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu in which the new menu item is inserted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuitemw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="item">
		/// <para>Type: <b>UINT</b> The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of <i>fByPosition</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuitemw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fByPosition">
		/// <para>Type: <b>BOOL</b> Controls the meaning of <i>item</i>. If this parameter is <b>FALSE</b>, <i>item</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com/windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuitemw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpmi">
		/// <para>Type: <b>LPCMENUITEMINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-menuiteminfoa">MENUITEMINFO</a> structure that contains information about the new menu item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuitemw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-insertmenuitemw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "InsertMenuItemW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL InsertMenuItem(winmdroot.UI.WindowsAndMessaging.HMENU hmenu, uint item, winmdroot.Foundation.BOOL fByPosition, winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW* lpmi);

		/// <inheritdoc cref="GetMenuItemInfo(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.Foundation.BOOL, winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetMenuItemInfo(SafeHandle hmenu, uint item, winmdroot.Foundation.BOOL fByPosition, ref winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW lpmii)
		{
			bool hmenuAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW* lpmiiLocal = &lpmii)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hmenuLocal;
					if (hmenu is object)
					{
						hmenu.DangerousAddRef(ref hmenuAddRef);
						hmenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hmenu.DangerousGetHandle();
					}
					else
						hmenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.GetMenuItemInfo(hmenuLocal, item, fByPosition, lpmiiLocal);
					return __result;
				}
			}
			finally
			{
				if (hmenuAddRef)
					hmenu.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about a menu item.</summary>
		/// <param name="hmenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu that contains the menu item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="item">
		/// <para>Type: <b>UINT</b> The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of <i>fByPosition</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fByPosition">
		/// <para>Type: <b>BOOL</b> The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com/windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpmii">
		/// <para>Type: <b>LPMENUITEMINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-menuiteminfoa">MENUITEMINFO</a> structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the <b>cbSize</b> member to <c>sizeof(MENUITEMINFO)</c> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuiteminfow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetMenuItemInfoW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetMenuItemInfo(winmdroot.UI.WindowsAndMessaging.HMENU hmenu, uint item, winmdroot.Foundation.BOOL fByPosition, winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW* lpmii);

		/// <inheritdoc cref="SetMenuItemInfo(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.Foundation.BOOL, winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetMenuItemInfo(SafeHandle hmenu, uint item, winmdroot.Foundation.BOOL fByPositon, in winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW lpmii)
		{
			bool hmenuAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW* lpmiiLocal = &lpmii)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hmenuLocal;
					if (hmenu is object)
					{
						hmenu.DangerousAddRef(ref hmenuAddRef);
						hmenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hmenu.DangerousGetHandle();
					}
					else
						hmenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.SetMenuItemInfo(hmenuLocal, item, fByPositon, lpmiiLocal);
					return __result;
				}
			}
			finally
			{
				if (hmenuAddRef)
					hmenu.DangerousRelease();
			}
		}

		/// <summary>Changes information about a menu item.</summary>
		/// <param name="hmenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu that contains the menu item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="item">
		/// <para>Type: <b>UINT</b> The identifier or position of the menu item to change. The meaning of this parameter depends on the value of <i>fByPosition</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fByPositon">
		/// <para>Type: <b>BOOL</b> The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com/windows/desktop/menurc/about-menus">About Menus</a> for more information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpmii">
		/// <para>Type: <b>LPMENUITEMINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-menuiteminfoa">MENUITEMINFO</a> structure that contains information about the menu item and specifies which menu item attributes to change.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuiteminfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenuiteminfow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetMenuItemInfoW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetMenuItemInfo(winmdroot.UI.WindowsAndMessaging.HMENU hmenu, uint item, winmdroot.Foundation.BOOL fByPositon, winmdroot.UI.WindowsAndMessaging.MENUITEMINFOW* lpmii);

		/// <inheritdoc cref="GetMenuDefaultItem(winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.UI.WindowsAndMessaging.GET_MENU_DEFAULT_ITEM_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint GetMenuDefaultItem(SafeHandle hMenu, uint fByPos, winmdroot.UI.WindowsAndMessaging.GET_MENU_DEFAULT_ITEM_FLAGS gmdiFlags)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				uint __result = PInvoke.GetMenuDefaultItem(hMenuLocal, fByPos, gmdiFlags);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Determines the default menu item on the specified menu.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu for which to retrieve the default menu item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenudefaultitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fByPos">
		/// <para>Type: <b>UINT</b> Indicates whether to retrieve the menu item's identifier or its position. If this parameter is <b>FALSE</b>, the identifier is returned. Otherwise, the position is returned.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenudefaultitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="gmdiFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is the identifier or position of the menu item. If the function fails, the return value is -1. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenudefaultitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetMenuDefaultItem(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint fByPos, winmdroot.UI.WindowsAndMessaging.GET_MENU_DEFAULT_ITEM_FLAGS gmdiFlags);

		/// <inheritdoc cref="SetMenuDefaultItem(winmdroot.UI.WindowsAndMessaging.HMENU, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetMenuDefaultItem(SafeHandle hMenu, uint uItem, uint fByPos)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.SetMenuDefaultItem(hMenuLocal, uItem, fByPos);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Sets the default menu item for the specified menu.</summary>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu to set the default item for.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenudefaultitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uItem">
		/// <para>Type: <b>UINT</b> The identifier or position of the new default menu item or -1 for no default item. The meaning of this parameter depends on the value of <i>fByPos</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenudefaultitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fByPos">
		/// <para>Type: <b>UINT</b> The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com/windows/desktop/menurc/about-menus">About Menus</a> for more information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenudefaultitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setmenudefaultitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetMenuDefaultItem(winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uItem, uint fByPos);

		/// <inheritdoc cref="GetMenuItemRect(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.HMENU, uint, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetMenuItemRect(winmdroot.Foundation.HWND hWnd, SafeHandle hMenu, uint uItem, out winmdroot.Foundation.RECT lprcItem)
		{
			bool hMenuAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* lprcItemLocal = &lprcItem)
				{
					winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
					if (hMenu is object)
					{
						hMenu.DangerousAddRef(ref hMenuAddRef);
						hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
					}
					else
						hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
					winmdroot.Foundation.BOOL __result = PInvoke.GetMenuItemRect(hWnd, hMenuLocal, uItem, lprcItemLocal);
					return __result;
				}
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Retrieves the bounding rectangle for the specified menu item.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window containing the menu. If this value is <b>NULL</b> and the <i>hMenu</i> parameter represents a popup menu, the function will find the menu window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to a menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uItem">
		/// <para>Type: <b>UINT</b> The zero-based position of the menu item.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lprcItem">
		/// <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the bounding rectangle of the specified menu item expressed in screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenuitemrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetMenuItemRect(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.HMENU hMenu, uint uItem, winmdroot.Foundation.RECT* lprcItem);

		/// <inheritdoc cref="MenuItemFromPoint(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.HMENU, global::System.Drawing.Point)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int MenuItemFromPoint(winmdroot.Foundation.HWND hWnd, SafeHandle hMenu, global::System.Drawing.Point ptScreen)
		{
			bool hMenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hMenuLocal;
				if (hMenu is object)
				{
					hMenu.DangerousAddRef(ref hMenuAddRef);
					hMenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hMenu.DangerousGetHandle();
				}
				else
					hMenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				int __result = PInvoke.MenuItemFromPoint(hWnd, hMenuLocal, ptScreen);
				return __result;
			}
			finally
			{
				if (hMenuAddRef)
					hMenu.DangerousRelease();
			}
		}

		/// <summary>Determines which menu item, if any, is at the specified location.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window containing the menu. If this value is <b>NULL</b> and the <i>hMenu</i> parameter represents a popup menu, the function will find the menu window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-menuitemfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hMenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu containing the menu items to hit test.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-menuitemfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="ptScreen">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> A structure that specifies the location to test. If <i>hMenu</i> specifies a menu bar, this parameter is in window coordinates. Otherwise, it is in client coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-menuitemfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> Returns the zero-based position of the menu item at the specified location or -1 if no menu item is at the specified location.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-menuitemfrompoint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int MenuItemFromPoint(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.HMENU hMenu, global::System.Drawing.Point ptScreen);

		/// <inheritdoc cref="DragObject(winmdroot.Foundation.HWND, winmdroot.Foundation.HWND, uint, nuint, winmdroot.UI.WindowsAndMessaging.HCURSOR)"/>
		internal static unsafe uint DragObject(winmdroot.Foundation.HWND hwndParent, winmdroot.Foundation.HWND hwndFrom, uint fmt, nuint data, SafeHandle hcur)
		{
			bool hcurAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HCURSOR hcurLocal;
				if (hcur is object)
				{
					hcur.DangerousAddRef(ref hcurAddRef);
					hcurLocal = (winmdroot.UI.WindowsAndMessaging.HCURSOR)hcur.DangerousGetHandle();
				}
				else
					hcurLocal = default(winmdroot.UI.WindowsAndMessaging.HCURSOR);
				uint __result = PInvoke.DragObject(hwndParent, hwndFrom, fmt, data, hcurLocal);
				return __result;
			}
			finally
			{
				if (hcurAddRef)
					hcur.DangerousRelease();
			}
		}

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern uint DragObject(winmdroot.Foundation.HWND hwndParent, winmdroot.Foundation.HWND hwndFrom, uint fmt, nuint data, winmdroot.UI.WindowsAndMessaging.HCURSOR hcur);

		/// <inheritdoc cref="DrawIcon(winmdroot.Graphics.Gdi.HDC, int, int, winmdroot.UI.WindowsAndMessaging.HICON)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawIcon(SafeHandle hDC, int X, int Y, SafeHandle hIcon)
		{
			bool hDCAddRef = false;
			bool hIconAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hDCLocal;
				if (hDC is object)
				{
					hDC.DangerousAddRef(ref hDCAddRef);
					hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
				}
				else
					hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.UI.WindowsAndMessaging.HICON hIconLocal;
				if (hIcon is object)
				{
					hIcon.DangerousAddRef(ref hIconAddRef);
					hIconLocal = (winmdroot.UI.WindowsAndMessaging.HICON)hIcon.DangerousGetHandle();
				}
				else
					hIconLocal = default(winmdroot.UI.WindowsAndMessaging.HICON);
				winmdroot.Foundation.BOOL __result = PInvoke.DrawIcon(hDCLocal, X, Y, hIconLocal);
				return __result;
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
				if (hIconAddRef)
					hIcon.DangerousRelease();
			}
		}

		/// <summary>Draws an icon or cursor into the specified device context.</summary>
		/// <param name="hDC">
		/// <para>Type: <b>HDC</b> A handle to the device context into which the icon or cursor will be drawn.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="X">
		/// <para>Type: <b>int</b> The logical x-coordinate of the upper-left corner of the icon.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The logical y-coordinate of the upper-left corner of the icon.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hIcon">
		/// <para>Type: <b>HICON</b> A handle to the icon to be drawn.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawicon">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DrawIcon(winmdroot.Graphics.Gdi.HDC hDC, int X, int Y, winmdroot.UI.WindowsAndMessaging.HICON hIcon);

		/// <summary>Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the foreground window. The foreground window can be <b>NULL</b> in certain circumstances, such as when a window is losing activation.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetForegroundWindow();

		/// <summary>Switches focus to the specified window and brings it to the foreground.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-switchtothiswindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fUnknown">
		/// <para>Type: <b>BOOL</b> A <b>TRUE</b> for this parameter indicates that the window is being switched to using the Alt/Ctl+Tab key sequence.  This parameter should be <b>FALSE</b> otherwise.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-switchtothiswindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>This function is typically called to maintain window z-ordering. This function was not included in the SDK headers and libraries until Windows XP with Service Pack 1 (SP1) and Windows Server 2003. If you do not have a header file and import library for this function, you can call the function using <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a> and <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getprocaddress">GetProcAddress</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-switchtothiswindow#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern void SwitchToThisWindow(winmdroot.Foundation.HWND hwnd, winmdroot.Foundation.BOOL fUnknown);

		/// <summary>Brings the thread that created the specified window into the foreground and activates the window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that should be activated and brought to the foreground.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the window was brought to the foreground, the return value is nonzero.</para>
		/// <para>If the window was not brought to the foreground, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetForegroundWindow(winmdroot.Foundation.HWND hWnd);

		/// <summary>Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window. For more information, see Remarks later in this topic.</summary>
		/// <param name="dwProcessId">
		/// <para>Type: <b>DWORD</b> The identifier of the process that will be enabled to set the foreground window. If this parameter is <b>ASFW_ANY</b>, all processes will be enabled to set the foreground window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-allowsetforegroundwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The function will fail if the calling process cannot set the foreground window. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-allowsetforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL AllowSetForegroundWindow(uint dwProcessId);

		/// <summary>The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function.</summary>
		/// <param name="uLockCode">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-locksetforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL LockSetForegroundWindow(winmdroot.UI.WindowsAndMessaging.FOREGROUND_WINDOW_LOCK_CODE uLockCode);

		/// <inheritdoc cref="ScrollWindow(winmdroot.Foundation.HWND, int, int, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL ScrollWindow(winmdroot.Foundation.HWND hWnd, int XAmount, int YAmount, winmdroot.Foundation.RECT? lpRect, winmdroot.Foundation.RECT? lpClipRect)
		{
			winmdroot.Foundation.RECT lpRectLocal = lpRect.HasValue ? lpRect.Value : default(winmdroot.Foundation.RECT);
			winmdroot.Foundation.RECT lpClipRectLocal = lpClipRect.HasValue ? lpClipRect.Value : default(winmdroot.Foundation.RECT);
			winmdroot.Foundation.BOOL __result = PInvoke.ScrollWindow(hWnd, XAmount, YAmount, lpRect.HasValue ? &lpRectLocal : null, lpClipRect.HasValue ? &lpClipRectLocal : null);
			return __result;
		}

		/// <summary>The ScrollWindow function scrolls the contents of the specified window's client area.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to the window where the client area is to be scrolled.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="XAmount">
		/// <para>Type: <b>int</b> Specifies the amount, in device units, of horizontal scrolling. If the window being scrolled has the <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-class-styles">CS_OWNDC</a> or <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-class-styles">CS_CLASSDC</a> style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window to the left.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="YAmount">
		/// <para>Type: <b>int</b> Specifies the amount, in device units, of vertical scrolling. If the window being scrolled has the <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-class-styles">CS_OWNDC</a> or <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-class-styles">CS_CLASSDC</a> style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window up.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpRect">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure specifying the portion of the client area to be scrolled. If this parameter is <b>NULL</b>, the entire client area is scrolled.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpClipRect">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure containing the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL ScrollWindow(winmdroot.Foundation.HWND hWnd, int XAmount, int YAmount, [Optional] winmdroot.Foundation.RECT* lpRect, [Optional] winmdroot.Foundation.RECT* lpClipRect);

		/// <inheritdoc cref="ScrollDC(winmdroot.Graphics.Gdi.HDC, int, int, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.HRGN, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL ScrollDC(SafeHandle hDC, int dx, int dy, winmdroot.Foundation.RECT? lprcScroll, winmdroot.Foundation.RECT? lprcClip, SafeHandle hrgnUpdate, winmdroot.Foundation.RECT* lprcUpdate)
		{
			bool hDCAddRef = false;
			bool hrgnUpdateAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hDCLocal;
				if (hDC is object)
				{
					hDC.DangerousAddRef(ref hDCAddRef);
					hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
				}
				else
					hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.Foundation.RECT lprcScrollLocal = lprcScroll.HasValue ? lprcScroll.Value : default(winmdroot.Foundation.RECT);
				winmdroot.Foundation.RECT lprcClipLocal = lprcClip.HasValue ? lprcClip.Value : default(winmdroot.Foundation.RECT);
				winmdroot.Graphics.Gdi.HRGN hrgnUpdateLocal;
				if (hrgnUpdate is object)
				{
					hrgnUpdate.DangerousAddRef(ref hrgnUpdateAddRef);
					hrgnUpdateLocal = (winmdroot.Graphics.Gdi.HRGN)hrgnUpdate.DangerousGetHandle();
				}
				else
					hrgnUpdateLocal = default(winmdroot.Graphics.Gdi.HRGN);
				winmdroot.Foundation.BOOL __result = PInvoke.ScrollDC(hDCLocal, dx, dy, lprcScroll.HasValue ? &lprcScrollLocal : null, lprcClip.HasValue ? &lprcClipLocal : null, hrgnUpdateLocal, lprcUpdate);
				return __result;
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
				if (hrgnUpdateAddRef)
					hrgnUpdate.DangerousRelease();
			}
		}

		/// <summary>The ScrollDC function scrolls a rectangle of bits horizontally and vertically.</summary>
		/// <param name="hDC">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HDC</a></b> Handle to the device context that contains the bits to be scrolled.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dx">
		/// <para>Type: <b>int</b> Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dy">
		/// <para>Type: <b>int</b> Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lprcScroll">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure containing the coordinates of the bits to be scrolled. The only bits affected by the scroll operation are bits in the intersection of this rectangle and the rectangle specified by <i>lprcClip</i>. If <i>lprcScroll</i> is <b>NULL</b>, the entire client area is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lprcClip">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure containing the coordinates of the clipping rectangle. The only bits that will be painted are the bits that remain inside this rectangle after the scroll operation has been completed. If <i>lprcClip</i> is <b>NULL</b>, the entire client area is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hrgnUpdate">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HRGN</a></b> Handle to the region uncovered by the scrolling process. <b>ScrollDC</b> defines this region; it is not necessarily a rectangle.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lprcUpdate">
		/// <para>Type: <b>LPRECT</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the coordinates of the rectangle bounding the scrolling update region. This is the largest rectangular area that requires repainting. When the function returns, the values in the structure are in client coordinates, regardless of the mapping mode for the specified device context. This allows applications to use the update region in a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-invalidatergn">InvalidateRgn</a> function, if required.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrolldc">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL ScrollDC(winmdroot.Graphics.Gdi.HDC hDC, int dx, int dy, [Optional] winmdroot.Foundation.RECT* lprcScroll, [Optional] winmdroot.Foundation.RECT* lprcClip, winmdroot.Graphics.Gdi.HRGN hrgnUpdate, [Optional] winmdroot.Foundation.RECT* lprcUpdate);

		/// <inheritdoc cref="ScrollWindowEx(winmdroot.Foundation.HWND, int, int, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.HRGN, winmdroot.Foundation.RECT*, winmdroot.UI.WindowsAndMessaging.SHOW_WINDOW_CMD)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe int ScrollWindowEx(winmdroot.Foundation.HWND hWnd, int dx, int dy, winmdroot.Foundation.RECT? prcScroll, winmdroot.Foundation.RECT? prcClip, SafeHandle hrgnUpdate, winmdroot.Foundation.RECT* prcUpdate, winmdroot.UI.WindowsAndMessaging.SHOW_WINDOW_CMD flags)
		{
			bool hrgnUpdateAddRef = false;
			try
			{
				winmdroot.Foundation.RECT prcScrollLocal = prcScroll.HasValue ? prcScroll.Value : default(winmdroot.Foundation.RECT);
				winmdroot.Foundation.RECT prcClipLocal = prcClip.HasValue ? prcClip.Value : default(winmdroot.Foundation.RECT);
				winmdroot.Graphics.Gdi.HRGN hrgnUpdateLocal;
				if (hrgnUpdate is object)
				{
					hrgnUpdate.DangerousAddRef(ref hrgnUpdateAddRef);
					hrgnUpdateLocal = (winmdroot.Graphics.Gdi.HRGN)hrgnUpdate.DangerousGetHandle();
				}
				else
					hrgnUpdateLocal = default(winmdroot.Graphics.Gdi.HRGN);
				int __result = PInvoke.ScrollWindowEx(hWnd, dx, dy, prcScroll.HasValue ? &prcScrollLocal : null, prcClip.HasValue ? &prcClipLocal : null, hrgnUpdateLocal, prcUpdate, flags);
				return __result;
			}
			finally
			{
				if (hrgnUpdateAddRef)
					hrgnUpdate.DangerousRelease();
			}
		}

		/// <summary>The ScrollWindowEx function scrolls the contents of the specified window's client area.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to the window where the client area is to be scrolled.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dx">
		/// <para>Type: <b>int</b> Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dy">
		/// <para>Type: <b>int</b> Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="prcScroll">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the portion of the client area to be scrolled. If this parameter is <b>NULL</b>, the entire client area is scrolled.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="prcClip">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted. This parameter may be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hrgnUpdate">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HRGN</a></b> Handle to the region that is modified to hold the region invalidated by scrolling. This parameter may be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="prcUpdate">
		/// <para>Type: <b>LPRECT</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the boundaries of the rectangle invalidated by scrolling. This parameter may be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="flags">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is SIMPLEREGION (rectangular invalidated region), COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles), or NULLREGION (no invalidated region). If the function fails, the return value is ERROR. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-scrollwindowex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe int ScrollWindowEx(winmdroot.Foundation.HWND hWnd, int dx, int dy, [Optional] winmdroot.Foundation.RECT* prcScroll, [Optional] winmdroot.Foundation.RECT* prcClip, winmdroot.Graphics.Gdi.HRGN hrgnUpdate, [Optional] winmdroot.Foundation.RECT* prcUpdate, winmdroot.UI.WindowsAndMessaging.SHOW_WINDOW_CMD flags);

		/// <summary>The GetScrollPos function retrieves the current position of the scroll box (thumb) in the specified scroll bar.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>nBar</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nBar">Type: <b>int</b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the current position of the scroll box. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern int GetScrollPos(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar);

		/// <inheritdoc cref="GetScrollRange(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS, int*, int*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL GetScrollRange(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, out int lpMinPos, out int lpMaxPos)
		{
			fixed (int* lpMaxPosLocal = &lpMaxPos)
			{
				fixed (int* lpMinPosLocal = &lpMinPos)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.GetScrollRange(hWnd, nBar, lpMinPosLocal, lpMaxPosLocal);
					return __result;
				}
			}
		}

		/// <summary>The GetScrollRange function retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>nBar</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollrange#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nBar">Type: <b>int</b></param>
		/// <param name="lpMinPos">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPINT</a></b> Pointer to the integer variable that receives the minimum position.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollrange#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpMaxPos">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPINT</a></b> Pointer to the integer variable that receives the maximum position.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollrange#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollrange">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetScrollRange(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, int* lpMinPos, int* lpMaxPos);

		/// <inheritdoc cref="SetProp(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR, winmdroot.Foundation.HANDLE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetProp(winmdroot.Foundation.HWND hWnd, string lpString, SafeHandle hData)
		{
			bool hDataAddRef = false;
			try
			{
				fixed (char* lpStringLocal = lpString)
				{
					winmdroot.Foundation.HANDLE hDataLocal;
					if (hData is object)
					{
						hData.DangerousAddRef(ref hDataAddRef);
						hDataLocal = (winmdroot.Foundation.HANDLE)hData.DangerousGetHandle();
					}
					else
						hDataLocal = default(winmdroot.Foundation.HANDLE);
					winmdroot.Foundation.BOOL __result = PInvoke.SetProp(hWnd, lpStringLocal, hDataLocal);
					return __result;
				}
			}
			finally
			{
				if (hDataAddRef)
					hData.DangerousRelease();
			}
		}

		/// <summary>Adds a new entry or changes an existing entry in the property list of the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose property list receives the new entry.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setpropw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPCTSTR</b> A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globaladdatoma">GlobalAddAtom</a> function. The atom must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setpropw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hData">
		/// <para>Type: <b>HANDLE</b> A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setpropw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the data handle and string are added to the property list, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setpropw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetPropW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetProp(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PCWSTR lpString, winmdroot.Foundation.HANDLE hData);

		/// <inheritdoc cref="GetProp(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe Microsoft.Win32.SafeHandles.SafeFileHandle GetProp(winmdroot.Foundation.HWND hWnd, string lpString)
		{
			fixed (char* lpStringLocal = lpString)
			{
				winmdroot.Foundation.HANDLE __result = PInvoke.GetProp(hWnd, lpStringLocal);
				return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the SetProp function.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose property list is to be searched.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpropw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPCTSTR</b> An atom that identifies a string. If this parameter is an atom, it must have been created by using the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globaladdatoma">GlobalAddAtom</a> function. The atom, a 16-bit value, must be placed in the low-order word of the <i>lpString</i> parameter; the high-order word must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpropw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HANDLE</b> If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getpropw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetPropW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HANDLE GetProp(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PCWSTR lpString);

		/// <inheritdoc cref="RemoveProp(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe Microsoft.Win32.SafeHandles.SafeFileHandle RemoveProp(winmdroot.Foundation.HWND hWnd, string lpString)
		{
			fixed (char* lpStringLocal = lpString)
			{
				winmdroot.Foundation.HANDLE __result = PInvoke.RemoveProp(hWnd, lpStringLocal);
				return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose property list is to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removepropw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPCTSTR</b> A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-globaladdatoma">GlobalAddAtom</a> function. The atom, a 16-bit value, must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removepropw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HANDLE</b> The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-removepropw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "RemovePropW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HANDLE RemoveProp(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PCWSTR lpString);

		/// <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose property list is to be enumerated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumpropsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpEnumFunc">
		/// <para>Type: <b>PROPENUMPROCEX</b> A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-propenumprocexa">PropEnumProcEx</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumpropsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Application-defined data to be passed to the callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumpropsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumpropsexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "EnumPropsExW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int EnumPropsEx(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.PROPENUMPROCEXW lpEnumFunc, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the last entry is enumerated or the callback function returns FALSE.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose property list is to be enumerated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumpropsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpEnumFunc">
		/// <para>Type: <b>PROPENUMPROC</b> A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-propenumproca">PropEnumProc</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumpropsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumpropsw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "EnumPropsW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int EnumProps(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.PROPENUMPROCW lpEnumFunc);

		/// <inheritdoc cref="SetWindowText(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetWindowText(winmdroot.Foundation.HWND hWnd, string lpString)
		{
			fixed (char* lpStringLocal = lpString)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.SetWindowText(hWnd, lpStringLocal);
				return __result;
			}
		}

		/// <summary>Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window or control whose text is to be changed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPCTSTR</b> The new title or control text.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowtextw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetWindowTextW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetWindowText(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PCWSTR lpString);

		/// <summary>Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window or control containing the text.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpString">
		/// <para>Type: <b>LPTSTR</b> The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nMaxCount">
		/// <para>Type: <b>int</b> The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function cannot retrieve the text of an edit control in another application.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowtextw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetWindowTextW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetWindowText(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PWSTR lpString, int nMaxCount);

		/// <summary>Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar).</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window or control.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowtextlengthw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value might be greater than the length of the text (see Remarks). If the window has no text, the return value is zero. Function failure is indicated by a return value of zero and a <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> result that is nonzero. > [!NOTE] > This function does not clear the most recent error information. To determine success or failure, clear the most recent error information by calling <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> with 0, then call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowtextlengthw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetWindowTextLengthW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetWindowTextLength(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="GetClientRect(winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetClientRect(winmdroot.Foundation.HWND hWnd, out winmdroot.Foundation.RECT lpRect)
		{
			fixed (winmdroot.Foundation.RECT* lpRectLocal = &lpRect)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetClientRect(hWnd, lpRectLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the coordinates of a window's client area.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose client coordinates are to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpRect">
		/// <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the client coordinates. The <b>left</b> and <b>top</b> members are zero. The <b>right</b> and <b>bottom</b> members contain the width and height of the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetClientRect(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.RECT* lpRect);

		/// <inheritdoc cref="GetWindowRect(winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetWindowRect(winmdroot.Foundation.HWND hWnd, out winmdroot.Foundation.RECT lpRect)
		{
			fixed (winmdroot.Foundation.RECT* lpRectLocal = &lpRect)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetWindowRect(hWnd, lpRectLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpRect">
		/// <para>Type: <b>LPRECT</b> A pointer to a  <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetWindowRect(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.RECT* lpRect);

		/// <inheritdoc cref="AdjustWindowRect(winmdroot.Foundation.RECT*, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL AdjustWindowRect(ref winmdroot.Foundation.RECT lpRect, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, winmdroot.Foundation.BOOL bMenu)
		{
			fixed (winmdroot.Foundation.RECT* lpRectLocal = &lpRect)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.AdjustWindowRect(lpRectLocal, dwStyle, bMenu);
				return __result;
			}
		}

		/// <summary>Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size.</summary>
		/// <param name="lpRect">
		/// <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwStyle">
		/// <para>Type: <b>DWORD</b> The <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">window style</a> of the window whose required size is to be calculated. Note that you cannot specify the <b>WS_OVERLAPPED</b> style.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bMenu">
		/// <para>Type: <b>BOOL</b> Indicates whether the window has a menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL AdjustWindowRect(winmdroot.Foundation.RECT* lpRect, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, winmdroot.Foundation.BOOL bMenu);

		/// <inheritdoc cref="AdjustWindowRectEx(winmdroot.Foundation.RECT*, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE, winmdroot.Foundation.BOOL, winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL AdjustWindowRectEx(ref winmdroot.Foundation.RECT lpRect, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, winmdroot.Foundation.BOOL bMenu, winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle)
		{
			fixed (winmdroot.Foundation.RECT* lpRectLocal = &lpRect)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.AdjustWindowRectEx(lpRectLocal, dwStyle, bMenu, dwExStyle);
				return __result;
			}
		}

		/// <summary>Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size.</summary>
		/// <param name="lpRect">
		/// <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrectex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwStyle">
		/// <para>Type: <b>DWORD</b> The <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">window style</a> of the window whose required size is to be calculated. Note that you cannot specify the <b>WS_OVERLAPPED</b> style.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrectex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bMenu">
		/// <para>Type: <b>BOOL</b> Indicates whether the window has a menu.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrectex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwExStyle">
		/// <para>Type: <b>DWORD</b> The <a href="https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">extended window style</a> of the window whose required size is to be calculated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrectex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-adjustwindowrectex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL AdjustWindowRectEx(winmdroot.Foundation.RECT* lpRect, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, winmdroot.Foundation.BOOL bMenu, winmdroot.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle);

		/// <inheritdoc cref="MessageBox(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR, winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_STYLE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_RESULT MessageBox(winmdroot.Foundation.HWND hWnd, string lpText, string lpCaption, winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_STYLE uType)
		{
			fixed (char* lpCaptionLocal = lpCaption)
			{
				fixed (char* lpTextLocal = lpText)
				{
					winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_RESULT __result = PInvoke.MessageBox(hWnd, lpTextLocal, lpCaptionLocal, uType);
					return __result;
				}
			}
		}

		/// <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpText">
		/// <para>Type: <b>LPCTSTR</b> The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpCaption">
		/// <para>Type: <b>LPCTSTR</b> The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uType">
		/// <para>Type: <b>UINT</b> The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the function succeeds, the return value is one of the following menu-item values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "MessageBoxW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_RESULT MessageBox(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PCWSTR lpText, winmdroot.Foundation.PCWSTR lpCaption, winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_STYLE uType);

		/// <inheritdoc cref="MessageBoxEx(winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR, winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_STYLE, ushort)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_RESULT MessageBoxEx(winmdroot.Foundation.HWND hWnd, string lpText, string lpCaption, winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_STYLE uType, ushort wLanguageId)
		{
			fixed (char* lpCaptionLocal = lpCaption)
			{
				fixed (char* lpTextLocal = lpText)
				{
					winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_RESULT __result = PInvoke.MessageBoxEx(hWnd, lpTextLocal, lpCaptionLocal, uType, wLanguageId);
					return __result;
				}
			}
		}

		/// <summary>Creates, displays, and operates a message box.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpText">
		/// <para>Type: <b>LPCTSTR</b> The message to be displayed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpCaption">
		/// <para>Type: <b>LPCTSTR</b> The dialog box title. If this parameter is <b>NULL</b>, the default title <b>Error</b> is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uType">
		/// <para>Type: <b>UINT</b> The contents and behavior of the dialog box. For information on the supported flags, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-messagebox">MessageBox</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wLanguageId">
		/// <para>Type: <b>WORD</b> The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is <c>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</c>, the current language associated with the calling thread is used.</para>
		/// <para>To specify a language other than the current language, use the <a href="https://docs.microsoft.com/windows/desktop/api/winnt/nf-winnt-makelangid">MAKELANGID</a> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the function succeeds, the return value is one of the following menu-item values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "MessageBoxExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_RESULT MessageBoxEx(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PCWSTR lpText, winmdroot.Foundation.PCWSTR lpCaption, winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_STYLE uType, ushort wLanguageId);

		/// <summary>Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.</summary>
		/// <param name="lpmbp">
		/// <para>Type: <b>const LPMSGBOXPARAMS</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msgboxparamsa">MSGBOXPARAMS</a> structure that contains information used to display the message box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxindirectw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is one of the following menu-item values. If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC has no effect. If there is not enough memory to create the message box, the return value is zero. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-messageboxindirectw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "MessageBoxIndirectW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.MESSAGEBOX_RESULT MessageBoxIndirect(in winmdroot.UI.WindowsAndMessaging.MSGBOXPARAMSW lpmbp);

		/// <summary>Displays or hides the cursor.</summary>
		/// <param name="bShow">
		/// <para>Type: <b>BOOL</b> If <i>bShow</i> is <b>TRUE</b>, the display count is incremented by one. If <i>bShow</i> is <b>FALSE</b>, the display count is decremented by one.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> The return value specifies the new display counter.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showcursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int ShowCursor(winmdroot.Foundation.BOOL bShow);

		/// <summary>Moves the cursor to the specified screen coordinates.</summary>
		/// <param name="X">
		/// <para>Type: <b>int</b> The new x-coordinate of the cursor, in screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The new y-coordinate of the cursor, in screen coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> Returns nonzero if successful or zero otherwise. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetCursorPos(int X, int Y);

		/// <summary>Sets the position of the cursor in physical coordinates.</summary>
		/// <param name="X">
		/// <para>Type: <b>int</b> The new x-coordinate of the cursor, in physical coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setphysicalcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The new y-coordinate of the cursor, in physical coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setphysicalcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> if successful; otherwise <b>FALSE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setphysicalcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL SetPhysicalCursorPos(int X, int Y);

		/// <inheritdoc cref="SetCursor(winmdroot.UI.WindowsAndMessaging.HCURSOR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyCursorSafeHandle SetCursor(SafeHandle hCursor)
		{
			bool hCursorAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HCURSOR hCursorLocal;
				if (hCursor is object)
				{
					hCursor.DangerousAddRef(ref hCursorAddRef);
					hCursorLocal = (winmdroot.UI.WindowsAndMessaging.HCURSOR)hCursor.DangerousGetHandle();
				}
				else
					hCursorLocal = default(winmdroot.UI.WindowsAndMessaging.HCURSOR);
				winmdroot.UI.WindowsAndMessaging.HCURSOR __result = PInvoke.SetCursor(hCursorLocal);
				return new DestroyCursorSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hCursorAddRef)
					hCursor.DangerousRelease();
			}
		}

		/// <summary>Sets the cursor shape.</summary>
		/// <param name="hCursor">
		/// <para>Type: <b>HCURSOR</b> A handle to the cursor. The cursor must have been created by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createcursor">CreateCursor</a> function or loaded by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadcursora">LoadCursor</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadimagea">LoadImage</a> function. If this parameter is <b>NULL</b>, the cursor is removed from the screen.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCURSOR</b> The return value is the handle to the previous cursor, if there was one. If there was no previous cursor, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HCURSOR SetCursor(winmdroot.UI.WindowsAndMessaging.HCURSOR hCursor);

		/// <inheritdoc cref="GetCursorPos(global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetCursorPos(out global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetCursorPos(lpPointLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the position of the mouse cursor, in screen coordinates.</summary>
		/// <param name="lpPoint">
		/// <para>Type: <b>LPPOINT</b> A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the screen coordinates of the cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> Returns nonzero if successful or zero otherwise. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetCursorPos(global::System.Drawing.Point* lpPoint);

		/// <inheritdoc cref="GetPhysicalCursorPos(global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL GetPhysicalCursorPos(out global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetPhysicalCursorPos(lpPointLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the position of the cursor in physical coordinates.</summary>
		/// <param name="lpPoint">
		/// <para>Type: <b>LPPOINT</b> The position of the cursor, in physical coordinates.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getphysicalcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> if successful; otherwise <b>FALSE</b>.</para>
		/// <para><a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> can be called to get more information about any error that is generated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getphysicalcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetPhysicalCursorPos(global::System.Drawing.Point* lpPoint);

		/// <inheritdoc cref="GetClipCursor(winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetClipCursor(out winmdroot.Foundation.RECT lpRect)
		{
			fixed (winmdroot.Foundation.RECT* lpRectLocal = &lpRect)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetClipCursor(lpRectLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the screen coordinates of the rectangular area to which the cursor is confined.</summary>
		/// <param name="lpRect">
		/// <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the screen coordinates of the confining rectangle. The structure receives the dimensions of the screen if the cursor is not confined to a rectangle.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclipcursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetClipCursor(winmdroot.Foundation.RECT* lpRect);

		/// <inheritdoc cref="GetCursor()"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyCursorSafeHandle GetCursor_SafeHandle()
		{
			winmdroot.UI.WindowsAndMessaging.HCURSOR __result = PInvoke.GetCursor();
			return new DestroyCursorSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>Retrieves a handle to the current cursor.</summary>
		/// <returns>
		/// <para>Type: <b>HCURSOR</b> The return value is the handle to the current cursor. If there is no cursor, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HCURSOR GetCursor();

		/// <inheritdoc cref="CreateCaret(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HBITMAP, int, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL CreateCaret(winmdroot.Foundation.HWND hWnd, SafeHandle hBitmap, int nWidth, int nHeight)
		{
			bool hBitmapAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HBITMAP hBitmapLocal;
				if (hBitmap is object)
				{
					hBitmap.DangerousAddRef(ref hBitmapAddRef);
					hBitmapLocal = (winmdroot.Graphics.Gdi.HBITMAP)hBitmap.DangerousGetHandle();
				}
				else
					hBitmapLocal = default(winmdroot.Graphics.Gdi.HBITMAP);
				winmdroot.Foundation.BOOL __result = PInvoke.CreateCaret(hWnd, hBitmapLocal, nWidth, nHeight);
				return __result;
			}
			finally
			{
				if (hBitmapAddRef)
					hBitmap.DangerousRelease();
			}
		}

		/// <summary>Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the caret.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcaret#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hBitmap">
		/// <para>Type: <b>HBITMAP</b> A handle to the bitmap that defines the caret shape. If this parameter is <b>NULL</b>, the caret is solid. If this parameter is <c>(HBITMAP) 1</c>, the caret is gray. If this parameter is a bitmap handle, the caret is the specified bitmap. The bitmap handle must have been created by the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createbitmap">CreateBitmap</a>, <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createdibitmap">CreateDIBitmap</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadbitmapa">LoadBitmap</a> function. If <i>hBitmap</i> is a bitmap handle, <b>CreateCaret</b> ignores the <i>nWidth</i> and <i>nHeight</i> parameters; the bitmap defines its own width and height.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcaret#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nWidth">
		/// <para>Type: <b>int</b> The width of the caret, in logical units. If this parameter is zero, the width is set to the system-defined window border width. If <i>hBitmap</i> is a bitmap handle, <b>CreateCaret</b> ignores this parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcaret#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nHeight">
		/// <para>Type: <b>int</b> The height of the caret, in logical units. If this parameter is zero, the height is set to the system-defined window border height. If <i>hBitmap</i> is a bitmap handle, <b>CreateCaret</b> ignores this parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcaret#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcaret">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CreateCaret(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HBITMAP hBitmap, int nWidth, int nHeight);

		/// <summary>Retrieves the time required to invert the caret's pixels. The user can set this value.</summary>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is the blink time, in milliseconds.</para>
		/// <para>A return value of <b>INFINITE</b> indicates that the caret does not blink. A return value is zero indicates that the function has failed. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcaretblinktime">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetCaretBlinkTime();

		/// <summary>Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels.</summary>
		/// <param name="uMSeconds">
		/// <para>Type: <b>UINT</b> The new blink time, in milliseconds.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcaretblinktime#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcaretblinktime">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetCaretBlinkTime(uint uMSeconds);

		/// <summary>Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycaret">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DestroyCaret();

		/// <summary>Removes the caret from the screen. Hiding a caret does not destroy its current shape or invalidate the insertion point.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the caret. If this parameter is <b>NULL</b>, <b>HideCaret</b> searches the current task for the window that owns the caret.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-hidecaret#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-hidecaret">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL HideCaret(winmdroot.Foundation.HWND hWnd);

		/// <summary>Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins flashing automatically.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window that owns the caret. If this parameter is <b>NULL</b>, <b>ShowCaret</b> searches the current task for the window that owns the caret.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showcaret#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showcaret">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ShowCaret(winmdroot.Foundation.HWND hWnd);

		/// <summary>Moves the caret to the specified coordinates. If the window that owns the caret was created with the CS_OWNDC class style, then the specified coordinates are subject to the mapping mode of the device context associated with that window.</summary>
		/// <param name="X">
		/// <para>Type: <b>int</b> The new x-coordinate of the caret.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcaretpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The new y-coordinate of the caret.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcaretpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setcaretpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetCaretPos(int X, int Y);

		/// <inheritdoc cref="GetCaretPos(global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetCaretPos(out global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetCaretPos(lpPointLocal);
				return __result;
			}
		}

		/// <summary>Copies the caret's position to the specified POINT structure.</summary>
		/// <param name="lpPoint">
		/// <para>Type: <b>LPPOINT</b> A pointer to the <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that is to receive the client coordinates of the caret.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcaretpos#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero.</para>
		/// <para>If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcaretpos">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetCaretPos(global::System.Drawing.Point* lpPoint);

		/// <inheritdoc cref="LogicalToPhysicalPoint(winmdroot.Foundation.HWND, global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL LogicalToPhysicalPoint(winmdroot.Foundation.HWND hWnd, ref global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.LogicalToPhysicalPoint(hWnd, lpPointLocal);
				return __result;
			}
		}

		/// <summary>Converts the logical coordinates of a point in a window to physical coordinates.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-logicaltophysicalpoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpPoint">
		/// <para>Type: <b>LPPOINT</b> A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-logicaltophysicalpoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>Windows Vista introduces the concept of physical coordinates. Desktop Window Manager (DWM) scales non-dots per inch (dpi) aware windows when the display is high dpi. The window seen on the screen corresponds to the physical coordinates. The application continues to work in logical space. Therefore, the application's view of the window is different from that which appears on the screen. For scaled windows, logical and physical coordinates are different. <b>LogicalToPhysicalPoint</b> is a transformation API that can be called by a process that declares itself as dpi aware. The function uses the window identified by the <i>hWnd</i> parameter and the logical coordinates given in the <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure to compute the physical coordinates. The <b>LogicalToPhysicalPoint</b> function replaces the logical coordinates in the <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure with the physical coordinates. The physical coordinates are relative to the upper-left corner of the screen. The coordinates have to be inside the client area of <i>hWnd</i>. On all platforms, <b>LogicalToPhysicalPoint</b> will fail on a window that has either 0 width or height; an application must first establish a non-0 width and height by calling, for example, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-movewindow">MoveWindow</a>.  On some versions of Windows (including Windows 7), <b>LogicalToPhysicalPoint</b> will still fail if <b>MoveWindow</b> has been called after a call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> with <b>SH_HIDE</b> has hidden the window. In Windows 8, system–DPI aware applications translate between physical and logical space using PhysicalToLogicalPoint and LogicalToPhysicalPoint. In Windows 8.1, the additional virtualization of the system and inter-process communications means that for the majority of applications, you do not need these APIs. As a result, in Windows 8.1, PhysicalToLogicalPoint and LogicalToPhysicalPoint no longer transform points. The system returns all points to an application in its own coordinate space. This behavior preserves functionality for the majority of applications, but there are some exceptions in which you must make changes to ensure that the application works as expected. In those cases, use <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-physicaltologicalpointforpermonitordpi">PhysicalToLogicalPointForPerMonitorDPI</a> and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-logicaltophysicalpointforpermonitordpi">LogicalToPhysicalPointForPerMonitorDPI.</a></para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-logicaltophysicalpoint#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL LogicalToPhysicalPoint(winmdroot.Foundation.HWND hWnd, global::System.Drawing.Point* lpPoint);

		/// <inheritdoc cref="PhysicalToLogicalPoint(winmdroot.Foundation.HWND, global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL PhysicalToLogicalPoint(winmdroot.Foundation.HWND hWnd, ref global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.PhysicalToLogicalPoint(hWnd, lpPointLocal);
				return __result;
			}
		}

		/// <summary>Converts the physical coordinates of a point in a window to logical coordinates.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-physicaltologicalpoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpPoint">
		/// <para>Type: <b>LPPOINT</b> A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-physicaltologicalpoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>Windows Vista introduces the concept of physical coordinates. Desktop Window Manager (DWM) scales non-dots per inch (dpi) aware windows when the display is high dpi. The window seen on the screen corresponds to the physical coordinates. The application continues to work in logical space. Therefore, the application's view of the window is different from that which appears on the screen. For scaled windows, logical and physical coordinates are different. The function uses the window identified by the <i>hWnd</i> parameter and the physical coordinates given in the <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure to compute the logical coordinates. The logical coordinates are the <i>unscaled</i> coordinates that appear to the application in a programmatic way. In other words, the logical coordinates are the coordinates the application recognizes, which can be different from the physical coordinates. The API then replaces the physical coordinates with the logical coordinates. The new coordinates are in the <i>world</i> coordinates whose origin is (0, 0) on the desktop. The coordinates passed to the API have to be on the <i>hWnd</i>. The source coordinates are in device units. On all platforms, <b>PhysicalToLogicalPoint</b> will fail on a window that has either 0 width or height; an application must first establish a non-0 width and height by calling, for example, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-movewindow">MoveWindow</a>.  On some versions of Windows (including Windows 7), <b>PhysicalToLogicalPoint</b> will still fail if <b>MoveWindow</b> has been called after a call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> with <b>SH_HIDE</b> has hidden the window. In Windows 8, system–DPI aware applications translate between physical and logical space using PhysicalToLogicalPoint and LogicalToPhysicalPoint. In Windows 8.1, the additional virtualization of the system and inter-process communications means that for the majority of applications, you do not need these APIs. As a result, in Windows 8.1, PhysicalToLogicalPoint and LogicalToPhysicalPoint no longer transform points. The system returns all points to an application in its own coordinate space. This behavior preserves functionality for the majority of applications, but there are some exceptions in which you must make changes to ensure that the application works as expected. In those cases, use <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-physicaltologicalpointforpermonitordpi">PhysicalToLogicalPointForPerMonitorDPI</a> and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-logicaltophysicalpointforpermonitordpi">LogicalToPhysicalPointForPerMonitorDPI.</a></para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-physicaltologicalpoint#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL PhysicalToLogicalPoint(winmdroot.Foundation.HWND hWnd, global::System.Drawing.Point* lpPoint);

		/// <summary>Retrieves a handle to the window that contains the specified point.</summary>
		/// <param name="Point">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> The point to be checked.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-windowfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the window that contains the point. If no window exists at the given point, the return value is <b>NULL</b>. If the point is over a static text control, the return value is a handle to the window under the static text control.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-windowfrompoint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND WindowFromPoint(global::System.Drawing.Point Point);

		/// <summary>Retrieves a handle to the window that contains the specified physical point.</summary>
		/// <param name="Point">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> The physical coordinates of the point.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-windowfromphysicalpoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> A handle to the window that contains the given physical point. If no window exists at the point, this value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-windowfromphysicalpoint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.HWND WindowFromPhysicalPoint(global::System.Drawing.Point Point);

		/// <summary>Determines which, if any, of the child windows belonging to a parent window contains the specified point. The search is restricted to immediate child windows. Grandchildren, and deeper descendant windows are not searched.</summary>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the parent window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-childwindowfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Point">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> A structure that defines the client coordinates, relative to <i>hWndParent</i>, of the point to be checked.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-childwindowfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the child window that contains the point, even if the child window is hidden or disabled. If the point lies outside the parent window, the return value is <b>NULL</b>. If the point is within the parent window but not within any child window, the return value is a handle to the parent window.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-childwindowfrompoint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND ChildWindowFromPoint(winmdroot.Foundation.HWND hWndParent, global::System.Drawing.Point Point);

		/// <inheritdoc cref="ClipCursor(winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL ClipCursor(winmdroot.Foundation.RECT? lpRect)
		{
			winmdroot.Foundation.RECT lpRectLocal = lpRect.HasValue ? lpRect.Value : default(winmdroot.Foundation.RECT);
			winmdroot.Foundation.BOOL __result = PInvoke.ClipCursor(lpRect.HasValue ? &lpRectLocal : null);
			return __result;
		}

		/// <summary>Confines the cursor to a rectangular area on the screen.</summary>
		/// <param name="lpRect">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> A pointer to the structure that contains the screen coordinates of the upper-left and lower-right corners of the confining rectangle. If this parameter is <b>NULL</b>, the cursor is free to move anywhere on the screen.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-clipcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-clipcursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL ClipCursor([Optional] winmdroot.Foundation.RECT* lpRect);

		/// <summary>Determines which, if any, of the child windows belonging to the specified parent window contains the specified point.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the parent window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-childwindowfrompointex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pt">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> A structure that defines the client coordinates (relative to <i>hwndParent</i>) of the point to be checked.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-childwindowfrompointex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="flags">
		/// <para>Type: <b>UINT</b> The child windows to be skipped. This parameter can be one or more of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-childwindowfrompointex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the first child window that contains the point and meets the criteria specified by <i>uFlags</i>. If the point is within the parent window but not within any child window that meets the criteria, the return value is a handle to the parent window. If the point lies outside the parent window or if the function fails, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-childwindowfrompointex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND ChildWindowFromPointEx(winmdroot.Foundation.HWND hwnd, global::System.Drawing.Point pt, winmdroot.UI.WindowsAndMessaging.CWP_FLAGS flags);

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern ushort GetWindowWord(winmdroot.Foundation.HWND hWnd, int nIndex);

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern ushort SetWindowWord(winmdroot.Foundation.HWND hWnd, int nIndex, ushort wNewWord);

		/// <summary>Retrieves information about the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex">Type: <b>int</b></param>
		/// <returns>
		/// <para>Type: <b>LONG</b> If the function succeeds, the return value is the requested value. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If <a href="/windows/desktop/api/winuser/nf-winuser-setwindowlonga">SetWindowLong</a> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowlongw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetWindowLongW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetWindowLong(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX nIndex);

		/// <summary>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex">Type: <b>int</b></param>
		/// <param name="dwNewLong">
		/// <para>Type: <b>LONG</b> The replacement value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LONG</b> If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> result that is nonzero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetWindowLongW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int SetWindowLong(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX nIndex, int dwNewLong);

		/// <summary>Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassword#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex">
		/// <para>Type: <b>int</b> The zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of class memory, minus two; for example, if you specified 10 or more bytes of extra class memory, a value of eight would be an index to the fifth 16-bit integer. There is an additional valid value as shown in the following table. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassword#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>WORD</b> If the function succeeds, the return value is the requested 16-bit value. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassword">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern ushort GetClassWord(winmdroot.Foundation.HWND hWnd, int nIndex);

		/// <summary>Replaces the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclassword#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex">
		/// <para>Type: <b>int</b> The zero-based byte offset of the value to be replaced. Valid values are in the range zero through the number of bytes of class memory minus two; for example, if you specified 10 or more bytes of extra class memory, a value of 8 would be an index to the fifth 16-bit integer.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclassword#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wNewWord">
		/// <para>Type: <b>WORD</b> The replacement value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclassword#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>WORD</b> If the function succeeds, the return value is the previous value of the specified 16-bit integer. If the value was not previously set, the return value is zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclassword">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern ushort SetClassWord(winmdroot.Foundation.HWND hWnd, int nIndex, ushort wNewWord);

		/// <summary>Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclasslongw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex">Type: <b>int</b></param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> If the function succeeds, the return value is the requested value. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclasslongw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetClassLongW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetClassLong(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX nIndex);

		/// <summary>Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclasslongw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIndex">Type: <b>int</b></param>
		/// <param name="dwNewLong">
		/// <para>Type: <b>LONG</b> The replacement value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclasslongw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the value was not previously set, the return value is zero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setclasslongw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetClassLongW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint SetClassLong(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX nIndex, int dwNewLong);

		/// <inheritdoc cref="GetProcessDefaultLayout(uint*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetProcessDefaultLayout(out uint pdwDefaultLayout)
		{
			fixed (uint* pdwDefaultLayoutLocal = &pdwDefaultLayout)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetProcessDefaultLayout(pdwDefaultLayoutLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the default layout that is used when windows are created with no parent or owner.</summary>
		/// <param name="pdwDefaultLayout">
		/// <para>Type: <b>DWORD*</b> The current default process layout. For a list of values, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setprocessdefaultlayout">SetProcessDefaultLayout</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getprocessdefaultlayout#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getprocessdefaultlayout">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetProcessDefaultLayout(uint* pdwDefaultLayout);

		/// <summary>Changes the default layout when windows are created with no parent or owner only for the currently running process.</summary>
		/// <param name="dwDefaultLayout">
		/// <para>Type: <b>DWORD</b> The default process layout. This parameter can be 0 or the following value. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setprocessdefaultlayout#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setprocessdefaultlayout">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetProcessDefaultLayout(uint dwDefaultLayout);

		/// <summary>Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the desktop window.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdesktopwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetDesktopWindow();

		/// <summary>Retrieves a handle to the specified window's parent or owner.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose parent window handle is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getparent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the window is a child window, the return value is a handle to the parent window. If the window is a top-level window with the <b>WS_POPUP</b> style, the return value is a handle to the owner window. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function typically fails for one of the following reasons:</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getparent">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetParent(winmdroot.Foundation.HWND hWnd);

		/// <summary>Changes the parent window of the specified child window.</summary>
		/// <param name="hWndChild">
		/// <para>Type: <b>HWND</b> A handle to the child window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setparent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndNewParent">
		/// <para>Type: <b>HWND</b> A handle to the new parent window. If this parameter is <b>NULL</b>, the desktop window becomes the new parent window. If this parameter is <b>HWND_MESSAGE</b>, the child window becomes a <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-features">message-only window</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setparent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the previous parent window. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setparent">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND SetParent(winmdroot.Foundation.HWND hWndChild, winmdroot.Foundation.HWND hWndNewParent);

		/// <summary>Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function.</summary>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the parent window whose child windows are to be enumerated. If this parameter is <b>NULL</b>, this function is equivalent to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumwindows">EnumWindows</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumchildwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpEnumFunc">
		/// <para>Type: <b>WNDENUMPROC</b> A pointer to an application-defined callback function. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms633493(v=vs.85)">EnumChildProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumchildwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> An application-defined value to be passed to the callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumchildwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The return value is not used.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumchildwindows">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnumChildWindows(winmdroot.Foundation.HWND hWndParent, winmdroot.UI.WindowsAndMessaging.WNDENUMPROC lpEnumFunc, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="FindWindow(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.HWND FindWindow(string lpClassName, string lpWindowName)
		{
			fixed (char* lpWindowNameLocal = lpWindowName)
			{
				fixed (char* lpClassNameLocal = lpClassName)
				{
					winmdroot.Foundation.HWND __result = PInvoke.FindWindow(lpClassNameLocal, lpWindowNameLocal);
					return __result;
				}
			}
		}

		/// <summary>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</summary>
		/// <param name="lpClassName">
		/// <para>Type: <b>LPCTSTR</b> The class name or a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a>, or any of the predefined control-class names. If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpWindowName">
		/// <para>Type: <b>LPCTSTR</b> The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the window that has the specified class name and window name. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "FindWindowW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND FindWindow(winmdroot.Foundation.PCWSTR lpClassName, winmdroot.Foundation.PCWSTR lpWindowName);

		/// <inheritdoc cref="FindWindowEx(winmdroot.Foundation.HWND, winmdroot.Foundation.HWND, winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.HWND FindWindowEx(winmdroot.Foundation.HWND hWndParent, winmdroot.Foundation.HWND hWndChildAfter, string lpszClass, string lpszWindow)
		{
			fixed (char* lpszWindowLocal = lpszWindow)
			{
				fixed (char* lpszClassLocal = lpszClass)
				{
					winmdroot.Foundation.HWND __result = PInvoke.FindWindowEx(hWndParent, hWndChildAfter, lpszClassLocal, lpszWindowLocal);
					return __result;
				}
			}
		}

		/// <summary>Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.</summary>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the parent window whose child windows are to be searched. If <i>hwndParent</i> is <b>NULL</b>, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop. If <i>hwndParent</i> is <b>HWND_MESSAGE</b>, the function searches all <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-features">message-only windows</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndChildAfter">
		/// <para>Type: <b>HWND</b> A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of <i>hwndParent</i>, not just a descendant window. If <i>hwndChildAfter</i> is <b>NULL</b>, the search begins with the first child window of <i>hwndParent</i>. Note that if both <i>hwndParent</i> and <i>hwndChildAfter</i> are <b>NULL</b>, the function searches all top-level and message-only windows.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszClass">
		/// <para>Type: <b>LPCTSTR</b> The class name or a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be placed in the low-order word of <i>lpszClass</i>; the high-order word must be zero. If <i>lpszClass</i> is a string, it specifies the window class name. The class name can be any name registered with <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a>, or any of the predefined control-class names, or it can be <c>MAKEINTATOM(0x8000)</c>. In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpszWindow">
		/// <para>Type: <b>LPCTSTR</b> The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the window that has the specified class and window names. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindowexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "FindWindowExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND FindWindowEx(winmdroot.Foundation.HWND hWndParent, winmdroot.Foundation.HWND hWndChildAfter, winmdroot.Foundation.PCWSTR lpszClass, winmdroot.Foundation.PCWSTR lpszWindow);

		/// <summary>Retrieves a handle to the Shell's desktop window.</summary>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is the handle of the Shell's desktop window. If no Shell process is present, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getshellwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetShellWindow();

		/// <summary>Registers a specified Shell window to receive certain messages for events or notifications that are useful to Shell applications.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window to register for Shell hook messages.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registershellhookwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registershellhookwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL RegisterShellHookWindow(winmdroot.Foundation.HWND hwnd);

		/// <summary>Unregisters a specified Shell window that is registered to receive Shell hook messages.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window to be unregistered. The window was registered with a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registershellhookwindow">RegisterShellHookWindow</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deregistershellhookwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> if the function succeeds; <b>FALSE</b> if the function fails.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deregistershellhookwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DeregisterShellHookWindow(winmdroot.Foundation.HWND hwnd);

		/// <summary>Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE.</summary>
		/// <param name="lpEnumFunc">
		/// <para>Type: <b>WNDENUMPROC</b> A pointer to an application-defined callback function. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms633498(v=vs.85)">EnumWindowsProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> An application-defined value to be passed to the callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If <a href="/previous-versions/windows/desktop/legacy/ms633498(v=vs.85)">EnumWindowsProc</a> returns zero, the return value is also zero. In this case, the callback function should call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> to obtain a meaningful error code to be returned to the caller of <b>EnumWindows</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumwindows">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnumWindows(winmdroot.UI.WindowsAndMessaging.WNDENUMPROC lpEnumFunc, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function.</summary>
		/// <param name="dwThreadId">
		/// <para>Type: <b>DWORD</b> The identifier of the thread whose windows are to be enumerated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumthreadwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpfn">
		/// <para>Type: <b>WNDENUMPROC</b> A pointer to an application-defined callback function. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms633496(v=vs.85)">EnumThreadWndProc</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumthreadwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> An application-defined value to be passed to the callback function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumthreadwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the callback function returns <b>TRUE</b> for all windows in the thread specified by <i>dwThreadId</i>, the return value is <b>TRUE</b>. If the callback function returns <b>FALSE</b> on any enumerated window, or if there are no windows found in the thread specified by <i>dwThreadId</i>, the return value is <b>FALSE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumthreadwindows">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL EnumThreadWindows(uint dwThreadId, winmdroot.UI.WindowsAndMessaging.WNDENUMPROC lpfn, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Retrieves the name of the class to which the specified window belongs.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassnamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpClassName">
		/// <para>Type: <b>LPTSTR</b> The class name string.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassnamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nMaxCount">
		/// <para>Type: <b>int</b> The length of the *lpClassName* buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to `nMaxCount-1` characters.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassnamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclassnamew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetClassNameW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int GetClassName(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PWSTR lpClassName, int nMaxCount);

		/// <summary>Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the parent window whose child windows are to be examined. If this parameter is <b>NULL</b>, the function returns a handle to the window at the top of the Z order.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-gettopwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the child window at the top of the Z order. If the specified window has no child windows, the return value is <b>NULL</b>. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-gettopwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetTopWindow(winmdroot.Foundation.HWND hWnd);

		/// <summary>Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowthreadprocessid#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpdwProcessId">
		/// <para>Type: <b>LPDWORD</b> A pointer to a variable that receives the process identifier. If this parameter is not <b>NULL</b>, <b>GetWindowThreadProcessId</b> copies the identifier of the process to the variable; otherwise, it does not.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowthreadprocessid#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The return value is the identifier of the thread that created the window.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowthreadprocessid">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint GetWindowThreadProcessId(winmdroot.Foundation.HWND hWnd, [Optional] uint* lpdwProcessId);

		/// <summary>Determines whether the calling thread is already a GUI thread. It can also optionally convert the thread to a GUI thread.</summary>
		/// <param name="bConvert">
		/// <para>Type: <b>BOOL</b> If <b>TRUE</b> and the thread is not a GUI thread, convert the thread to a GUI thread.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isguithread#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> The function returns a nonzero value in the following situations: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isguithread">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL IsGUIThread(winmdroot.Foundation.BOOL bConvert);

		/// <summary>Determines which pop-up window owned by the specified window was most recently active.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the owner window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlastactivepopup#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value identifies the most recently active pop-up window. The return value is the same as the <i>hWnd</i> parameter, if any of the following conditions are met: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getlastactivepopup">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetLastActivePopup(winmdroot.Foundation.HWND hWnd);

		/// <summary>Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to a window. The window handle retrieved is relative to this window, based on the value of the <i>uCmd</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uCmd">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetWindow(winmdroot.Foundation.HWND hWnd, winmdroot.UI.WindowsAndMessaging.GET_WINDOW_CMD uCmd);

		/// <summary>Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.</summary>
		/// <param name="hhk">
		/// <para>Type: <b>HHOOK</b> A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowshookexa">SetWindowsHookEx</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unhookwindowshookex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unhookwindowshookex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL UnhookWindowsHookEx(winmdroot.UI.WindowsAndMessaging.HHOOK hhk);

		/// <inheritdoc cref="SetWindowsHook(int, winmdroot.UI.WindowsAndMessaging.HOOKPROC)"/>
		internal static unsafe UnhookWindowsHookExSafeHandle SetWindowsHook_SafeHandle(int nFilterType, winmdroot.UI.WindowsAndMessaging.HOOKPROC pfnFilterProc)
		{
			winmdroot.UI.WindowsAndMessaging.HHOOK __result = PInvoke.SetWindowsHook(nFilterType, pfnFilterProc);
			return new UnhookWindowsHookExSafeHandle(__result, ownsHandle: true);
		}

		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetWindowsHookW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.UI.WindowsAndMessaging.HHOOK SetWindowsHook(int nFilterType, winmdroot.UI.WindowsAndMessaging.HOOKPROC pfnFilterProc);

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL UnhookWindowsHook(int nCode, winmdroot.UI.WindowsAndMessaging.HOOKPROC pfnFilterProc);

		/// <inheritdoc cref="SetWindowsHookEx(winmdroot.UI.WindowsAndMessaging.WINDOWS_HOOK_ID, winmdroot.UI.WindowsAndMessaging.HOOKPROC, winmdroot.Foundation.HINSTANCE, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe UnhookWindowsHookExSafeHandle SetWindowsHookEx(winmdroot.UI.WindowsAndMessaging.WINDOWS_HOOK_ID idHook, winmdroot.UI.WindowsAndMessaging.HOOKPROC lpfn, SafeHandle hmod, uint dwThreadId)
		{
			bool hmodAddRef = false;
			try
			{
				winmdroot.Foundation.HINSTANCE hmodLocal;
				if (hmod is object)
				{
					hmod.DangerousAddRef(ref hmodAddRef);
					hmodLocal = (winmdroot.Foundation.HINSTANCE)hmod.DangerousGetHandle();
				}
				else
					hmodLocal = default(winmdroot.Foundation.HINSTANCE);
				winmdroot.UI.WindowsAndMessaging.HHOOK __result = PInvoke.SetWindowsHookEx(idHook, lpfn, hmodLocal, dwThreadId);
				return new UnhookWindowsHookExSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hmodAddRef)
					hmod.DangerousRelease();
			}
		}

		/// <summary>Installs an application-defined hook procedure into a hook chain.</summary>
		/// <param name="idHook">Type: <b>int</b></param>
		/// <param name="lpfn">
		/// <para>Type: <b>HOOKPROC</b> A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowshookexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hmod">
		/// <para>Type: <b>HINSTANCE</b> A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowshookexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwThreadId">
		/// <para>Type: <b>DWORD</b> The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowshookexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HHOOK</b> If the function succeeds, the return value is the handle to the hook procedure. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowshookexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SetWindowsHookExW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HHOOK SetWindowsHookEx(winmdroot.UI.WindowsAndMessaging.WINDOWS_HOOK_ID idHook, winmdroot.UI.WindowsAndMessaging.HOOKPROC lpfn, winmdroot.Foundation.HINSTANCE hmod, uint dwThreadId);

		/// <inheritdoc cref="CallNextHookEx(winmdroot.UI.WindowsAndMessaging.HHOOK, int, winmdroot.Foundation.WPARAM, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.LRESULT CallNextHookEx(SafeHandle hhk, int nCode, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam)
		{
			bool hhkAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HHOOK hhkLocal;
				if (hhk is object)
				{
					hhk.DangerousAddRef(ref hhkAddRef);
					hhkLocal = (winmdroot.UI.WindowsAndMessaging.HHOOK)hhk.DangerousGetHandle();
				}
				else
					hhkLocal = default(winmdroot.UI.WindowsAndMessaging.HHOOK);
				winmdroot.Foundation.LRESULT __result = PInvoke.CallNextHookEx(hhkLocal, nCode, wParam, lParam);
				return __result;
			}
			finally
			{
				if (hhkAddRef)
					hhk.DangerousRelease();
			}
		}

		/// <summary>Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.</summary>
		/// <param name="hhk">
		/// <para>Type: <b>HHOOK</b> This parameter is ignored.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nCode">
		/// <para>Type: <b>int</b> The hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> The <i>wParam</i> value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> The <i>lParam</i> value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> This value is returned by the next hook procedure in the chain. The current hook procedure must also return this value. The meaning of the return value depends on the hook type. For more information, see the descriptions of the individual hook procedures.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-callnexthookex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT CallNextHookEx(winmdroot.UI.WindowsAndMessaging.HHOOK hhk, int nCode, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="CheckMenuRadioItem(winmdroot.UI.WindowsAndMessaging.HMENU, uint, uint, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL CheckMenuRadioItem(SafeHandle hmenu, uint first, uint last, uint check, uint flags)
		{
			bool hmenuAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HMENU hmenuLocal;
				if (hmenu is object)
				{
					hmenu.DangerousAddRef(ref hmenuAddRef);
					hmenuLocal = (winmdroot.UI.WindowsAndMessaging.HMENU)hmenu.DangerousGetHandle();
				}
				else
					hmenuLocal = default(winmdroot.UI.WindowsAndMessaging.HMENU);
				winmdroot.Foundation.BOOL __result = PInvoke.CheckMenuRadioItem(hmenuLocal, first, last, check, flags);
				return __result;
			}
			finally
			{
				if (hmenuAddRef)
					hmenu.DangerousRelease();
			}
		}

		/// <summary>Checks a specified menu item and makes it a radio item. At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items.</summary>
		/// <param name="hmenu">
		/// <para>Type: <b>HMENU</b> A handle to the menu that contains the group of menu items.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuradioitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="first">
		/// <para>Type: <b>UINT</b> The identifier or position of the first menu item in the group.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuradioitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="last">
		/// <para>Type: <b>UINT</b> The identifier or position of the last menu item in the group.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuradioitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="check">
		/// <para>Type: <b>UINT</b> The identifier or position of the menu item to check.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuradioitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="flags">
		/// <para>Type: <b>UINT</b> Indicates the meaning of <i>idFirst</i>, <i>idLast</i>, and <i>idCheck</i>. If this parameter is <b>MF_BYCOMMAND</b>, the other parameters specify menu item identifiers. If it is <b>MF_BYPOSITION</b>, the other parameters specify the menu item positions.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuradioitem#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-checkmenuradioitem">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL CheckMenuRadioItem(winmdroot.UI.WindowsAndMessaging.HMENU hmenu, uint first, uint last, uint check, uint flags);

		/// <inheritdoc cref="LoadCursor(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyCursorSafeHandle LoadCursor(SafeHandle hInstance, string lpCursorName)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpCursorNameLocal = lpCursorName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.UI.WindowsAndMessaging.HCURSOR __result = PInvoke.LoadCursor(hInstanceLocal, lpCursorNameLocal);
					return new DestroyCursorSafeHandle(__result, ownsHandle: false);
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to an instance of the module whose executable file contains the cursor to be loaded.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadcursorw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpCursorName">
		/// <para>Type: <b>LPCTSTR</b> The name of the cursor resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro can also be used to create this value. To use one of the predefined cursors, the application must set the <i>hInstance</i> parameter to <b>NULL</b> and the <i>lpCursorName</i> parameter to one the following values. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadcursorw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCURSOR</b> If the function succeeds, the return value is the handle to the newly loaded cursor. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadcursorw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadCursorW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HCURSOR LoadCursor(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpCursorName);

		/// <inheritdoc cref="LoadCursorFromFile(winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyCursorSafeHandle LoadCursorFromFile(string lpFileName)
		{
			fixed (char* lpFileNameLocal = lpFileName)
			{
				winmdroot.UI.WindowsAndMessaging.HCURSOR __result = PInvoke.LoadCursorFromFile(lpFileNameLocal);
				return new DestroyCursorSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Creates a cursor based on data contained in a file.</summary>
		/// <param name="lpFileName">
		/// <para>Type: <b>LPCTSTR</b> The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format. If the high-order word of <i>lpFileName</i> is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadcursorfromfilew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCURSOR</b> If the function is successful, the return value is a handle to the new cursor. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>GetLastError</b> may return the following value. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadcursorfromfilew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadCursorFromFileW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HCURSOR LoadCursorFromFile(winmdroot.Foundation.PCWSTR lpFileName);

		/// <inheritdoc cref="CreateCursor(winmdroot.Foundation.HINSTANCE, int, int, int, int, void*, void*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyCursorSafeHandle CreateCursor(SafeHandle hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, void* pvANDPlane, void* pvXORPlane)
		{
			bool hInstAddRef = false;
			try
			{
				winmdroot.Foundation.HINSTANCE hInstLocal;
				if (hInst is object)
				{
					hInst.DangerousAddRef(ref hInstAddRef);
					hInstLocal = (winmdroot.Foundation.HINSTANCE)hInst.DangerousGetHandle();
				}
				else
					hInstLocal = default(winmdroot.Foundation.HINSTANCE);
				winmdroot.UI.WindowsAndMessaging.HCURSOR __result = PInvoke.CreateCursor(hInstLocal, xHotSpot, yHotSpot, nWidth, nHeight, pvANDPlane, pvXORPlane);
				return new DestroyCursorSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hInstAddRef)
					hInst.DangerousRelease();
			}
		}

		/// <summary>Creates a cursor having the specified size, bit patterns, and hot spot.</summary>
		/// <param name="hInst">
		/// <para>Type: <b>HINSTANCE</b> A handle to the current instance of the application creating the cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="xHotSpot">
		/// <para>Type: <b>int</b> The horizontal position of the cursor's hot spot.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="yHotSpot">
		/// <para>Type: <b>int</b> The vertical position of the cursor's hot spot.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nWidth">
		/// <para>Type: <b>int</b> The width of the cursor, in pixels.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nHeight">
		/// <para>Type: <b>int</b> The height of the cursor, in pixels.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pvANDPlane">
		/// <para>Type: <b>const VOID*</b> An array of bytes that contains the bit values for the AND mask of the cursor, as in a device-dependent monochrome bitmap.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pvXORPlane">
		/// <para>Type: <b>const VOID*</b> An array of bytes that contains the bit values for the XOR mask of the cursor, as in a device-dependent monochrome bitmap.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HCURSOR</b> If the function succeeds, the return value is a handle to the cursor. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createcursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.UI.WindowsAndMessaging.HCURSOR CreateCursor(winmdroot.Foundation.HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, void* pvANDPlane, void* pvXORPlane);

		/// <inheritdoc cref="SetSystemCursor(winmdroot.UI.WindowsAndMessaging.HCURSOR, winmdroot.UI.WindowsAndMessaging.SYSTEM_CURSOR_ID)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetSystemCursor(SafeHandle hcur, winmdroot.UI.WindowsAndMessaging.SYSTEM_CURSOR_ID id)
		{
			bool hcurAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HCURSOR hcurLocal;
				if (hcur is object)
				{
					hcur.DangerousAddRef(ref hcurAddRef);
					hcurLocal = (winmdroot.UI.WindowsAndMessaging.HCURSOR)hcur.DangerousGetHandle();
				}
				else
					hcurLocal = default(winmdroot.UI.WindowsAndMessaging.HCURSOR);
				winmdroot.Foundation.BOOL __result = PInvoke.SetSystemCursor(hcurLocal, id);
				return __result;
			}
			finally
			{
				if (hcurAddRef)
					hcur.DangerousRelease();
			}
		}

		/// <summary>Enables an application to customize the system cursors. It replaces the contents of the system cursor specified by the id parameter with the contents of the cursor specified by the hcur parameter and then destroys hcur.</summary>
		/// <param name="hcur">
		/// <para>Type: <b>HCURSOR</b> A handle to the cursor. The function replaces the contents of the system cursor specified by <i>id</i> with the contents of the cursor handled by <i>hcur</i>. The system destroys <i>hcur</i> by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-destroycursor">DestroyCursor</a> function. Therefore, <i>hcur</i> cannot be a cursor loaded using the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadcursora">LoadCursor</a> function. To specify a cursor loaded from a resource, copy the cursor using the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-copycursor">CopyCursor</a> function, then pass the copy to <b>SetSystemCursor</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setsystemcursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="id">Type: <b>DWORD</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setsystemcursor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL SetSystemCursor(winmdroot.UI.WindowsAndMessaging.HCURSOR hcur, winmdroot.UI.WindowsAndMessaging.SYSTEM_CURSOR_ID id);

		/// <inheritdoc cref="LoadIcon(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyIconSafeHandle LoadIcon(SafeHandle hInstance, string lpIconName)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpIconNameLocal = lpIconName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.UI.WindowsAndMessaging.HICON __result = PInvoke.LoadIcon(hInstanceLocal, lpIconNameLocal);
					return new DestroyIconSafeHandle(__result, ownsHandle: true);
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to an instance of the module whose executable file contains the icon to be loaded. This parameter must be <b>NULL</b> when a standard icon is being loaded.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadiconw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpIconName">
		/// <para>Type: <b>LPCTSTR</b> The name of the icon resource to be loaded. Alternatively, this parameter can contain the resource identifier in the low-order word and zero in the high-order word. Use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro to create this value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadiconw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HICON</b> If the function succeeds, the return value is a handle to the newly loaded icon. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadiconw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadIconW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HICON LoadIcon(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpIconName);

		/// <inheritdoc cref="PrivateExtractIcons(winmdroot.Foundation.PCWSTR, int, int, int, winmdroot.UI.WindowsAndMessaging.HICON*, uint*, uint, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint PrivateExtractIcons(string szFileName, int nIconIndex, int cxIcon, int cyIcon, out DestroyIconSafeHandle phicon, Span<uint> piconid, uint flags)
		{
			fixed (uint* piconidLocal = piconid)
			{
				fixed (char* szFileNameLocal = szFileName)
				{
					winmdroot.UI.WindowsAndMessaging.HICON phiconLocal;
					uint __result = PInvoke.PrivateExtractIcons(szFileNameLocal, nIconIndex, cxIcon, cyIcon, &phiconLocal, piconidLocal, (uint )piconid.Length, flags);
					phicon= new DestroyIconSafeHandle(phiconLocal, ownsHandle: true);
					return __result;
				}
			}
		}

		/// <summary>Creates an array of handles to icons that are extracted from a specified file.</summary>
		/// <param name="szFileName">
		/// <para>Type: <b>LPCTSTR</b> The path and name of the file from which the icon(s) are to be extracted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIconIndex">
		/// <para>Type: <b>int</b> The zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cxIcon">
		/// <para>Type: <b>int</b> The horizontal icon size wanted. See Remarks.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cyIcon">
		/// <para>Type: <b>int</b> The vertical icon size wanted. See Remarks.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="phicon">
		/// <para>Type: <b>HICON*</b> A pointer to the returned array of icon handles.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="piconid">
		/// <para>Type: <b>UINT*</b> A pointer to a returned resource identifier for the icon that best fits the current display device.  The returned identifier is 0xFFFFFFFF if the identifier is not available for this format.  The returned identifier is 0 if the identifier cannot otherwise be obtained.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nIcons">
		/// <para>Type: <b>UINT</b> The number of icons to extract from the file. This parameter is only valid when extracting from .exe and .dll files.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="flags">
		/// <para>Type: <b>UINT</b> Specifies flags that control this function.  These flags are the LR_* flags used by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-loadimagea">LoadImage</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the <i>phicon</i>parameter is <b>NULL</b> and this function succeeds, then the return value is the number of icons in the file.  If the function fails then the return value is 0. If the <i>phicon</i> parameter is not <b>NULL</b> and the function succeeds, then the return value is the number of icons extracted.  Otherwise, the return value is 0xFFFFFFFF if the file is not found.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-privateextracticonsw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "PrivateExtractIconsW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint PrivateExtractIcons(winmdroot.Foundation.PCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, [Optional] winmdroot.UI.WindowsAndMessaging.HICON* phicon, [Optional] uint* piconid, uint nIcons, uint flags);

		/// <inheritdoc cref="CreateIcon(winmdroot.Foundation.HINSTANCE, int, int, byte, byte, byte*, byte*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyIconSafeHandle CreateIcon(SafeHandle hInstance, int nWidth, int nHeight, byte cPlanes, byte cBitsPixel, byte* lpbANDbits, byte* lpbXORbits)
		{
			bool hInstanceAddRef = false;
			try
			{
				winmdroot.Foundation.HINSTANCE hInstanceLocal;
				if (hInstance is object)
				{
					hInstance.DangerousAddRef(ref hInstanceAddRef);
					hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
				}
				else
					hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
				winmdroot.UI.WindowsAndMessaging.HICON __result = PInvoke.CreateIcon(hInstanceLocal, nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits, lpbXORbits);
				return new DestroyIconSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates an icon that has the specified size, colors, and bit patterns.</summary>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the instance of the module creating the icon.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nWidth">
		/// <para>Type: <b>int</b> The width, in pixels, of the icon.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nHeight">
		/// <para>Type: <b>int</b> The height, in pixels, of the icon.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cPlanes">
		/// <para>Type: <b>BYTE</b> The number of planes in the XOR bitmask of the icon.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cBitsPixel">
		/// <para>Type: <b>BYTE</b> The number of bits-per-pixel in the XOR bitmask of the icon.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpbANDbits">
		/// <para>Type: <b>const BYTE*</b> An array of bytes that contains the bit values for the AND bitmask of the icon. This bitmask describes a monochrome bitmap.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpbXORbits">
		/// <para>Type: <b>const BYTE*</b> An array of bytes that contains the bit values for the XOR bitmask of the icon. This bitmask describes a monochrome or device-dependent color bitmap.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HICON</b> If the function succeeds, the return value is a handle to an icon. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createicon">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.UI.WindowsAndMessaging.HICON CreateIcon(winmdroot.Foundation.HINSTANCE hInstance, int nWidth, int nHeight, byte cPlanes, byte cBitsPixel, byte* lpbANDbits, byte* lpbXORbits);

		/// <inheritdoc cref="LookupIconIdFromDirectory(byte*, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int LookupIconIdFromDirectory(in byte presbits, winmdroot.Foundation.BOOL fIcon)
		{
			fixed (byte* presbitsLocal = &presbits)
			{
				int __result = PInvoke.LookupIconIdFromDirectory(presbitsLocal, fIcon);
				return __result;
			}
		}

		/// <summary>Searches through icon or cursor data for the icon or cursor that best fits the current display device.</summary>
		/// <param name="presbits">
		/// <para>Type: <b>PBYTE</b> The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <i>presbits</i> is not pointing to valid resource data.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectory#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fIcon">
		/// <para>Type: <b>BOOL</b> Indicates whether an icon or a cursor is sought. If this parameter is <b>TRUE</b>, the function is searching for an icon; if the parameter is <b>FALSE</b>, the function is searching for a cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectory#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectory">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int LookupIconIdFromDirectory(byte* presbits, winmdroot.Foundation.BOOL fIcon);

		/// <inheritdoc cref="LookupIconIdFromDirectoryEx(byte*, winmdroot.Foundation.BOOL, int, int, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int LookupIconIdFromDirectoryEx(in byte presbits, winmdroot.Foundation.BOOL fIcon, int cxDesired, int cyDesired, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS Flags)
		{
			fixed (byte* presbitsLocal = &presbits)
			{
				int __result = PInvoke.LookupIconIdFromDirectoryEx(presbitsLocal, fIcon, cxDesired, cyDesired, Flags);
				return __result;
			}
		}

		/// <summary>Searches through icon or cursor data for the icon or cursor that best fits the current display device.</summary>
		/// <param name="presbits">
		/// <para>Type: <b>PBYTE</b> The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <i>presbits</i> is not pointing to valid resource data.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectoryex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fIcon">
		/// <para>Type: <b>BOOL</b> Indicates whether an icon or a cursor is sought. If this parameter is <b>TRUE</b>, the function is searching for an icon; if the parameter is <b>FALSE</b>, the function is searching for a cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectoryex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cxDesired">
		/// <para>Type: <b>int</b> The desired width, in pixels, of the icon. If this parameter is zero, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectoryex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cyDesired">
		/// <para>Type: <b>int</b> The desired height, in pixels, of the icon. If this parameter is zero, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectoryex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Flags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lookupiconidfromdirectoryex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int LookupIconIdFromDirectoryEx(byte* presbits, winmdroot.Foundation.BOOL fIcon, int cxDesired, int cyDesired, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS Flags);

		/// <inheritdoc cref="CreateIconFromResource(byte*, uint, winmdroot.Foundation.BOOL, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyIconSafeHandle CreateIconFromResource(in byte presbits, uint dwResSize, winmdroot.Foundation.BOOL fIcon, uint dwVer)
		{
			fixed (byte* presbitsLocal = &presbits)
			{
				winmdroot.UI.WindowsAndMessaging.HICON __result = PInvoke.CreateIconFromResource(presbitsLocal, dwResSize, fIcon, dwVer);
				return new DestroyIconSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Creates an icon or cursor from resource bits describing the icon.</summary>
		/// <param name="presbits">
		/// <para>Type: <b>PBYTE</b> The buffer containing the icon or cursor resource bits. These bits are typically loaded by calls to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-lookupiconidfromdirectory">LookupIconIdFromDirectory</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-lookupiconidfromdirectoryex">LookupIconIdFromDirectoryEx</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadresource">LoadResource</a> functions.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresource#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwResSize">
		/// <para>Type: <b>DWORD</b> The size, in bytes, of the set of bits pointed to by the <i>presbits</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresource#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fIcon">
		/// <para>Type: <b>BOOL</b> Indicates whether an icon or a cursor is to be created. If this parameter is <b>TRUE</b>, an icon is to be created. If it is <b>FALSE</b>, a cursor is to be created.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresource#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwVer">
		/// <para>Type: <b>DWORD</b> The version number of the icon or cursor format for the resource bits pointed to by the <i>presbits</i> parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresource#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HICON</b> If the function succeeds, the return value is a handle to the icon or cursor. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresource">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.UI.WindowsAndMessaging.HICON CreateIconFromResource(byte* presbits, uint dwResSize, winmdroot.Foundation.BOOL fIcon, uint dwVer);

		/// <inheritdoc cref="CreateIconFromResourceEx(byte*, uint, winmdroot.Foundation.BOOL, uint, int, int, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyIconSafeHandle CreateIconFromResourceEx(in byte presbits, uint dwResSize, winmdroot.Foundation.BOOL fIcon, uint dwVer, int cxDesired, int cyDesired, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS Flags)
		{
			fixed (byte* presbitsLocal = &presbits)
			{
				winmdroot.UI.WindowsAndMessaging.HICON __result = PInvoke.CreateIconFromResourceEx(presbitsLocal, dwResSize, fIcon, dwVer, cxDesired, cyDesired, Flags);
				return new DestroyIconSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Creates an icon or cursor from resource bits describing the icon.</summary>
		/// <param name="presbits">
		/// <para>Type: <b>PBYTE</b> The icon or cursor resource bits. These bits are typically loaded by calls to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-lookupiconidfromdirectoryex">LookupIconIdFromDirectoryEx</a> and <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadresource">LoadResource</a> functions.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresourceex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwResSize">
		/// <para>Type: <b>DWORD</b> The size, in bytes, of the set of bits pointed to by the <i>pbIconBits</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresourceex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fIcon">
		/// <para>Type: <b>BOOL</b> Indicates whether an icon or a cursor is to be created. If this parameter is <b>TRUE</b>, an icon is to be created. If it is <b>FALSE</b>, a cursor is to be created.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresourceex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwVer">
		/// <para>Type: <b>DWORD</b> The version number of the icon or cursor format for the resource bits pointed to by the <i>pbIconBits</i> parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresourceex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cxDesired">
		/// <para>Type: <b>int</b> The desired width, in pixels, of the icon or cursor. If this parameter is zero, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresourceex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cyDesired">
		/// <para>Type: <b>int</b> The desired height, in pixels, of the icon or cursor. If this parameter is zero, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresourceex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Flags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HICON</b> If the function succeeds, the return value is a handle to the icon or cursor. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconfromresourceex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.UI.WindowsAndMessaging.HICON CreateIconFromResourceEx(byte* presbits, uint dwResSize, winmdroot.Foundation.BOOL fIcon, uint dwVer, int cxDesired, int cyDesired, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS Flags);

		/// <inheritdoc cref="LoadImage(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR, winmdroot.UI.WindowsAndMessaging.GDI_IMAGE_TYPE, int, int, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe Microsoft.Win32.SafeHandles.SafeFileHandle LoadImage(SafeHandle hInst, string name, winmdroot.UI.WindowsAndMessaging.GDI_IMAGE_TYPE type, int cx, int cy, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS fuLoad)
		{
			bool hInstAddRef = false;
			try
			{
				fixed (char* nameLocal = name)
				{
					winmdroot.Foundation.HINSTANCE hInstLocal;
					if (hInst is object)
					{
						hInst.DangerousAddRef(ref hInstAddRef);
						hInstLocal = (winmdroot.Foundation.HINSTANCE)hInst.DangerousGetHandle();
					}
					else
						hInstLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.Foundation.HANDLE __result = PInvoke.LoadImage(hInstLocal, nameLocal, type, cx, cy, fuLoad);
					return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
				}
			}
			finally
			{
				if (hInstAddRef)
					hInst.DangerousRelease();
			}
		}

		/// <summary>Loads an icon, cursor, animated cursor, or bitmap.</summary>
		/// <param name="hInst">
		/// <para>Type: <b>HINSTANCE</b> A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>. Note that as of  32-bit Windows, an instance handle (<b>HINSTANCE</b>), such as the application instance handle exposed by system function call of <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-winmain">WinMain</a>, and a module handle (<b>HMODULE</b>) are the same thing.</para>
		/// <para>To load an OEM image, set this parameter to <b>NULL</b>. To load a stand-alone resource (icon, cursor, or bitmap file)—for example, c:\myimage.bmp—set this parameter to <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadimagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="name">
		/// <para>Type: <b>LPCTSTR</b> The image to be loaded. If the <i>hinst</i> parameter is non-<b>NULL</b> and the <i>fuLoad</i> parameter omits <b>LR_LOADFROMFILE</b>, <i>lpszName</i> specifies the image resource in the <i>hinst</i> module. If the image resource is to be loaded by name from the module, the <i>lpszName</i> parameter is a pointer to a null-terminated string that contains the name of the image resource. If the image resource is to be loaded by ordinal from the module, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro to convert the image ordinal into a form that can be passed to the <b>LoadImage</b> function. For more information, see the Remarks section below. If the <i>hinst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter omits the <b>LR_LOADFROMFILE</b> value, the <i>lpszName</i> specifies the OEM image to load. The OEM image identifiers are defined in Winuser.h and have the following prefixes. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadimagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="type">Type: <b>UINT</b></param>
		/// <param name="cx">
		/// <para>Type: <b>int</b> The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadimagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cy">
		/// <para>Type: <b>int</b> The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadimagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fuLoad">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HANDLE</b> If the function succeeds, the return value is the handle of the newly loaded image. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadimagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadImageW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HANDLE LoadImage(winmdroot.Foundation.HINSTANCE hInst, winmdroot.Foundation.PCWSTR name, winmdroot.UI.WindowsAndMessaging.GDI_IMAGE_TYPE type, int cx, int cy, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS fuLoad);

		/// <inheritdoc cref="CopyImage(winmdroot.Foundation.HANDLE, winmdroot.UI.WindowsAndMessaging.GDI_IMAGE_TYPE, int, int, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe Microsoft.Win32.SafeHandles.SafeFileHandle CopyImage(SafeHandle h, winmdroot.UI.WindowsAndMessaging.GDI_IMAGE_TYPE type, int cx, int cy, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS flags)
		{
			bool hAddRef = false;
			try
			{
				winmdroot.Foundation.HANDLE hLocal;
				if (h is object)
				{
					h.DangerousAddRef(ref hAddRef);
					hLocal = (winmdroot.Foundation.HANDLE)h.DangerousGetHandle();
				}
				else
					hLocal = default(winmdroot.Foundation.HANDLE);
				winmdroot.Foundation.HANDLE __result = PInvoke.CopyImage(hLocal, type, cx, cy, flags);
				return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hAddRef)
					h.DangerousRelease();
			}
		}

		/// <summary>Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image.</summary>
		/// <param name="h">
		/// <para>Type: <b>HANDLE</b> A handle to the image to be copied.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyimage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="type">Type: <b>UINT</b></param>
		/// <param name="cx">
		/// <para>Type: <b>int</b> The desired width, in pixels, of the image. If this is zero, then the returned image will have the same width as the original <i>hImage</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyimage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cy">
		/// <para>Type: <b>int</b> The desired height, in pixels, of the image. If this is zero, then the returned image will have the same height as the original <i>hImage</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyimage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="flags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HANDLE</b> If the function succeeds, the return value is the handle to the newly created image. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyimage">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HANDLE CopyImage(winmdroot.Foundation.HANDLE h, winmdroot.UI.WindowsAndMessaging.GDI_IMAGE_TYPE type, int cx, int cy, winmdroot.UI.WindowsAndMessaging.IMAGE_FLAGS flags);

		/// <inheritdoc cref="DrawIconEx(winmdroot.Graphics.Gdi.HDC, int, int, winmdroot.UI.WindowsAndMessaging.HICON, int, int, uint, winmdroot.Graphics.Gdi.HBRUSH, winmdroot.UI.WindowsAndMessaging.DI_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawIconEx(SafeHandle hdc, int xLeft, int yTop, SafeHandle hIcon, int cxWidth, int cyWidth, uint istepIfAniCur, SafeHandle hbrFlickerFreeDraw, winmdroot.UI.WindowsAndMessaging.DI_FLAGS diFlags)
		{
			bool hdcAddRef = false;
			bool hIconAddRef = false;
			bool hbrFlickerFreeDrawAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hdcLocal;
				if (hdc is object)
				{
					hdc.DangerousAddRef(ref hdcAddRef);
					hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
				}
				else
					hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.UI.WindowsAndMessaging.HICON hIconLocal;
				if (hIcon is object)
				{
					hIcon.DangerousAddRef(ref hIconAddRef);
					hIconLocal = (winmdroot.UI.WindowsAndMessaging.HICON)hIcon.DangerousGetHandle();
				}
				else
					hIconLocal = default(winmdroot.UI.WindowsAndMessaging.HICON);
				winmdroot.Graphics.Gdi.HBRUSH hbrFlickerFreeDrawLocal;
				if (hbrFlickerFreeDraw is object)
				{
					hbrFlickerFreeDraw.DangerousAddRef(ref hbrFlickerFreeDrawAddRef);
					hbrFlickerFreeDrawLocal = (winmdroot.Graphics.Gdi.HBRUSH)hbrFlickerFreeDraw.DangerousGetHandle();
				}
				else
					hbrFlickerFreeDrawLocal = default(winmdroot.Graphics.Gdi.HBRUSH);
				winmdroot.Foundation.BOOL __result = PInvoke.DrawIconEx(hdcLocal, xLeft, yTop, hIconLocal, cxWidth, cyWidth, istepIfAniCur, hbrFlickerFreeDrawLocal, diFlags);
				return __result;
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
				if (hIconAddRef)
					hIcon.DangerousRelease();
				if (hbrFlickerFreeDrawAddRef)
					hbrFlickerFreeDraw.DangerousRelease();
			}
		}

		/// <summary>Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified.</summary>
		/// <param name="hdc">
		/// <para>Type: <b>HDC</b> A handle to the device context into which the icon or cursor will be drawn.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="xLeft">
		/// <para>Type: <b>int</b> The logical x-coordinate of the upper-left corner of the icon or cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="yTop">
		/// <para>Type: <b>int</b> The logical y-coordinate of the upper-left corner of the icon or cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hIcon">
		/// <para>Type: <b>HICON</b> A handle to the icon or cursor to be drawn. This parameter can identify an animated cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cxWidth">
		/// <para>Type: <b>int</b> The logical width of the icon or cursor. If this parameter is zero and the <i>diFlags</i> parameter is <b>DI_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> system metric value to set the width. If this parameter is zero and <b>DI_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cyWidth">
		/// <para>Type: <b>int</b> The logical height of the icon or cursor. If this parameter is zero and the <i>diFlags</i> parameter is <b>DI_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> system metric value to set the width. If this parameter is zero and <b>DI_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="istepIfAniCur">
		/// <para>Type: <b>UINT</b> The index of the frame to draw, if <i>hIcon</i> identifies an animated cursor. This parameter is ignored if <i>hIcon</i> does not identify an animated cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hbrFlickerFreeDraw">
		/// <para>Type: <b>HBRUSH</b> A handle to a brush that the system uses for flicker-free drawing. If <i>hbrFlickerFreeDraw</i> is a valid brush handle, the system creates an offscreen bitmap using the specified brush for the background color, draws the icon or cursor into the bitmap, and then copies the bitmap into the device context identified by <i>hdc</i>. If <i>hbrFlickerFreeDraw</i> is <b>NULL</b>, the system draws the icon or cursor directly into the device context.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="diFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawiconex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DrawIconEx(winmdroot.Graphics.Gdi.HDC hdc, int xLeft, int yTop, winmdroot.UI.WindowsAndMessaging.HICON hIcon, int cxWidth, int cyWidth, uint istepIfAniCur, winmdroot.Graphics.Gdi.HBRUSH hbrFlickerFreeDraw, winmdroot.UI.WindowsAndMessaging.DI_FLAGS diFlags);

		/// <inheritdoc cref="CreateIconIndirect(winmdroot.UI.WindowsAndMessaging.ICONINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyIconSafeHandle CreateIconIndirect(in winmdroot.UI.WindowsAndMessaging.ICONINFO piconinfo)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.ICONINFO* piconinfoLocal = &piconinfo)
			{
				winmdroot.UI.WindowsAndMessaging.HICON __result = PInvoke.CreateIconIndirect(piconinfoLocal);
				return new DestroyIconSafeHandle(__result, ownsHandle: true);
			}
		}

		/// <summary>Creates an icon or cursor from an ICONINFO structure.</summary>
		/// <param name="piconinfo">
		/// <para>Type: <b>PICONINFO</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a> structure the function uses to create the icon or cursor.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconindirect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HICON</b> If the function succeeds, the return value is a handle to the icon or cursor that is created. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createiconindirect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.UI.WindowsAndMessaging.HICON CreateIconIndirect(winmdroot.UI.WindowsAndMessaging.ICONINFO* piconinfo);

		/// <inheritdoc cref="CopyIcon(winmdroot.UI.WindowsAndMessaging.HICON)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DestroyIconSafeHandle CopyIcon(SafeHandle hIcon)
		{
			bool hIconAddRef = false;
			try
			{
				winmdroot.UI.WindowsAndMessaging.HICON hIconLocal;
				if (hIcon is object)
				{
					hIcon.DangerousAddRef(ref hIconAddRef);
					hIconLocal = (winmdroot.UI.WindowsAndMessaging.HICON)hIcon.DangerousGetHandle();
				}
				else
					hIconLocal = default(winmdroot.UI.WindowsAndMessaging.HICON);
				winmdroot.UI.WindowsAndMessaging.HICON __result = PInvoke.CopyIcon(hIconLocal);
				return new DestroyIconSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hIconAddRef)
					hIcon.DangerousRelease();
			}
		}

		/// <summary>Copies the specified icon from another module to the current module.</summary>
		/// <param name="hIcon">
		/// <para>Type: <b>HICON</b> A handle to the icon to be copied.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HICON</b> If the function succeeds, the return value is a handle to the duplicate icon. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyicon">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.UI.WindowsAndMessaging.HICON CopyIcon(winmdroot.UI.WindowsAndMessaging.HICON hIcon);

		/// <inheritdoc cref="GetIconInfo(winmdroot.UI.WindowsAndMessaging.HICON, winmdroot.UI.WindowsAndMessaging.ICONINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetIconInfo(SafeHandle hIcon, out winmdroot.UI.WindowsAndMessaging.ICONINFO piconinfo)
		{
			bool hIconAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.ICONINFO* piconinfoLocal = &piconinfo)
				{
					winmdroot.UI.WindowsAndMessaging.HICON hIconLocal;
					if (hIcon is object)
					{
						hIcon.DangerousAddRef(ref hIconAddRef);
						hIconLocal = (winmdroot.UI.WindowsAndMessaging.HICON)hIcon.DangerousGetHandle();
					}
					else
						hIconLocal = default(winmdroot.UI.WindowsAndMessaging.HICON);
					winmdroot.Foundation.BOOL __result = PInvoke.GetIconInfo(hIconLocal, piconinfoLocal);
					return __result;
				}
			}
			finally
			{
				if (hIconAddRef)
					hIcon.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about the specified icon or cursor.</summary>
		/// <param name="hIcon">Type: <b>HICON</b></param>
		/// <param name="piconinfo">
		/// <para>Type: <b>PICONINFO</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a> structure. The function fills in the structure's members.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-geticoninfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero and the function fills in the members of the specified <a href="/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a> structure. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-geticoninfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetIconInfo(winmdroot.UI.WindowsAndMessaging.HICON hIcon, winmdroot.UI.WindowsAndMessaging.ICONINFO* piconinfo);

		/// <inheritdoc cref="GetIconInfoEx(winmdroot.UI.WindowsAndMessaging.HICON, winmdroot.UI.WindowsAndMessaging.ICONINFOEXW*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL GetIconInfoEx(SafeHandle hicon, ref winmdroot.UI.WindowsAndMessaging.ICONINFOEXW piconinfo)
		{
			bool hiconAddRef = false;
			try
			{
				fixed (winmdroot.UI.WindowsAndMessaging.ICONINFOEXW* piconinfoLocal = &piconinfo)
				{
					winmdroot.UI.WindowsAndMessaging.HICON hiconLocal;
					if (hicon is object)
					{
						hicon.DangerousAddRef(ref hiconAddRef);
						hiconLocal = (winmdroot.UI.WindowsAndMessaging.HICON)hicon.DangerousGetHandle();
					}
					else
						hiconLocal = default(winmdroot.UI.WindowsAndMessaging.HICON);
					winmdroot.Foundation.BOOL __result = PInvoke.GetIconInfoEx(hiconLocal, piconinfoLocal);
					return __result;
				}
			}
			finally
			{
				if (hiconAddRef)
					hicon.DangerousRelease();
			}
		}

		/// <summary>Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure.</summary>
		/// <param name="hicon">Type: <b>HICON</b></param>
		/// <param name="piconinfo">
		/// <para>Type: <b>PICONINFOEX</b> When this method returns, contains a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-iconinfoexa">ICONINFOEX</a> structure. The function fills in the structure's members.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-geticoninfoexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> indicates success, <b>FALSE</b> indicates failure.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-geticoninfoexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetIconInfoExW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetIconInfoEx(winmdroot.UI.WindowsAndMessaging.HICON hicon, winmdroot.UI.WindowsAndMessaging.ICONINFOEXW* piconinfo);

		/// <inheritdoc cref="IsDialogMessage(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.MSG*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL IsDialogMessage(winmdroot.Foundation.HWND hDlg, in winmdroot.UI.WindowsAndMessaging.MSG lpMsg)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IsDialogMessage(hDlg, lpMsgLocal);
				return __result;
			}
		}

		/// <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message.</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to the dialog box.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isdialogmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpMsg">
		/// <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that contains the message to be checked.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isdialogmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the message has been processed, the return value is nonzero. If the message has not been processed, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isdialogmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "IsDialogMessageW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL IsDialogMessage(winmdroot.Foundation.HWND hDlg, winmdroot.UI.WindowsAndMessaging.MSG* lpMsg);

		/// <inheritdoc cref="MapDialogRect(winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL MapDialogRect(winmdroot.Foundation.HWND hDlg, ref winmdroot.Foundation.RECT lpRect)
		{
			fixed (winmdroot.Foundation.RECT* lpRectLocal = &lpRect)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.MapDialogRect(hDlg, lpRectLocal);
				return __result;
			}
		}

		/// <summary>Converts the specified dialog box units to screen units (pixels).</summary>
		/// <param name="hDlg">
		/// <para>Type: <b>HWND</b> A handle to a dialog box. This function accepts only handles returned by one of the dialog box creation functions; handles for other windows are not valid.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapdialogrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpRect">
		/// <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the dialog box coordinates to be converted.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapdialogrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapdialogrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL MapDialogRect(winmdroot.Foundation.HWND hDlg, winmdroot.Foundation.RECT* lpRect);

		/// <inheritdoc cref="GetScrollInfo(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS, winmdroot.UI.WindowsAndMessaging.SCROLLINFO*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL GetScrollInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, ref winmdroot.UI.WindowsAndMessaging.SCROLLINFO lpsi)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.SCROLLINFO* lpsiLocal = &lpsi)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetScrollInfo(hwnd, nBar, lpsiLocal);
				return __result;
			}
		}

		/// <summary>The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb).</summary>
		/// <param name="hwnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>fnBar</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nBar">Type: <b>int</b></param>
		/// <param name="lpsi">
		/// <para>Type: <b>LPSCROLLINFO</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-scrollinfo">SCROLLINFO</a> structure. Before calling <b>GetScrollInfo</b>, set the <b>cbSize</b> member to <b>sizeof</b>(<b>SCROLLINFO</b>), and set the <b>fMask</b> member to specify the scroll bar parameters to retrieve. Before returning, the function copies the specified parameters to the appropriate members of the structure. The</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function retrieved any values, the return value is nonzero. If the function does not retrieve any values, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetScrollInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS nBar, winmdroot.UI.WindowsAndMessaging.SCROLLINFO* lpsi);

		/// <summary>Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the MDI frame window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defframeprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndMDIClient">
		/// <para>Type: <b>HWND</b> A handle to the MDI client window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defframeprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uMsg">
		/// <para>Type: <b>UINT</b> The message to be processed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defframeprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defframeprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defframeprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value specifies the result of the message processing and depends on the message. If the <i>hWndMDIClient</i> parameter is <b>NULL</b>, the return value is the same as for the <a href="/windows/desktop/api/winuser/nf-winuser-defwindowproca">DefWindowProc</a> function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defframeprocw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DefFrameProcW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT DefFrameProc(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.HWND hWndMDIClient, uint uMsg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <summary>Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the MDI child window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defmdichildprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uMsg">
		/// <para>Type: <b>UINT</b> The message to be processed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defmdichildprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		/// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defmdichildprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defmdichildprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>LRESULT</b> The return value specifies the result of the message processing and depends on the message.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defmdichildprocw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DefMDIChildProcW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.LRESULT DefMDIChildProc(winmdroot.Foundation.HWND hWnd, uint uMsg, winmdroot.Foundation.WPARAM wParam, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="TranslateMDISysAccel(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.MSG*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL TranslateMDISysAccel(winmdroot.Foundation.HWND hWndClient, in winmdroot.UI.WindowsAndMessaging.MSG lpMsg)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.TranslateMDISysAccel(hWndClient, lpMsgLocal);
				return __result;
			}
		}

		/// <summary>Processes accelerator keystrokes for window menu commands of the multiple-document interface (MDI) child windows associated with the specified MDI client window.</summary>
		/// <param name="hWndClient">
		/// <para>Type: <b>HWND</b> A handle to the MDI client window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemdisysaccel#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpMsg">
		/// <para>Type: <b>LPMSG</b> A pointer to a message retrieved by using the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> function. The message must be an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure and contain message information from the application's message queue.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemdisysaccel#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the message is translated into a system command, the return value is nonzero. If the message is not translated into a system command, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemdisysaccel">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL TranslateMDISysAccel(winmdroot.Foundation.HWND hWndClient, winmdroot.UI.WindowsAndMessaging.MSG* lpMsg);

		/// <summary>Arranges all the minimized (iconic) child windows of the specified parent window.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the parent window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-arrangeiconicwindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is the height of one row of icons. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-arrangeiconicwindows">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint ArrangeIconicWindows(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="CreateMDIWindow(winmdroot.Foundation.PCWSTR, winmdroot.Foundation.PCWSTR, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE, int, int, int, int, winmdroot.Foundation.HWND, winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.HWND CreateMDIWindow(string lpClassName, string lpWindowName, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, winmdroot.Foundation.HWND hWndParent, SafeHandle hInstance, winmdroot.Foundation.LPARAM lParam)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpWindowNameLocal = lpWindowName)
				{
					fixed (char* lpClassNameLocal = lpClassName)
					{
						winmdroot.Foundation.HINSTANCE hInstanceLocal;
						if (hInstance is object)
						{
							hInstance.DangerousAddRef(ref hInstanceAddRef);
							hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
						}
						else
							hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
						winmdroot.Foundation.HWND __result = PInvoke.CreateMDIWindow(lpClassNameLocal, lpWindowNameLocal, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstanceLocal, lParam);
						return __result;
					}
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates a multiple-document interface (MDI) child window.</summary>
		/// <param name="lpClassName">
		/// <para>Type: <b>LPCTSTR</b> The window class of the MDI child window. The class name must have been registered by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpWindowName">
		/// <para>Type: <b>LPCTSTR</b> The window name. The system displays the name in the title bar of the child window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwStyle">Type: <b>DWORD</b></param>
		/// <param name="X">
		/// <para>Type: <b>int</b> The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b> ((int)0x80000000), the MDI child window is assigned the default horizontal position.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		/// <para>Type: <b>int</b> The initial vertical position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default vertical position.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nWidth">
		/// <para>Type: <b>int</b> The initial width, in device units, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default width.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nHeight">
		/// <para>Type: <b>int</b> The initial height, in device units, of the MDI child window. If this parameter is set to <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default height.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndParent">
		/// <para>Type: <b>HWND</b> A handle to the MDI client window that will be the parent of the new MDI child window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hInstance">
		/// <para>Type: <b>HINSTANCE</b> A handle to the instance of the application creating the MDI child window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		/// <para>Type: <b>LPARAM</b> An application-defined value.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> If the function succeeds, the return value is the handle to the created window. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createmdiwindoww">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "CreateMDIWindowW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND CreateMDIWindow(winmdroot.Foundation.PCWSTR lpClassName, winmdroot.Foundation.PCWSTR lpWindowName, winmdroot.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, winmdroot.Foundation.HWND hWndParent, winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.LPARAM lParam);

		/// <inheritdoc cref="TileWindows(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.TILE_WINDOWS_HOW, winmdroot.Foundation.RECT*, uint, winmdroot.Foundation.HWND*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe ushort TileWindows(winmdroot.Foundation.HWND hwndParent, winmdroot.UI.WindowsAndMessaging.TILE_WINDOWS_HOW wHow, winmdroot.Foundation.RECT? lpRect, ReadOnlySpan<winmdroot.Foundation.HWND> lpKids)
		{
			fixed (winmdroot.Foundation.HWND* lpKidsLocal = lpKids)
			{
				winmdroot.Foundation.RECT lpRectLocal = lpRect.HasValue ? lpRect.Value : default(winmdroot.Foundation.RECT);
				ushort __result = PInvoke.TileWindows(hwndParent, wHow, lpRect.HasValue ? &lpRectLocal : null, (uint )lpKids.Length, lpKidsLocal);
				return __result;
			}
		}

		/// <summary>Tiles the specified child windows of the specified parent window.</summary>
		/// <param name="hwndParent">
		/// <para>Type: <b>HWND</b> A handle to the parent window. If this parameter is <b>NULL</b>, the desktop window is assumed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tilewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wHow">Type: <b>UINT</b></param>
		/// <param name="lpRect">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. If this parameter is <b>NULL</b>, the client area of the parent window is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tilewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cKids">
		/// <para>Type: <b>UINT</b> The number of elements in the array specified by the <i>lpKids</i> parameter. This parameter is ignored if <i>lpKids</i> is <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tilewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpKids">
		/// <para>Type: <b>const HWND*</b> An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style <b>WS_EX_TOPMOST</b> or <b>WS_EX_TOOLWINDOW</b>, the child window is not arranged. If this parameter is <b>NULL</b>, all child windows of the specified parent window (or of the desktop window) are arranged.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tilewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>WORD</b> If the function succeeds, the return value is the number of windows arranged. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tilewindows">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe ushort TileWindows(winmdroot.Foundation.HWND hwndParent, winmdroot.UI.WindowsAndMessaging.TILE_WINDOWS_HOW wHow, [Optional] winmdroot.Foundation.RECT* lpRect, uint cKids, [Optional] winmdroot.Foundation.HWND* lpKids);

		/// <inheritdoc cref="CascadeWindows(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.CASCADE_WINDOWS_HOW, winmdroot.Foundation.RECT*, uint, winmdroot.Foundation.HWND*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe ushort CascadeWindows(winmdroot.Foundation.HWND hwndParent, winmdroot.UI.WindowsAndMessaging.CASCADE_WINDOWS_HOW wHow, winmdroot.Foundation.RECT? lpRect, ReadOnlySpan<winmdroot.Foundation.HWND> lpKids)
		{
			fixed (winmdroot.Foundation.HWND* lpKidsLocal = lpKids)
			{
				winmdroot.Foundation.RECT lpRectLocal = lpRect.HasValue ? lpRect.Value : default(winmdroot.Foundation.RECT);
				ushort __result = PInvoke.CascadeWindows(hwndParent, wHow, lpRect.HasValue ? &lpRectLocal : null, (uint )lpKids.Length, lpKidsLocal);
				return __result;
			}
		}

		/// <summary>Cascades the specified child windows of the specified parent window.</summary>
		/// <param name="hwndParent">
		/// <para>Type: <b>HWND</b> A handle to the parent window. If this parameter is <b>NULL</b>, the desktop window is assumed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-cascadewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wHow">Type: <b>UINT</b></param>
		/// <param name="lpRect">
		/// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. This parameter can be <b>NULL</b>, in which case the client area of the parent window is used.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-cascadewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cKids">
		/// <para>Type: <b>UINT</b> The number of elements in the array specified by the <i>lpKids</i> parameter. This parameter is ignored if <i>lpKids</i> is <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-cascadewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpKids">
		/// <para>Type: <b>const HWND*</b> An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style <b>WS_EX_TOPMOST</b> or <b>WS_EX_TOOLWINDOW</b>, the child window is not arranged. If this parameter is <b>NULL</b>, all child windows of the specified parent window (or of the desktop window) are arranged.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-cascadewindows#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>WORD</b> If the function succeeds, the return value is the number of windows arranged. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-cascadewindows">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe ushort CascadeWindows(winmdroot.Foundation.HWND hwndParent, winmdroot.UI.WindowsAndMessaging.CASCADE_WINDOWS_HOW wHow, [Optional] winmdroot.Foundation.RECT* lpRect, uint cKids, [Optional] winmdroot.Foundation.HWND* lpKids);

		/// <summary>Retrieves or sets the value of one of the system-wide parameters.</summary>
		/// <param name="uiAction">
		/// <para>Type: <b>UINT</b> The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters: </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="uiParam">
		/// <para>Type: <b>UINT</b> A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify zero for this parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pvParam">
		/// <para>Type: <b>PVOID</b> A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify <b>NULL</b> for this parameter. For information on the <b>PVOID</b> datatype, see <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">Windows Data Types</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="fWinIni">
		/// <para>Type: <b>UINT</b> If a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-settingchange">WM_SETTINGCHANGE</a> message is to be broadcast to all top-level windows to notify them of the change.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-systemparametersinfow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "SystemParametersInfoW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SystemParametersInfo(winmdroot.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION uiAction, uint uiParam, [Optional] void* pvParam, winmdroot.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS fWinIni);

		/// <summary>Triggers a visual signal to indicate that a sound is playing.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> This function returns one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-soundsentry">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL SoundSentry();

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern void SetDebugErrorLevel(uint dwLevel);

		/// <summary>Copies the text of the specified window's title bar (if it has one) into a buffer.</summary>
		/// <param name="hWnd">
		/// <para>Type: <b>HWND</b> A handle to the window or control containing the text.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-internalgetwindowtext#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pString">
		/// <para>Type: <b>LPWSTR</b> The buffer that is to receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-internalgetwindowtext#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchMaxCount">
		/// <para>Type: <b>int</b> The maximum number of characters to be copied to the buffer, including the null character. If the text exceeds this limit, it is truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-internalgetwindowtext#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>int</b> If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-internalgetwindowtext">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int InternalGetWindowText(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.PWSTR pString, int cchMaxCount);

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL CancelShutdown();

		/// <inheritdoc cref="GetGUIThreadInfo(uint, winmdroot.UI.WindowsAndMessaging.GUITHREADINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetGUIThreadInfo(uint idThread, ref winmdroot.UI.WindowsAndMessaging.GUITHREADINFO pgui)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.GUITHREADINFO* pguiLocal = &pgui)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetGUIThreadInfo(idThread, pguiLocal);
				return __result;
			}
		}

		/// <summary>Retrieves information about the active window or a specified GUI thread.</summary>
		/// <param name="idThread">
		/// <para>Type: <b>DWORD</b> The identifier for the thread for which information is to be retrieved. To retrieve this value, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getwindowthreadprocessid">GetWindowThreadProcessId</a> function. If this parameter is <b>NULL</b>, the function returns information for the foreground thread.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getguithreadinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pgui">
		/// <para>Type: <b>LPGUITHREADINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-guithreadinfo">GUITHREADINFO</a> structure that receives information describing the thread. Note that you must set the <b>cbSize</b> member to <c>sizeof(GUITHREADINFO)</c> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getguithreadinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getguithreadinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetGUIThreadInfo(uint idThread, winmdroot.UI.WindowsAndMessaging.GUITHREADINFO* pgui);

		/// <summary>SetProcessDPIAware may be altered or unavailable. Instead, use SetProcessDPIAwareness.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. Otherwise, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setprocessdpiaware">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL SetProcessDPIAware();

		/// <summary>IsProcessDPIAware may be altered or unavailable. Instead, use GetProcessDPIAwareness.</summary>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> if the process is dpi aware; otherwise, <b>FALSE</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isprocessdpiaware">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL IsProcessDPIAware();

		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL InheritWindowMonitor(winmdroot.Foundation.HWND hwnd, winmdroot.Foundation.HWND hwndInherit);

		/// <summary>Retrieves the full path and file name of the module associated with the specified window handle.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose module file name is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowmodulefilenamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pszFileName">
		/// <para>Type: <b>LPTSTR</b> The path and file name.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowmodulefilenamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchFileNameMax">
		/// <para>Type: <b>UINT</b> The maximum number of characters that can be copied into the <i>lpszFileName</i> buffer.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowmodulefilenamew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> The return value is the total number of characters copied into the buffer.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowmodulefilenamew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetWindowModuleFileNameW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetWindowModuleFileName(winmdroot.Foundation.HWND hwnd, winmdroot.Foundation.PWSTR pszFileName, uint cchFileNameMax);

		/// <inheritdoc cref="GetCursorInfo(winmdroot.UI.WindowsAndMessaging.CURSORINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetCursorInfo(ref winmdroot.UI.WindowsAndMessaging.CURSORINFO pci)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.CURSORINFO* pciLocal = &pci)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetCursorInfo(pciLocal);
				return __result;
			}
		}

		/// <summary>Retrieves information about the global cursor.</summary>
		/// <param name="pci">
		/// <para>Type: <b>PCURSORINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/winuser/ns-winuser-cursorinfo">CURSORINFO</a> structure that receives the information. Note that you must set the <b>cbSize</b> member to <c>sizeof(CURSORINFO)</c> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetCursorInfo(winmdroot.UI.WindowsAndMessaging.CURSORINFO* pci);

		/// <inheritdoc cref="GetWindowInfo(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.WINDOWINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetWindowInfo(winmdroot.Foundation.HWND hwnd, ref winmdroot.UI.WindowsAndMessaging.WINDOWINFO pwi)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.WINDOWINFO* pwiLocal = &pwi)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetWindowInfo(hwnd, pwiLocal);
				return __result;
			}
		}

		/// <summary>Retrieves information about the specified window.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose information is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pwi">
		/// <para>Type: <b>PWINDOWINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-windowinfo">WINDOWINFO</a> structure to receive the information. Note that you must set the <b>cbSize</b> member to <c>sizeof(WINDOWINFO)</c> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetWindowInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.WINDOWINFO* pwi);

		/// <inheritdoc cref="GetTitleBarInfo(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.TITLEBARINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetTitleBarInfo(winmdroot.Foundation.HWND hwnd, ref winmdroot.UI.WindowsAndMessaging.TITLEBARINFO pti)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.TITLEBARINFO* ptiLocal = &pti)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetTitleBarInfo(hwnd, ptiLocal);
				return __result;
			}
		}

		/// <summary>Retrieves information about the specified title bar.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the title bar whose information is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-gettitlebarinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pti">
		/// <para>Type: <b>PTITLEBARINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-titlebarinfo">TITLEBARINFO</a> structure to receive the information. Note that you must set the <b>cbSize</b> member to <c>sizeof(TITLEBARINFO)</c> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-gettitlebarinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-gettitlebarinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetTitleBarInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.TITLEBARINFO* pti);

		/// <inheritdoc cref="GetMenuBarInfo(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.OBJECT_IDENTIFIER, int, winmdroot.UI.WindowsAndMessaging.MENUBARINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetMenuBarInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.OBJECT_IDENTIFIER idObject, int idItem, ref winmdroot.UI.WindowsAndMessaging.MENUBARINFO pmbi)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.MENUBARINFO* pmbiLocal = &pmbi)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetMenuBarInfo(hwnd, idObject, idItem, pmbiLocal);
				return __result;
			}
		}

		/// <summary>Retrieves information about the specified menu bar.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window (menu bar) whose information is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenubarinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idObject">Type: <b>LONG</b></param>
		/// <param name="idItem">
		/// <para>Type: <b>LONG</b> The item for which to retrieve information. If this parameter is zero, the function retrieves information about the menu itself. If this parameter is 1, the function retrieves information about the first item on the menu, and so on.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenubarinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pmbi">
		/// <para>Type: <b>PMENUBARINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-menubarinfo">MENUBARINFO</a> structure that receives the information. Note that you must set the <b>cbSize</b> member to <c>sizeof(MENUBARINFO)</c> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenubarinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmenubarinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetMenuBarInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.OBJECT_IDENTIFIER idObject, int idItem, winmdroot.UI.WindowsAndMessaging.MENUBARINFO* pmbi);

		/// <inheritdoc cref="GetScrollBarInfo(winmdroot.Foundation.HWND, winmdroot.UI.WindowsAndMessaging.OBJECT_IDENTIFIER, winmdroot.UI.WindowsAndMessaging.SCROLLBARINFO*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe winmdroot.Foundation.BOOL GetScrollBarInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.OBJECT_IDENTIFIER idObject, ref winmdroot.UI.WindowsAndMessaging.SCROLLBARINFO psbi)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.SCROLLBARINFO* psbiLocal = &psbi)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetScrollBarInfo(hwnd, idObject, psbiLocal);
				return __result;
			}
		}

		/// <summary>The GetScrollBarInfo function retrieves information about the specified scroll bar.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a></b> Handle to a window associated with the scroll bar whose information is to be retrieved. If the <i>idObject</i> parameter is OBJID_CLIENT, <i>hwnd</i> is a handle to a scroll bar control. Otherwise, <i>hwnd</i> is a handle to a window created with <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">WS_VSCROLL</a> and/or <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">WS_HSCROLL</a> style.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollbarinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idObject">Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LONG</a></b></param>
		/// <param name="psbi">
		/// <para>Type: <b>PSCROLLBARINFO</b> Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-scrollbarinfo">SCROLLBARINFO</a> structure to receive the information. Before calling <b>GetScrollBarInfo</b>, set the <b>cbSize</b> member to <b>sizeof</b>(<b>SCROLLBARINFO</b>).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollbarinfo#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getscrollbarinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetScrollBarInfo(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.OBJECT_IDENTIFIER idObject, winmdroot.UI.WindowsAndMessaging.SCROLLBARINFO* psbi);

		/// <summary>Retrieves the handle to the ancestor of the specified window.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window, the function returns <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getancestor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="gaFlags">Type: <b>UINT</b></param>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is the handle to the ancestor window.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getancestor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND GetAncestor(winmdroot.Foundation.HWND hwnd, winmdroot.UI.WindowsAndMessaging.GET_ANCESTOR_FLAGS gaFlags);

		/// <summary>Retrieves a handle to the child window at the specified point. The search is restricted to immediate child windows; grandchildren and deeper descendant windows are not searched.</summary>
		/// <param name="hwndParent">
		/// <para>Type: <b>HWND</b> A handle to the window whose child is to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-realchildwindowfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="ptParentClientCoords">
		/// <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> A <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that defines the client coordinates of the point to be checked.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-realchildwindowfrompoint#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWND</b> The return value is a handle to the child window that contains the specified point.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-realchildwindowfrompoint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND RealChildWindowFromPoint(winmdroot.Foundation.HWND hwndParent, global::System.Drawing.Point ptParentClientCoords);

		/// <summary>Retrieves a string that specifies the window type.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose type will be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-realgetwindowclassw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="ptszClassName">
		/// <para>Type: <b>LPTSTR</b> A pointer to a string that receives the window type.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-realgetwindowclassw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchClassNameMax">
		/// <para>Type: <b>UINT</b> The length, in characters, of the buffer pointed to by the <i>pszType</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-realgetwindowclassw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>UINT</b> If the function succeeds, the return value is the number of characters copied to the specified buffer. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-realgetwindowclassw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "RealGetWindowClassW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint RealGetWindowClass(winmdroot.Foundation.HWND hwnd, winmdroot.Foundation.PWSTR ptszClassName, uint cchClassNameMax);

		/// <inheritdoc cref="GetAltTabInfo(winmdroot.Foundation.HWND, int, winmdroot.UI.WindowsAndMessaging.ALTTABINFO*, winmdroot.Foundation.PWSTR, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetAltTabInfo(winmdroot.Foundation.HWND hwnd, int iItem, ref winmdroot.UI.WindowsAndMessaging.ALTTABINFO pati, winmdroot.Foundation.PWSTR pszItemText, uint cchItemText)
		{
			fixed (winmdroot.UI.WindowsAndMessaging.ALTTABINFO* patiLocal = &pati)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetAltTabInfo(hwnd, iItem, patiLocal, pszItemText, cchItemText);
				return __result;
			}
		}

		/// <summary>Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window for which status information will be retrieved. This window must be the application-switching window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getalttabinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="iItem">
		/// <para>Type: <b>int</b> The index of the icon in the application-switching window. If the <i>pszItemText</i> parameter is not <b>NULL</b>, the name of the item is copied to the <i>pszItemText</i> string. If this parameter is –1, the name of the item is not copied.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getalttabinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pati">
		/// <para>Type: <b>PALTTABINFO</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-alttabinfo">ALTTABINFO</a> structure to receive the status information. Note that you must set the <b>csSize</b> member to <c>sizeof(ALTTABINFO)</c> before calling this function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getalttabinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pszItemText">
		/// <para>Type: <b>LPTSTR</b> The name of the item. If this parameter is <b>NULL</b>, the name of the item is not copied.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getalttabinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchItemText">
		/// <para>Type: <b>UINT</b> The size, in characters, of the <i>pszItemText</i> buffer.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getalttabinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getalttabinfow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetAltTabInfoW", SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetAltTabInfo(winmdroot.Foundation.HWND hwnd, int iItem, winmdroot.UI.WindowsAndMessaging.ALTTABINFO* pati, winmdroot.Foundation.PWSTR pszItemText, uint cchItemText);

		/// <summary>Adds or removes a message from the User Interface Privilege Isolation (UIPI) message filter.</summary>
		/// <param name="message">
		/// <para>Type: <b>UINT</b> The message to add to or remove from the filter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changewindowmessagefilter#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlag">Type: <b>DWORD</b></param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// <para><div class="alert"><b>Note</b>  A message can be successfully removed from the filter, but that is not a guarantee that the message will be blocked. See the Remarks section for more details.</div> <div> </div></para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changewindowmessagefilter">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern winmdroot.Foundation.BOOL ChangeWindowMessageFilter(uint message, winmdroot.UI.WindowsAndMessaging.CHANGE_WINDOW_MESSAGE_FILTER_FLAGS dwFlag);

		/// <summary>Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.</summary>
		/// <param name="hwnd">
		/// <para>Type: <b>HWND</b> A handle to the window whose UIPI message filter is to be modified.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changewindowmessagefilterex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="message">
		/// <para>Type: <b>UINT</b> The message that the message filter allows through or blocks.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changewindowmessagefilterex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="action">Type: <b>DWORD</b></param>
		/// <param name="pChangeFilterStruct">
		/// <para>Type: <b>PCHANGEFILTERSTRUCT</b> Optional pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-changefilterstruct">CHANGEFILTERSTRUCT</a> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changewindowmessagefilterex#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changewindowmessagefilterex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe winmdroot.Foundation.BOOL ChangeWindowMessageFilterEx(winmdroot.Foundation.HWND hwnd, uint message, winmdroot.UI.WindowsAndMessaging.WINDOW_MESSAGE_FILTER_ACTION action, [Optional] winmdroot.UI.WindowsAndMessaging.CHANGEFILTERSTRUCT* pChangeFilterStruct);

		/// <inheritdoc cref="GetDisplayConfigBufferSizes(uint, uint*, uint*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe int GetDisplayConfigBufferSizes(uint flags, out uint numPathArrayElements, out uint numModeInfoArrayElements)
		{
			fixed (uint* numModeInfoArrayElementsLocal = &numModeInfoArrayElements)
			{
				fixed (uint* numPathArrayElementsLocal = &numPathArrayElements)
				{
					int __result = PInvoke.GetDisplayConfigBufferSizes(flags, numPathArrayElementsLocal, numModeInfoArrayElementsLocal);
					return __result;
				}
			}
		}

		/// <summary>The GetDisplayConfigBufferSizes function retrieves the size of the buffers that are required to call the QueryDisplayConfig function.</summary>
		/// <param name="flags"></param>
		/// <param name="numPathArrayElements">Pointer to a variable that receives the number of elements in the path information table. The <i>pNumPathArrayElements</i> parameter value is then used by a subsequent call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-querydisplayconfig">QueryDisplayConfig</a> function. This parameter cannot be <b>NULL</b>.</param>
		/// <param name="numModeInfoArrayElements">Pointer to a variable that receives the number of elements in the mode information table. The <i>pNumModeInfoArrayElements</i> parameter value is then used by a subsequent call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-querydisplayconfig">QueryDisplayConfig</a> function. This parameter cannot be <b>NULL</b>.</param>
		/// <returns>
		/// <para>The function returns one of the following return codes. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdisplayconfigbuffersizes">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe int GetDisplayConfigBufferSizes(uint flags, uint* numPathArrayElements, uint* numModeInfoArrayElements);

		/// <inheritdoc cref="SetDisplayConfig(uint, winmdroot.Devices.Display.DISPLAYCONFIG_PATH_INFO*, uint, winmdroot.Devices.Display.DISPLAYCONFIG_MODE_INFO*, uint)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe int SetDisplayConfig(Span<winmdroot.Devices.Display.DISPLAYCONFIG_PATH_INFO> pathArray, Span<winmdroot.Devices.Display.DISPLAYCONFIG_MODE_INFO> modeInfoArray, uint flags)
		{
			fixed (winmdroot.Devices.Display.DISPLAYCONFIG_MODE_INFO* modeInfoArrayLocal = modeInfoArray)
			{
				fixed (winmdroot.Devices.Display.DISPLAYCONFIG_PATH_INFO* pathArrayLocal = pathArray)
				{
					int __result = PInvoke.SetDisplayConfig((uint )pathArray.Length, pathArrayLocal, (uint )modeInfoArray.Length, modeInfoArrayLocal, flags);
					return __result;
				}
			}
		}

		/// <summary>The SetDisplayConfig function modifies the display topology, source, and target modes by exclusively enabling the specified paths in the current session.</summary>
		/// <param name="numPathArrayElements">Number of elements in <i>pathArray</i>.</param>
		/// <param name="pathArray">Array of all display paths that are to be set. Only the paths within this array that have the DISPLAYCONFIG_PATH_ACTIVE flag set in the <b>flags</b> member of <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_info">DISPLAYCONFIG_PATH_INFO</a> are set. This parameter can be <b>NULL</b>. The order in which active paths appear in this array determines the path priority. For more information about path priority order, see <a href="https://docs.microsoft.com/windows-hardware/drivers/display/path-priority-order">Path Priority Order</a>.</param>
		/// <param name="numModeInfoArrayElements">Number of elements in <i>modeInfoArray</i>.</param>
		/// <param name="modeInfoArray">Array of display source and target mode information (<a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_mode_info">DISPLAYCONFIG_MODE_INFO</a>) that is referenced by the <b>modeInfoIdx</b> member of DISPLAYCONFIG_PATH_SOURCE_INFO and DISPLAYCONFIG_PATH_TARGET_INFO element of path information from <i>pathArray</i>. This parameter can be <b>NULL</b>.</param>
		/// <param name="flags"></param>
		/// <returns>
		/// <para>The function returns one of the following return codes. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdisplayconfig">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe int SetDisplayConfig(uint numPathArrayElements, [Optional] winmdroot.Devices.Display.DISPLAYCONFIG_PATH_INFO* pathArray, uint numModeInfoArrayElements, [Optional] winmdroot.Devices.Display.DISPLAYCONFIG_MODE_INFO* modeInfoArray, uint flags);

		/// <inheritdoc cref="QueryDisplayConfig(uint, uint*, winmdroot.Devices.Display.DISPLAYCONFIG_PATH_INFO*, uint*, winmdroot.Devices.Display.DISPLAYCONFIG_MODE_INFO*, winmdroot.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID*)"/>
		[SupportedOSPlatform("windows6.1")]
		internal static unsafe int QueryDisplayConfig(uint flags, ref uint numPathArrayElements, winmdroot.Devices.Display.DISPLAYCONFIG_PATH_INFO* pathArray, ref uint numModeInfoArrayElements, winmdroot.Devices.Display.DISPLAYCONFIG_MODE_INFO* modeInfoArray, out winmdroot.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID currentTopologyId)
		{
			fixed (winmdroot.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyIdLocal = &currentTopologyId)
			{
				fixed (uint* numModeInfoArrayElementsLocal = &numModeInfoArrayElements)
				{
					fixed (uint* numPathArrayElementsLocal = &numPathArrayElements)
					{
						int __result = PInvoke.QueryDisplayConfig(flags, numPathArrayElementsLocal, pathArray, numModeInfoArrayElementsLocal, modeInfoArray, currentTopologyIdLocal);
						return __result;
					}
				}
			}
		}

		/// <summary>The QueryDisplayConfig function retrieves information about all possible display paths for all display devices, or views, in the current setting.</summary>
		/// <param name="flags"></param>
		/// <param name="numPathArrayElements">Pointer to a variable that contains the number of elements in <i>pPathInfoArray</i>. This parameter cannot be <b>NULL</b>. If <b>QueryDisplayConfig</b> returns ERROR_SUCCESS, <i>pNumPathInfoElements</i> is updated with the number of valid entries in <i>pPathInfoArray</i>.</param>
		/// <param name="pathArray">Pointer to a variable that contains an array of <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_path_info">DISPLAYCONFIG_PATH_INFO</a> elements. Each element in <i>pPathInfoArray</i> describes a single path from a source to a target. The source and target mode information indexes are only valid in combination with the <i>pmodeInfoArray</i> tables that are returned for the API at the same time. This parameter cannot be <b>NULL</b>. The <i>pPathInfoArray</i> is always returned in path priority order. For more information about path priority order, see <a href="https://docs.microsoft.com/windows-hardware/drivers/display/path-priority-order">Path Priority Order</a>.</param>
		/// <param name="numModeInfoArrayElements">Pointer to a variable that specifies the number in element of the mode information table. This parameter cannot be <b>NULL</b>. If <b>QueryDisplayConfig</b> returns ERROR_SUCCESS, <i>pNumModeInfoArrayElements</i> is updated with the number of valid entries in <i>pModeInfoArray</i>.</param>
		/// <param name="modeInfoArray">Pointer to a variable that contains an array of <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_mode_info">DISPLAYCONFIG_MODE_INFO</a> elements. This parameter cannot be <b>NULL</b>.</param>
		/// <param name="currentTopologyId">
		/// <para>Pointer to a variable that receives the identifier of the currently active topology in the CCD database. For a list of possible values, see the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ne-wingdi-displayconfig_topology_id">DISPLAYCONFIG_TOPOLOGY_ID</a> enumerated type. The <i>pCurrentTopologyId</i> parameter is only set when the <i>Flags</i> parameter value is QDC_DATABASE_CURRENT. If the <i>Flags</i> parameter value is set to QDC_DATABASE_CURRENT, the <i>pCurrentTopologyId</i> parameter must not be <b>NULL</b>. If the <i>Flags</i> parameter value is not set to QDC_DATABASE_CURRENT, the <i>pCurrentTopologyId</i> parameter value must be <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-querydisplayconfig#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>The function returns one of the following return codes. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-querydisplayconfig">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.1")]
		internal static extern unsafe int QueryDisplayConfig(uint flags, uint* numPathArrayElements, winmdroot.Devices.Display.DISPLAYCONFIG_PATH_INFO* pathArray, uint* numModeInfoArrayElements, winmdroot.Devices.Display.DISPLAYCONFIG_MODE_INFO* modeInfoArray, winmdroot.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

		/// <inheritdoc cref="DisplayConfigGetDeviceInfo(winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe int DisplayConfigGetDeviceInfo(ref winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER requestPacket)
		{
			fixed (winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacketLocal = &requestPacket)
			{
				int __result = PInvoke.DisplayConfigGetDeviceInfo(requestPacketLocal);
				return __result;
			}
		}

		/// <summary>The DisplayConfigGetDeviceInfo function retrieves display configuration information about the device.</summary>
		/// <param name="requestPacket">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_device_info_header">DISPLAYCONFIG_DEVICE_INFO_HEADER</a> structure. This structure contains information about the request, which includes the packet type in the <b>type</b> member. The type and size of additional data that <b>DisplayConfigGetDeviceInfo</b> returns after the header structure depend on the packet type.</param>
		/// <returns>
		/// <para>The function returns one of the following return codes. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-displayconfiggetdeviceinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe int DisplayConfigGetDeviceInfo(winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

		/// <inheritdoc cref="DisplayConfigSetDeviceInfo(winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER*)"/>
		[SupportedOSPlatform("windows6.0.6000")]
		internal static unsafe int DisplayConfigSetDeviceInfo(in winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER setPacket)
		{
			fixed (winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacketLocal = &setPacket)
			{
				int __result = PInvoke.DisplayConfigSetDeviceInfo(setPacketLocal);
				return __result;
			}
		}

		/// <summary>The DisplayConfigSetDeviceInfo function sets the properties of a target.</summary>
		/// <param name="setPacket">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_device_info_header">DISPLAYCONFIG_DEVICE_INFO_HEADER</a> structure that contains information to set for the device. The type and size of additional data that <b>DisplayConfigSetDeviceInfo</b> uses for the configuration comes after the header structure. This additional data depends on the packet type, as specified by the <b>type</b> member of DISPLAYCONFIG_DEVICE_INFO_HEADER. For example, if the caller wants to change the boot persistence, that caller allocates and fills a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-displayconfig_set_target_persistence">DISPLAYCONFIG_SET_TARGET_PERSISTENCE</a> structure and passes a pointer to this structure in <i>setPacket</i>. Note that the first member of the DISPLAYCONFIG_SET_TARGET_PERSISTENCE structure is the DISPLAYCONFIG_DEVICE_INFO_HEADER.</param>
		/// <returns>
		/// <para>The function returns one of the following return codes. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-displayconfigsetdeviceinfo">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows6.0.6000")]
		internal static extern unsafe int DisplayConfigSetDeviceInfo(winmdroot.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);

		/// <inheritdoc cref="GetAutoRotationState(winmdroot.Devices.Display.AR_STATE*)"/>
		internal static unsafe winmdroot.Foundation.BOOL GetAutoRotationState(out winmdroot.Devices.Display.AR_STATE pState)
		{
			fixed (winmdroot.Devices.Display.AR_STATE* pStateLocal = &pState)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetAutoRotationState(pStateLocal);
				return __result;
			}
		}

		/// <summary>Retrieves an AR_STATE value containing the state of screen auto-rotation for the system, for example whether auto-rotation is supported, and whether it is enabled by the user.</summary>
		/// <param name="pState">Pointer to a location in memory that will receive the current state of auto-rotation for the system.</param>
		/// <returns>
		/// <para>TRUE if the method succeeds, otherwise FALSE. See <a href="/windows/desktop/api/winuser/nf-winuser-getdisplayautorotationpreferences">GetDisplayAutoRotationPreferences</a> for an example of using this function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getautorotationstate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL GetAutoRotationState(winmdroot.Devices.Display.AR_STATE* pState);

		/// <inheritdoc cref="GetDisplayAutoRotationPreferences(winmdroot.Devices.Display.ORIENTATION_PREFERENCE*)"/>
		internal static unsafe winmdroot.Foundation.BOOL GetDisplayAutoRotationPreferences(out winmdroot.Devices.Display.ORIENTATION_PREFERENCE pOrientation)
		{
			fixed (winmdroot.Devices.Display.ORIENTATION_PREFERENCE* pOrientationLocal = &pOrientation)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetDisplayAutoRotationPreferences(pOrientationLocal);
				return __result;
			}
		}

		/// <summary>Retrieves the screen auto-rotation preferences for the current process.</summary>
		/// <param name="pOrientation">Pointer to a location in memory that will receive the current orientation preference setting for the calling process.</param>
		/// <returns>TRUE if the method succeeds, otherwise FALSE.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdisplayautorotationpreferences">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern unsafe winmdroot.Foundation.BOOL GetDisplayAutoRotationPreferences(winmdroot.Devices.Display.ORIENTATION_PREFERENCE* pOrientation);

		/// <summary>Sets the screen auto-rotation preferences for the current process.</summary>
		/// <param name="orientation">Pointer to a location in memory with the screen orientation preferences to set for the calling process.</param>
		/// <returns>
		/// <para>TRUE if the method succeeds, otherwise FALSE. See <a href="/windows/desktop/api/winuser/nf-winuser-getdisplayautorotationpreferences">GetDisplayAutoRotationPreferences</a> for an example of using this function.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setdisplayautorotationpreferences">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL SetDisplayAutoRotationPreferences(winmdroot.Devices.Display.ORIENTATION_PREFERENCE orientation);

		/// <inheritdoc cref="PrintWindow(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HDC, winmdroot.Storage.Xps.PRINT_WINDOW_FLAGS)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL PrintWindow(winmdroot.Foundation.HWND hwnd, SafeHandle hdcBlt, winmdroot.Storage.Xps.PRINT_WINDOW_FLAGS nFlags)
		{
			bool hdcBltAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hdcBltLocal;
				if (hdcBlt is object)
				{
					hdcBlt.DangerousAddRef(ref hdcBltAddRef);
					hdcBltLocal = (winmdroot.Graphics.Gdi.HDC)hdcBlt.DangerousGetHandle();
				}
				else
					hdcBltLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.Foundation.BOOL __result = PInvoke.PrintWindow(hwnd, hdcBltLocal, nFlags);
				return __result;
			}
			finally
			{
				if (hdcBltAddRef)
					hdcBlt.DangerousRelease();
			}
		}

		/// <summary>The PrintWindow function copies a visual window into the specified device context (DC), typically a printer DC.</summary>
		/// <param name="hwnd">A handle to the window that will be copied.</param>
		/// <param name="hdcBlt">A handle to the device context.</param>
		/// <param name="nFlags"></param>
		/// <returns>
		/// <para>If the function succeeds, it returns a nonzero value. If the function fails, it returns zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-printwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern winmdroot.Foundation.BOOL PrintWindow(winmdroot.Foundation.HWND hwnd, winmdroot.Graphics.Gdi.HDC hdcBlt, winmdroot.Storage.Xps.PRINT_WINDOW_FLAGS nFlags);

		/// <inheritdoc cref="DrawEdge(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.DRAWEDGE_FLAGS, winmdroot.Graphics.Gdi.DRAW_EDGE_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawEdge(SafeHandle hdc, ref winmdroot.Foundation.RECT qrc, winmdroot.Graphics.Gdi.DRAWEDGE_FLAGS edge, winmdroot.Graphics.Gdi.DRAW_EDGE_FLAGS grfFlags)
		{
			bool hdcAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* qrcLocal = &qrc)
				{
					winmdroot.Graphics.Gdi.HDC hdcLocal;
					if (hdc is object)
					{
						hdc.DangerousAddRef(ref hdcAddRef);
						hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
					}
					else
						hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
					winmdroot.Foundation.BOOL __result = PInvoke.DrawEdge(hdcLocal, qrcLocal, edge, grfFlags);
					return __result;
				}
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The DrawEdge function draws one or more edges of rectangle.</summary>
		/// <param name="hdc">A handle to the device context.</param>
		/// <param name="qrc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the rectangle.</param>
		/// <param name="edge">
		/// <para>The type of inner and outer edges to draw. This parameter must be a combination of one inner-border flag and one outer-border flag. The inner-border flags are as follows. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawedge#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="grfFlags"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawedge">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL DrawEdge(winmdroot.Graphics.Gdi.HDC hdc, winmdroot.Foundation.RECT* qrc, winmdroot.Graphics.Gdi.DRAWEDGE_FLAGS edge, winmdroot.Graphics.Gdi.DRAW_EDGE_FLAGS grfFlags);

		/// <inheritdoc cref="DrawFrameControl(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.DFC_TYPE, winmdroot.Graphics.Gdi.DFCS_STATE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawFrameControl(SafeHandle param0, ref winmdroot.Foundation.RECT param1, winmdroot.Graphics.Gdi.DFC_TYPE param2, winmdroot.Graphics.Gdi.DFCS_STATE param3)
		{
			bool param0AddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* param1Local = &param1)
				{
					winmdroot.Graphics.Gdi.HDC param0Local;
					if (param0 is object)
					{
						param0.DangerousAddRef(ref param0AddRef);
						param0Local = (winmdroot.Graphics.Gdi.HDC)param0.DangerousGetHandle();
					}
					else
						param0Local = default(winmdroot.Graphics.Gdi.HDC);
					winmdroot.Foundation.BOOL __result = PInvoke.DrawFrameControl(param0Local, param1Local, param2, param3);
					return __result;
				}
			}
			finally
			{
				if (param0AddRef)
					param0.DangerousRelease();
			}
		}

		/// <summary>The DrawFrameControl function draws a frame control of the specified type and style.</summary>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawframecontrol">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL DrawFrameControl(winmdroot.Graphics.Gdi.HDC param0, winmdroot.Foundation.RECT* param1, winmdroot.Graphics.Gdi.DFC_TYPE param2, winmdroot.Graphics.Gdi.DFCS_STATE param3);

		/// <inheritdoc cref="DrawCaption(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.DRAW_CAPTION_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawCaption(winmdroot.Foundation.HWND hwnd, SafeHandle hdc, in winmdroot.Foundation.RECT lprect, winmdroot.Graphics.Gdi.DRAW_CAPTION_FLAGS flags)
		{
			bool hdcAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* lprectLocal = &lprect)
				{
					winmdroot.Graphics.Gdi.HDC hdcLocal;
					if (hdc is object)
					{
						hdc.DangerousAddRef(ref hdcAddRef);
						hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
					}
					else
						hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
					winmdroot.Foundation.BOOL __result = PInvoke.DrawCaption(hwnd, hdcLocal, lprectLocal, flags);
					return __result;
				}
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The DrawCaption function draws a window caption.</summary>
		/// <param name="hwnd">A handle to a window that supplies text and an icon for the window caption.</param>
		/// <param name="hdc">A handle to a device context. The function draws the window caption into this device context.</param>
		/// <param name="lprect">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the bounding rectangle for the window caption in logical coordinates.</param>
		/// <param name="flags"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawcaption">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL DrawCaption(winmdroot.Foundation.HWND hwnd, winmdroot.Graphics.Gdi.HDC hdc, winmdroot.Foundation.RECT* lprect, winmdroot.Graphics.Gdi.DRAW_CAPTION_FLAGS flags);

		/// <inheritdoc cref="DrawAnimatedRects(winmdroot.Foundation.HWND, int, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawAnimatedRects(winmdroot.Foundation.HWND hwnd, int idAni, in winmdroot.Foundation.RECT lprcFrom, in winmdroot.Foundation.RECT lprcTo)
		{
			fixed (winmdroot.Foundation.RECT* lprcToLocal = &lprcTo)
			{
				fixed (winmdroot.Foundation.RECT* lprcFromLocal = &lprcFrom)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.DrawAnimatedRects(hwnd, idAni, lprcFromLocal, lprcToLocal);
					return __result;
				}
			}
		}

		/// <summary>Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window.</summary>
		/// <param name="hwnd">A handle to the window whose caption should be animated on the screen. The animation will be clipped to the parent of this window.</param>
		/// <param name="idAni">The type of animation. This must be IDANI_CAPTION. With the IDANI_CAPTION animation type, the window caption will animate from the position specified by lprcFrom to the position specified by lprcTo. The effect is similar to minimizing or maximizing a window.</param>
		/// <param name="lprcFrom">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure specifying the location and size of the icon or minimized window. Coordinates are relative to the clipping window <i>hwnd</i>.</param>
		/// <param name="lprcTo">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure specifying the location and size of the restored window. Coordinates are relative to the clipping window <i>hwnd</i>.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawanimatedrects">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL DrawAnimatedRects(winmdroot.Foundation.HWND hwnd, int idAni, winmdroot.Foundation.RECT* lprcFrom, winmdroot.Foundation.RECT* lprcTo);

		/// <inheritdoc cref="DrawText(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.PCWSTR, int, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.DRAW_TEXT_FORMAT)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int DrawText(SafeHandle hdc, winmdroot.Foundation.PCWSTR lpchText, int cchText, ref winmdroot.Foundation.RECT lprc, winmdroot.Graphics.Gdi.DRAW_TEXT_FORMAT format)
		{
			bool hdcAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
				{
					winmdroot.Graphics.Gdi.HDC hdcLocal;
					if (hdc is object)
					{
						hdc.DangerousAddRef(ref hdcAddRef);
						hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
					}
					else
						hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
					int __result = PInvoke.DrawText(hdcLocal, lpchText, cchText, lprcLocal, format);
					return __result;
				}
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</summary>
		/// <param name="hdc">A handle to the device context.</param>
		/// <param name="lpchText">
		/// <para>A pointer to the string that specifies the text to be drawn. If the <i>nCount</i> parameter is -1, the string must be null-terminated. If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawtextw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchText">The length, in characters, of the string. If <i>nCount</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
		/// <param name="format"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawtextw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DrawTextW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int DrawText(winmdroot.Graphics.Gdi.HDC hdc, winmdroot.Foundation.PCWSTR lpchText, int cchText, winmdroot.Foundation.RECT* lprc, winmdroot.Graphics.Gdi.DRAW_TEXT_FORMAT format);

		/// <inheritdoc cref="DrawTextEx(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.PWSTR, int, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.DRAW_TEXT_FORMAT, winmdroot.Graphics.Gdi.DRAWTEXTPARAMS*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int DrawTextEx(SafeHandle hdc, ref Span<char>lpchText, int cchText, ref winmdroot.Foundation.RECT lprc, winmdroot.Graphics.Gdi.DRAW_TEXT_FORMAT format, winmdroot.Graphics.Gdi.DRAWTEXTPARAMS? lpdtp)
		{
			bool hdcAddRef = false;
			if (lpchText.LastIndexOf('\0') == -1)throw new ArgumentException("Required null terminator missing.", "lpchText");
			try
			{
				fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
				{
					fixed (char* plpchText = lpchText)
					{
						winmdroot.Graphics.Gdi.HDC hdcLocal;
						if (hdc is object)
						{
							hdc.DangerousAddRef(ref hdcAddRef);
							hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
						}
						else
							hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
						winmdroot.Foundation.PWSTR wstrlpchText = plpchText;
						winmdroot.Graphics.Gdi.DRAWTEXTPARAMS lpdtpLocal = lpdtp.HasValue ? lpdtp.Value : default(winmdroot.Graphics.Gdi.DRAWTEXTPARAMS);
						int __result = PInvoke.DrawTextEx(hdcLocal, wstrlpchText, cchText, lprcLocal, format, lpdtp.HasValue ? &lpdtpLocal : null);
						lpchText= lpchText.Slice(0, wstrlpchText.Length);
						return __result;
					}
				}
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The DrawTextEx function draws formatted text in the specified rectangle.</summary>
		/// <param name="hdc">A handle to the device context in which to draw.</param>
		/// <param name="lpchText">
		/// <para>A pointer to the string that contains the text to draw. If the <i>cchText</i> parameter is -1, the string must be null-terminated. If <i>dwDTFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawtextexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="cchText">The <a href="https://docs.microsoft.com/windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpchText</i>. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawTextEx</b> computes the character count automatically.</param>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.</param>
		/// <param name="format"></param>
		/// <param name="lpdtp">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-drawtextparams">DRAWTEXTPARAMS</a> structure that specifies additional formatting options. This parameter can be <b>NULL</b>.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the text height in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lprc-&gt;top</code> to the bottom of the drawn text If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawtextexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DrawTextExW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int DrawTextEx(winmdroot.Graphics.Gdi.HDC hdc, winmdroot.Foundation.PWSTR lpchText, int cchText, winmdroot.Foundation.RECT* lprc, winmdroot.Graphics.Gdi.DRAW_TEXT_FORMAT format, [Optional] winmdroot.Graphics.Gdi.DRAWTEXTPARAMS* lpdtp);

		/// <inheritdoc cref="GrayString(winmdroot.Graphics.Gdi.HDC, winmdroot.Graphics.Gdi.HBRUSH, winmdroot.Graphics.Gdi.GRAYSTRINGPROC, winmdroot.Foundation.LPARAM, int, int, int, int, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GrayString(SafeHandle hDC, SafeHandle hBrush, winmdroot.Graphics.Gdi.GRAYSTRINGPROC lpOutputFunc, winmdroot.Foundation.LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight)
		{
			bool hDCAddRef = false;
			bool hBrushAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hDCLocal;
				if (hDC is object)
				{
					hDC.DangerousAddRef(ref hDCAddRef);
					hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
				}
				else
					hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.Graphics.Gdi.HBRUSH hBrushLocal;
				if (hBrush is object)
				{
					hBrush.DangerousAddRef(ref hBrushAddRef);
					hBrushLocal = (winmdroot.Graphics.Gdi.HBRUSH)hBrush.DangerousGetHandle();
				}
				else
					hBrushLocal = default(winmdroot.Graphics.Gdi.HBRUSH);
				winmdroot.Foundation.BOOL __result = PInvoke.GrayString(hDCLocal, hBrushLocal, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
				return __result;
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
				if (hBrushAddRef)
					hBrush.DangerousRelease();
			}
		}

		/// <summary>The GrayString function draws gray text at the specified location.</summary>
		/// <param name="hDC">A handle to the device context.</param>
		/// <param name="hBrush">A handle to the brush to be used for graying. If this parameter is <b>NULL</b>, the text is grayed with the same brush that was used to draw window text.</param>
		/// <param name="lpOutputFunc">A pointer to the application-defined function that will draw the string, or, if <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-textouta">TextOut</a> is to be used to draw the string, it is a <b>NULL</b> pointer. For details, see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-graystringproc">OutputProc</a> callback function.</param>
		/// <param name="lpData">A pointer to data to be passed to the output function. If the <i>lpOutputFunc</i> parameter is <b>NULL</b>, <i>lpData</i> must be a pointer to the string to be output.</param>
		/// <param name="nCount">The number of characters to be output. If the <i>nCount</i> parameter is zero, <b>GrayString</b> calculates the length of the string (assuming <i>lpData</i> is a pointer to the string). If <i>nCount</i> is 1 and the function pointed to by <i>lpOutputFunc</i> returns <b>FALSE</b>, the image is shown but not grayed.</param>
		/// <param name="X">The device x-coordinate of the starting position of the rectangle that encloses the string.</param>
		/// <param name="Y">The device y-coordinate of the starting position of the rectangle that encloses the string.</param>
		/// <param name="nWidth">The width, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the width of the area, assuming <i>lpData</i> is a pointer to the string.</param>
		/// <param name="nHeight">The height, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the height of the area, assuming <i>lpData</i> is a pointer to the string.</param>
		/// <returns>
		/// <para>If the string is drawn, the return value is nonzero. If either the <a href="/windows/desktop/api/wingdi/nf-wingdi-textouta">TextOut</a> function or the application-defined output function returned zero, or there was insufficient memory to create a memory bitmap for graying, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-graystringw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GrayStringW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL GrayString(winmdroot.Graphics.Gdi.HDC hDC, winmdroot.Graphics.Gdi.HBRUSH hBrush, winmdroot.Graphics.Gdi.GRAYSTRINGPROC lpOutputFunc, winmdroot.Foundation.LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);

		/// <inheritdoc cref="DrawState(winmdroot.Graphics.Gdi.HDC, winmdroot.Graphics.Gdi.HBRUSH, winmdroot.Graphics.Gdi.DRAWSTATEPROC, winmdroot.Foundation.LPARAM, winmdroot.Foundation.WPARAM, int, int, int, int, winmdroot.Graphics.Gdi.DRAWSTATE_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawState(SafeHandle hdc, SafeHandle hbrFore, winmdroot.Graphics.Gdi.DRAWSTATEPROC qfnCallBack, winmdroot.Foundation.LPARAM lData, winmdroot.Foundation.WPARAM wData, int x, int y, int cx, int cy, winmdroot.Graphics.Gdi.DRAWSTATE_FLAGS uFlags)
		{
			bool hdcAddRef = false;
			bool hbrForeAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hdcLocal;
				if (hdc is object)
				{
					hdc.DangerousAddRef(ref hdcAddRef);
					hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
				}
				else
					hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.Graphics.Gdi.HBRUSH hbrForeLocal;
				if (hbrFore is object)
				{
					hbrFore.DangerousAddRef(ref hbrForeAddRef);
					hbrForeLocal = (winmdroot.Graphics.Gdi.HBRUSH)hbrFore.DangerousGetHandle();
				}
				else
					hbrForeLocal = default(winmdroot.Graphics.Gdi.HBRUSH);
				winmdroot.Foundation.BOOL __result = PInvoke.DrawState(hdcLocal, hbrForeLocal, qfnCallBack, lData, wData, x, y, cx, cy, uFlags);
				return __result;
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
				if (hbrForeAddRef)
					hbrFore.DangerousRelease();
			}
		}

		/// <summary>The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.</summary>
		/// <param name="hdc">A handle to the device context to draw in.</param>
		/// <param name="hbrFore">A handle to the brush used to draw the image, if the state specified by the <i>fuFlags</i> parameter is DSS_MONO. This parameter is ignored for other states.</param>
		/// <param name="qfnCallBack">A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in <i>fuFlags</i> is DST_COMPLEX. It is optional and can be <b>NULL</b> if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
		/// <param name="lData">Information about the image. The meaning of this parameter depends on the image type.</param>
		/// <param name="wData">Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
		/// <param name="x">The horizontal location, in device units, at which to draw the image.</param>
		/// <param name="y">The vertical location, in device units, at which to draw the image.</param>
		/// <param name="cx">The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.</param>
		/// <param name="cy">The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.</param>
		/// <param name="uFlags">
		/// <para>The image type and state. This parameter can be one of the following type values. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawstatew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawstatew">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "DrawStateW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL DrawState(winmdroot.Graphics.Gdi.HDC hdc, winmdroot.Graphics.Gdi.HBRUSH hbrFore, winmdroot.Graphics.Gdi.DRAWSTATEPROC qfnCallBack, winmdroot.Foundation.LPARAM lData, winmdroot.Foundation.WPARAM wData, int x, int y, int cx, int cy, winmdroot.Graphics.Gdi.DRAWSTATE_FLAGS uFlags);

		/// <inheritdoc cref="TabbedTextOut(winmdroot.Graphics.Gdi.HDC, int, int, winmdroot.Foundation.PCWSTR, int, int, int*, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int TabbedTextOut(SafeHandle hdc, int x, int y, string lpString, int chCount, ReadOnlySpan<int> lpnTabStopPositions, int nTabOrigin)
		{
			bool hdcAddRef = false;
			try
			{
				fixed (int* lpnTabStopPositionsLocal = lpnTabStopPositions)
				{
					fixed (char* lpStringLocal = lpString)
					{
						winmdroot.Graphics.Gdi.HDC hdcLocal;
						if (hdc is object)
						{
							hdc.DangerousAddRef(ref hdcAddRef);
							hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
						}
						else
							hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
						int __result = PInvoke.TabbedTextOut(hdcLocal, x, y, lpStringLocal, chCount, lpnTabStopPositions.Length, lpnTabStopPositionsLocal, nTabOrigin);
						return __result;
					}
				}
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.</summary>
		/// <param name="hdc">A handle to the device context.</param>
		/// <param name="x">The x-coordinate of the starting point of the string, in logical units.</param>
		/// <param name="y">The y-coordinate of the starting point of the string, in logical units.</param>
		/// <param name="lpString">A pointer to the character string to draw. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
		/// <param name="chCount">The <a href="https://docs.microsoft.com/windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
		/// <param name="nTabPositions">The number of values in the array of tab-stop positions.</param>
		/// <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
		/// <param name="nTabOrigin">The x-coordinate of the starting position from which tabs are expanded, in logical units.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-tabbedtextoutw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "TabbedTextOutW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int TabbedTextOut(winmdroot.Graphics.Gdi.HDC hdc, int x, int y, winmdroot.Foundation.PCWSTR lpString, int chCount, int nTabPositions, [Optional] int* lpnTabStopPositions, int nTabOrigin);

		/// <inheritdoc cref="GetTabbedTextExtent(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.PCWSTR, int, int, int*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe uint GetTabbedTextExtent(SafeHandle hdc, string lpString, int chCount, ReadOnlySpan<int> lpnTabStopPositions)
		{
			bool hdcAddRef = false;
			try
			{
				fixed (int* lpnTabStopPositionsLocal = lpnTabStopPositions)
				{
					fixed (char* lpStringLocal = lpString)
					{
						winmdroot.Graphics.Gdi.HDC hdcLocal;
						if (hdc is object)
						{
							hdc.DangerousAddRef(ref hdcAddRef);
							hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
						}
						else
							hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
						uint __result = PInvoke.GetTabbedTextExtent(hdcLocal, lpStringLocal, chCount, lpnTabStopPositions.Length, lpnTabStopPositionsLocal);
						return __result;
					}
				}
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The GetTabbedTextExtent function computes the width and height of a character string.</summary>
		/// <param name="hdc">A handle to the device context.</param>
		/// <param name="lpString">A pointer to a character string.</param>
		/// <param name="chCount">The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
		/// <param name="nTabPositions">The number of tab-stop positions in the array pointed to by the <i>lpnTabStopPositions</i> parameter.</param>
		/// <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the dimensions of the string in logical units. The height is in the high-order word and the width is in the low-order word. If the function fails, the return value is 0. <b>GetTabbedTextExtent</b> will fail if <i>hDC</i> is invalid and if <i>nTabPositions</i> is less than 0.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-gettabbedtextextentw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetTabbedTextExtentW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe uint GetTabbedTextExtent(winmdroot.Graphics.Gdi.HDC hdc, winmdroot.Foundation.PCWSTR lpString, int chCount, int nTabPositions, [Optional] int* lpnTabStopPositions);

		/// <summary>The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty.</summary>
		/// <param name="hWnd">Handle to the window to be updated.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-updatewindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL UpdateWindow(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="PaintDesktop(winmdroot.Graphics.Gdi.HDC)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL PaintDesktop(SafeHandle hdc)
		{
			bool hdcAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hdcLocal;
				if (hdc is object)
				{
					hdc.DangerousAddRef(ref hdcAddRef);
					hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
				}
				else
					hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.Foundation.BOOL __result = PInvoke.PaintDesktop(hdcLocal);
				return __result;
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The PaintDesktop function fills the clipping region in the specified device context with the desktop pattern or wallpaper. The function is provided primarily for shell desktops.</summary>
		/// <param name="hdc">Handle to the device context.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-paintdesktop">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL PaintDesktop(winmdroot.Graphics.Gdi.HDC hdc);

		/// <inheritdoc cref="WindowFromDC(winmdroot.Graphics.Gdi.HDC)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.HWND WindowFromDC(SafeHandle hDC)
		{
			bool hDCAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hDCLocal;
				if (hDC is object)
				{
					hDC.DangerousAddRef(ref hDCAddRef);
					hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
				}
				else
					hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.Foundation.HWND __result = PInvoke.WindowFromDC(hDCLocal);
				return __result;
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
			}
		}

		/// <summary>The WindowFromDC function returns a handle to the window associated with the specified display device context (DC). Output functions that use the specified device context draw into this window.</summary>
		/// <param name="hDC">Handle to the device context from which a handle to the associated window is to be retrieved.</param>
		/// <returns>The return value is a handle to the window associated with the specified DC. If no window is associated with the specified DC, the return value is <b>NULL</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-windowfromdc">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.HWND WindowFromDC(winmdroot.Graphics.Gdi.HDC hDC);

		/// <summary>The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.</summary>
		/// <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is <b>NULL</b>, <b>GetDC</b> retrieves the DC for the entire screen.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to the DC for the specified window's client area. If the function fails, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdc">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.HDC GetDC(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="GetDCEx(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HRGN, winmdroot.Graphics.Gdi.GET_DCX_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.HDC GetDCEx(winmdroot.Foundation.HWND hWnd, SafeHandle hrgnClip, winmdroot.Graphics.Gdi.GET_DCX_FLAGS flags)
		{
			bool hrgnClipAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HRGN hrgnClipLocal;
				if (hrgnClip is object)
				{
					hrgnClip.DangerousAddRef(ref hrgnClipAddRef);
					hrgnClipLocal = (winmdroot.Graphics.Gdi.HRGN)hrgnClip.DangerousGetHandle();
				}
				else
					hrgnClipLocal = default(winmdroot.Graphics.Gdi.HRGN);
				winmdroot.Graphics.Gdi.HDC __result = PInvoke.GetDCEx(hWnd, hrgnClipLocal, flags);
				return __result;
			}
			finally
			{
				if (hrgnClipAddRef)
					hrgnClip.DangerousRelease();
			}
		}

		/// <summary>The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.</summary>
		/// <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is <b>NULL</b>, <b>GetDCEx</b> retrieves the DC for the entire screen.</param>
		/// <param name="hrgnClip">A clipping region that may be combined with the visible region of the DC. If the value of <i>flags</i> is DCX_INTERSECTRGN or DCX_EXCLUDERGN, then the operating system assumes ownership of the region and will automatically delete it when it is no longer needed. In this case, the application should not use or delete the region after a successful call to <b>GetDCEx</b>.</param>
		/// <param name="flags"></param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the handle to the DC for the specified window. If the function fails, the return value is <b>NULL</b>. An invalid value for the <i>hWnd</i> parameter will cause the function to fail.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdcex">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.HDC GetDCEx(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HRGN hrgnClip, winmdroot.Graphics.Gdi.GET_DCX_FLAGS flags);

		/// <summary>The GetWindowDC function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars.</summary>
		/// <param name="hWnd">
		/// <para>A handle to the window with a device context that is to be retrieved. If this value is <b>NULL</b>, <b>GetWindowDC</b> retrieves the device context for the entire screen. If this parameter is <b>NULL</b>, <b>GetWindowDC</b> retrieves the device context for the primary display monitor. To get the device context for other display monitors, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaymonitors">EnumDisplayMonitors</a> and <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-createdca">CreateDC</a> functions.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowdc#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is a handle to a device context for the specified window. If the function fails, the return value is <b>NULL</b>, indicating an error or an invalid <i>hWnd</i> parameter.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowdc">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.HDC GetWindowDC(winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="BeginPaint(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.PAINTSTRUCT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.HDC BeginPaint(winmdroot.Foundation.HWND hWnd, out winmdroot.Graphics.Gdi.PAINTSTRUCT lpPaint)
		{
			fixed (winmdroot.Graphics.Gdi.PAINTSTRUCT* lpPaintLocal = &lpPaint)
			{
				winmdroot.Graphics.Gdi.HDC __result = PInvoke.BeginPaint(hWnd, lpPaintLocal);
				return __result;
			}
		}

		/// <summary>The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting.</summary>
		/// <param name="hWnd">Handle to the window to be repainted.</param>
		/// <param name="lpPaint">Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-paintstruct">PAINTSTRUCT</a> structure that will receive painting information.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the handle to a display device context for the specified window. If the function fails, the return value is <b>NULL</b>, indicating that no display device context is available.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-beginpaint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Graphics.Gdi.HDC BeginPaint(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.PAINTSTRUCT* lpPaint);

		/// <inheritdoc cref="EndPaint(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.PAINTSTRUCT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EndPaint(winmdroot.Foundation.HWND hWnd, in winmdroot.Graphics.Gdi.PAINTSTRUCT lpPaint)
		{
			fixed (winmdroot.Graphics.Gdi.PAINTSTRUCT* lpPaintLocal = &lpPaint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.EndPaint(hWnd, lpPaintLocal);
				return __result;
			}
		}

		/// <summary>The EndPaint function marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is complete.</summary>
		/// <param name="hWnd">Handle to the window that has been repainted.</param>
		/// <param name="lpPaint">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-paintstruct">PAINTSTRUCT</a> structure that contains the painting information retrieved by <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-beginpaint">BeginPaint</a>.</param>
		/// <returns>The return value is always nonzero.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-endpaint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EndPaint(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.PAINTSTRUCT* lpPaint);

		/// <summary>The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely encloses the update region of the specified window.</summary>
		/// <param name="hWnd">Handle to the window whose update region is to be retrieved.</param>
		/// <param name="lpRect">
		/// <para>Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the coordinates, in device units, of the enclosing rectangle. An application can set this parameter to <b>NULL</b> to determine whether an update region exists for the window. If this parameter is <b>NULL</b>, <b>GetUpdateRect</b> returns nonzero if an update region exists, and zero if one does not. This provides a simple and efficient means of determining whether a <b>WM_PAINT</b> message resulted from an invalid area.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getupdaterect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bErase">Specifies whether the background in the update region is to be erased. If this parameter is <b>TRUE</b> and the update region is not empty, <b>GetUpdateRect</b> sends a <b>WM_ERASEBKGND</b> message to the specified window to erase the background.</param>
		/// <returns>
		/// <para>If the update region is not empty, the return value is nonzero. If there is no update region, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getupdaterect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetUpdateRect(winmdroot.Foundation.HWND hWnd, [Optional] winmdroot.Foundation.RECT* lpRect, winmdroot.Foundation.BOOL bErase);

		/// <inheritdoc cref="GetUpdateRgn(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HRGN, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.GDI_REGION_TYPE GetUpdateRgn(winmdroot.Foundation.HWND hWnd, SafeHandle hRgn, winmdroot.Foundation.BOOL bErase)
		{
			bool hRgnAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HRGN hRgnLocal;
				if (hRgn is object)
				{
					hRgn.DangerousAddRef(ref hRgnAddRef);
					hRgnLocal = (winmdroot.Graphics.Gdi.HRGN)hRgn.DangerousGetHandle();
				}
				else
					hRgnLocal = default(winmdroot.Graphics.Gdi.HRGN);
				winmdroot.Graphics.Gdi.GDI_REGION_TYPE __result = PInvoke.GetUpdateRgn(hWnd, hRgnLocal, bErase);
				return __result;
			}
			finally
			{
				if (hRgnAddRef)
					hRgn.DangerousRelease();
			}
		}

		/// <summary>The GetUpdateRgn function retrieves the update region of a window by copying it into the specified region. The coordinates of the update region are relative to the upper-left corner of the window (that is, they are client coordinates).</summary>
		/// <param name="hWnd">Handle to the window with an update region that is to be retrieved.</param>
		/// <param name="hRgn">Handle to the region to receive the update region.</param>
		/// <param name="bErase">Specifies whether the window background should be erased and whether nonclient areas of child windows should be drawn. If this parameter is <b>FALSE</b>, no drawing is done.</param>
		/// <returns>
		/// <para>The return value indicates the complexity of the resulting region; it can be one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getupdatergn">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.GDI_REGION_TYPE GetUpdateRgn(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HRGN hRgn, winmdroot.Foundation.BOOL bErase);

		/// <inheritdoc cref="SetWindowRgn(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HRGN, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int SetWindowRgn(winmdroot.Foundation.HWND hWnd, SafeHandle hRgn, winmdroot.Foundation.BOOL bRedraw)
		{
			bool hRgnAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HRGN hRgnLocal;
				if (hRgn is object)
				{
					hRgn.DangerousAddRef(ref hRgnAddRef);
					hRgnLocal = (winmdroot.Graphics.Gdi.HRGN)hRgn.DangerousGetHandle();
				}
				else
					hRgnLocal = default(winmdroot.Graphics.Gdi.HRGN);
				int __result = PInvoke.SetWindowRgn(hWnd, hRgnLocal, bRedraw);
				return __result;
			}
			finally
			{
				if (hRgnAddRef)
					hRgn.DangerousRelease();
			}
		}

		/// <summary>The SetWindowRgn function sets the window region of a window.</summary>
		/// <param name="hWnd">A handle to the window whose window region is to be set.</param>
		/// <param name="hRgn">
		/// <para>A handle to a region. The function sets the window region of the window to this region. If <i>hRgn</i> is <b>NULL</b>, the function sets the window region to <b>NULL</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowrgn#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="bRedraw">
		/// <para>Specifies whether the system redraws the window after setting the window region. If <i>bRedraw</i> is <b>TRUE</b>, the system does so; otherwise, it does not. Typically, you set <i>bRedraw</i> to <b>TRUE</b> if the window is visible.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowrgn#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowrgn">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int SetWindowRgn(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HRGN hRgn, winmdroot.Foundation.BOOL bRedraw);

		/// <inheritdoc cref="GetWindowRgn(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HRGN)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.GDI_REGION_TYPE GetWindowRgn(winmdroot.Foundation.HWND hWnd, SafeHandle hRgn)
		{
			bool hRgnAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HRGN hRgnLocal;
				if (hRgn is object)
				{
					hRgn.DangerousAddRef(ref hRgnAddRef);
					hRgnLocal = (winmdroot.Graphics.Gdi.HRGN)hRgn.DangerousGetHandle();
				}
				else
					hRgnLocal = default(winmdroot.Graphics.Gdi.HRGN);
				winmdroot.Graphics.Gdi.GDI_REGION_TYPE __result = PInvoke.GetWindowRgn(hWnd, hRgnLocal);
				return __result;
			}
			finally
			{
				if (hRgnAddRef)
					hRgn.DangerousRelease();
			}
		}

		/// <summary>The GetWindowRgn function obtains a copy of the window region of a window.</summary>
		/// <param name="hWnd">Handle to the window whose window region is to be obtained.</param>
		/// <param name="hRgn">Handle to the region which will be modified to represent the window region.</param>
		/// <returns>
		/// <para>The return value specifies the type of the region that the function obtains. It can be one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrgn">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.GDI_REGION_TYPE GetWindowRgn(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HRGN hRgn);

		/// <inheritdoc cref="GetWindowRgnBox(winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.GDI_REGION_TYPE GetWindowRgnBox(winmdroot.Foundation.HWND hWnd, out winmdroot.Foundation.RECT lprc)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Graphics.Gdi.GDI_REGION_TYPE __result = PInvoke.GetWindowRgnBox(hWnd, lprcLocal);
				return __result;
			}
		}

		/// <summary>The GetWindowRgnBox function retrieves the dimensions of the tightest bounding rectangle for the window region of a window.</summary>
		/// <param name="hWnd">Handle to the window.</param>
		/// <param name="lprc">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the rectangle dimensions, in device units relative to the upper-left corner of the window.</param>
		/// <returns>
		/// <para>The return value specifies the type of the region that the function obtains. It can be one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrgnbox">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Graphics.Gdi.GDI_REGION_TYPE GetWindowRgnBox(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.RECT* lprc);

		/// <inheritdoc cref="ExcludeUpdateRgn(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.HWND)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int ExcludeUpdateRgn(SafeHandle hDC, winmdroot.Foundation.HWND hWnd)
		{
			bool hDCAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hDCLocal;
				if (hDC is object)
				{
					hDC.DangerousAddRef(ref hDCAddRef);
					hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
				}
				else
					hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
				int __result = PInvoke.ExcludeUpdateRgn(hDCLocal, hWnd);
				return __result;
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
			}
		}

		/// <summary>The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region.</summary>
		/// <param name="hDC">Handle to the device context associated with the clipping region.</param>
		/// <param name="hWnd">Handle to the window to update.</param>
		/// <returns>
		/// <para>The return value specifies the complexity of the excluded region; it can be any one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-excludeupdatergn">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern int ExcludeUpdateRgn(winmdroot.Graphics.Gdi.HDC hDC, winmdroot.Foundation.HWND hWnd);

		/// <inheritdoc cref="InvalidateRect(winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL InvalidateRect(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.RECT? lpRect, winmdroot.Foundation.BOOL bErase)
		{
			winmdroot.Foundation.RECT lpRectLocal = lpRect.HasValue ? lpRect.Value : default(winmdroot.Foundation.RECT);
			winmdroot.Foundation.BOOL __result = PInvoke.InvalidateRect(hWnd, lpRect.HasValue ? &lpRectLocal : null, bErase);
			return __result;
		}

		/// <summary>The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn.</summary>
		/// <param name="hWnd">A handle to the window whose update region has changed. If this parameter is <b>NULL</b>, the system invalidates and redraws all windows, not just the windows for this application, and sends the <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a> and <a href="https://docs.microsoft.com/windows/desktop/gdi/wm-ncpaint">WM_NCPAINT</a> messages before the function returns. Setting this parameter to <b>NULL</b> is not recommended.</param>
		/// <param name="lpRect">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the client coordinates of the rectangle to be added to the update region. If this parameter is <b>NULL</b>, the entire client area is added to the update region.</param>
		/// <param name="bErase">Specifies whether the background within the update region is to be erased when the update region is processed. If this parameter is <b>TRUE</b>, the background is erased when the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-beginpaint">BeginPaint</a> function is called. If this parameter is <b>FALSE</b>, the background remains unchanged.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-invalidaterect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL InvalidateRect(winmdroot.Foundation.HWND hWnd, [Optional] winmdroot.Foundation.RECT* lpRect, winmdroot.Foundation.BOOL bErase);

		/// <inheritdoc cref="ValidateRect(winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL ValidateRect(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.RECT? lpRect)
		{
			winmdroot.Foundation.RECT lpRectLocal = lpRect.HasValue ? lpRect.Value : default(winmdroot.Foundation.RECT);
			winmdroot.Foundation.BOOL __result = PInvoke.ValidateRect(hWnd, lpRect.HasValue ? &lpRectLocal : null);
			return __result;
		}

		/// <summary>The ValidateRect function validates the client area within a rectangle by removing the rectangle from the update region of the specified window.</summary>
		/// <param name="hWnd">Handle to the window whose update region is to be modified. If this parameter is <b>NULL</b>, the system invalidates and redraws all windows and sends the <b>WM_ERASEBKGND</b> and <b>WM_NCPAINT</b> messages to the window procedure before the function returns.</param>
		/// <param name="lpRect">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the client coordinates of the rectangle to be removed from the update region. If this parameter is <b>NULL</b>, the entire client area is removed.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-validaterect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL ValidateRect(winmdroot.Foundation.HWND hWnd, [Optional] winmdroot.Foundation.RECT* lpRect);

		/// <inheritdoc cref="InvalidateRgn(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HRGN, winmdroot.Foundation.BOOL)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL InvalidateRgn(winmdroot.Foundation.HWND hWnd, SafeHandle hRgn, winmdroot.Foundation.BOOL bErase)
		{
			bool hRgnAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HRGN hRgnLocal;
				if (hRgn is object)
				{
					hRgn.DangerousAddRef(ref hRgnAddRef);
					hRgnLocal = (winmdroot.Graphics.Gdi.HRGN)hRgn.DangerousGetHandle();
				}
				else
					hRgnLocal = default(winmdroot.Graphics.Gdi.HRGN);
				winmdroot.Foundation.BOOL __result = PInvoke.InvalidateRgn(hWnd, hRgnLocal, bErase);
				return __result;
			}
			finally
			{
				if (hRgnAddRef)
					hRgn.DangerousRelease();
			}
		}

		/// <summary>The InvalidateRgn function invalidates the client area within the specified region by adding it to the current update region of a window.</summary>
		/// <param name="hWnd">A handle to the window with an update region that is to be modified.</param>
		/// <param name="hRgn">A handle to the region to be added to the update region. The region is assumed to have client coordinates. If this parameter is <b>NULL</b>, the entire client area is added to the update region.</param>
		/// <param name="bErase">Specifies whether the background within the update region should be erased when the update region is processed. If this parameter is <b>TRUE</b>, the background is erased when the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-beginpaint">BeginPaint</a> function is called. If the parameter is <b>FALSE</b>, the background remains unchanged.</param>
		/// <returns>The return value is always nonzero.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-invalidatergn">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL InvalidateRgn(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HRGN hRgn, winmdroot.Foundation.BOOL bErase);

		/// <inheritdoc cref="ValidateRgn(winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.HRGN)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL ValidateRgn(winmdroot.Foundation.HWND hWnd, SafeHandle hRgn)
		{
			bool hRgnAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HRGN hRgnLocal;
				if (hRgn is object)
				{
					hRgn.DangerousAddRef(ref hRgnAddRef);
					hRgnLocal = (winmdroot.Graphics.Gdi.HRGN)hRgn.DangerousGetHandle();
				}
				else
					hRgnLocal = default(winmdroot.Graphics.Gdi.HRGN);
				winmdroot.Foundation.BOOL __result = PInvoke.ValidateRgn(hWnd, hRgnLocal);
				return __result;
			}
			finally
			{
				if (hRgnAddRef)
					hRgn.DangerousRelease();
			}
		}

		/// <summary>The ValidateRgn function validates the client area within a region by removing the region from the current update region of the specified window.</summary>
		/// <param name="hWnd">Handle to the window whose update region is to be modified.</param>
		/// <param name="hRgn">Handle to a region that defines the area to be removed from the update region. If this parameter is <b>NULL</b>, the entire client area is removed.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-validatergn">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL ValidateRgn(winmdroot.Foundation.HWND hWnd, winmdroot.Graphics.Gdi.HRGN hRgn);

		/// <inheritdoc cref="RedrawWindow(winmdroot.Foundation.HWND, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.HRGN, winmdroot.Graphics.Gdi.REDRAW_WINDOW_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL RedrawWindow(winmdroot.Foundation.HWND hWnd, winmdroot.Foundation.RECT? lprcUpdate, SafeHandle hrgnUpdate, winmdroot.Graphics.Gdi.REDRAW_WINDOW_FLAGS flags)
		{
			bool hrgnUpdateAddRef = false;
			try
			{
				winmdroot.Foundation.RECT lprcUpdateLocal = lprcUpdate.HasValue ? lprcUpdate.Value : default(winmdroot.Foundation.RECT);
				winmdroot.Graphics.Gdi.HRGN hrgnUpdateLocal;
				if (hrgnUpdate is object)
				{
					hrgnUpdate.DangerousAddRef(ref hrgnUpdateAddRef);
					hrgnUpdateLocal = (winmdroot.Graphics.Gdi.HRGN)hrgnUpdate.DangerousGetHandle();
				}
				else
					hrgnUpdateLocal = default(winmdroot.Graphics.Gdi.HRGN);
				winmdroot.Foundation.BOOL __result = PInvoke.RedrawWindow(hWnd, lprcUpdate.HasValue ? &lprcUpdateLocal : null, hrgnUpdateLocal, flags);
				return __result;
			}
			finally
			{
				if (hrgnUpdateAddRef)
					hrgnUpdate.DangerousRelease();
			}
		}

		/// <summary>The RedrawWindow function updates the specified rectangle or region in a window's client area.</summary>
		/// <param name="hWnd">A handle to the window to be redrawn. If this parameter is <b>NULL</b>, the desktop window is updated.</param>
		/// <param name="lprcUpdate">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure containing the coordinates, in device units, of the update rectangle. This parameter is ignored if the <i>hrgnUpdate</i> parameter identifies a region.</param>
		/// <param name="hrgnUpdate">A handle to the update region. If both the <i>hrgnUpdate</i> and <i>lprcUpdate</i> parameters are <b>NULL</b>, the entire client area is added to the update region.</param>
		/// <param name="flags">
		/// <para>One or more redraw flags. This parameter can be used to invalidate or validate a window, control repainting, and control which windows are affected by <b>RedrawWindow</b>. The following flags are used to invalidate the window. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-redrawwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-redrawwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL RedrawWindow(winmdroot.Foundation.HWND hWnd, [Optional] winmdroot.Foundation.RECT* lprcUpdate, winmdroot.Graphics.Gdi.HRGN hrgnUpdate, winmdroot.Graphics.Gdi.REDRAW_WINDOW_FLAGS flags);

		/// <summary>The LockWindowUpdate function disables or enables drawing in the specified window. Only one window can be locked at a time.</summary>
		/// <param name="hWndLock">The window in which drawing will be disabled. If this parameter is <b>NULL</b>, drawing in the locked window is enabled.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero, indicating that an error occurred or another window was already locked.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-lockwindowupdate">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Foundation.BOOL LockWindowUpdate(winmdroot.Foundation.HWND hWndLock);

		/// <inheritdoc cref="ClientToScreen(winmdroot.Foundation.HWND, global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL ClientToScreen(winmdroot.Foundation.HWND hWnd, ref global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.ClientToScreen(hWnd, lpPointLocal);
				return __result;
			}
		}

		/// <summary>The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates.</summary>
		/// <param name="hWnd">A handle to the window whose client area is used for the conversion.</param>
		/// <param name="lpPoint">A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-clienttoscreen">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL ClientToScreen(winmdroot.Foundation.HWND hWnd, global::System.Drawing.Point* lpPoint);

		/// <inheritdoc cref="ScreenToClient(winmdroot.Foundation.HWND, global::System.Drawing.Point*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL ScreenToClient(winmdroot.Foundation.HWND hWnd, ref global::System.Drawing.Point lpPoint)
		{
			fixed (global::System.Drawing.Point* lpPointLocal = &lpPoint)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.ScreenToClient(hWnd, lpPointLocal);
				return __result;
			}
		}

		/// <summary>The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates.</summary>
		/// <param name="hWnd">A handle to the window whose client area will be used for the conversion.</param>
		/// <param name="lpPoint">A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that specifies the screen coordinates to be converted.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-screentoclient">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL ScreenToClient(winmdroot.Foundation.HWND hWnd, global::System.Drawing.Point* lpPoint);

		/// <inheritdoc cref="MapWindowPoints(winmdroot.Foundation.HWND, winmdroot.Foundation.HWND, global::System.Drawing.Point*, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int MapWindowPoints(winmdroot.Foundation.HWND hWndFrom, winmdroot.Foundation.HWND hWndTo, Span<global::System.Drawing.Point> lpPoints)
		{
			fixed (global::System.Drawing.Point* lpPointsLocal = lpPoints)
			{
				int __result = PInvoke.MapWindowPoints(hWndFrom, hWndTo, lpPointsLocal, (uint )lpPoints.Length);
				return __result;
			}
		}

		/// <summary>The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.</summary>
		/// <param name="hWndFrom">A handle to the window from which points are converted. If this parameter is <b>NULL</b> or HWND_DESKTOP, the points are presumed to be in screen coordinates.</param>
		/// <param name="hWndTo">A handle to the window to which points are converted. If this parameter is <b>NULL</b> or HWND_DESKTOP, the points are converted to screen coordinates.</param>
		/// <param name="lpPoints">A pointer to an array of <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure, in which case the <i>cPoints</i> parameter should be set to 2.</param>
		/// <param name="cPoints">The number of <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structures in the array pointed to by the <i>lpPoints</i> parameter.</param>
		/// <returns>
		/// <para>If the function succeeds, the low-order word of the return value is the number of pixels added to the horizontal coordinate of each source point in order to compute the horizontal coordinate of each destination point. (In addition to that, if precisely one of <i>hWndFrom</i> and <i>hWndTo</i> is mirrored, then each resulting horizontal coordinate is multiplied by -1.) The high-order word is the number of pixels added to the vertical coordinate of each source point in order to compute the vertical coordinate of each destination point. If the function fails, the return value is zero. Call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> prior to calling this method to differentiate an error return value from a legitimate "0" return value.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-mapwindowpoints">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int MapWindowPoints(winmdroot.Foundation.HWND hWndFrom, winmdroot.Foundation.HWND hWndTo, global::System.Drawing.Point* lpPoints, uint cPoints);

		/// <summary>Retrieves the current color of the specified display element.</summary>
		/// <param name="nIndex">Type: <b>int</b></param>
		/// <returns>
		/// <para>Type: <b>DWORD</b> The function returns the red, green, blue (RGB) color value of the given element. If the <i>nIndex</i> parameter is out of range, the return value is zero. Because zero is also a valid RGB value, you cannot use <b>GetSysColor</b> to determine whether a system color is supported by the current platform. Instead, use the <a href="/windows/desktop/api/winuser/nf-winuser-getsyscolorbrush">GetSysColorBrush</a> function, which returns <b>NULL</b> if the color is not supported.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsyscolor">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern uint GetSysColor(winmdroot.Graphics.Gdi.SYS_COLOR_INDEX nIndex);

		/// <inheritdoc cref="GetSysColorBrush(winmdroot.Graphics.Gdi.SYS_COLOR_INDEX)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DeleteObjectSafeHandle GetSysColorBrush_SafeHandle(winmdroot.Graphics.Gdi.SYS_COLOR_INDEX nIndex)
		{
			winmdroot.Graphics.Gdi.HBRUSH __result = PInvoke.GetSysColorBrush(nIndex);
			return new DeleteObjectSafeHandle(__result, ownsHandle: true);
		}

		/// <summary>The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index.</summary>
		/// <param name="nIndex">A color index. This value corresponds to the color used to paint one of the window elements. See <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getsyscolor">GetSysColor</a> for system color index values.</param>
		/// <returns>The return value identifies a logical brush if the <i>nIndex</i> parameter is supported by the current platform. Otherwise, it returns <b>NULL</b>.</returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsyscolorbrush">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.HBRUSH GetSysColorBrush(winmdroot.Graphics.Gdi.SYS_COLOR_INDEX nIndex);

		/// <inheritdoc cref="SetSysColors(int, int*, winmdroot.Foundation.COLORREF*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetSysColors(ReadOnlySpan<int> lpaElements, ReadOnlySpan<winmdroot.Foundation.COLORREF> lpaRgbValues)
		{
			fixed (winmdroot.Foundation.COLORREF* lpaRgbValuesLocal = lpaRgbValues)
			{
				fixed (int* lpaElementsLocal = lpaElements)
				{
					if (lpaElements.Length != lpaRgbValues.Length)throw new ArgumentException();
					winmdroot.Foundation.BOOL __result = PInvoke.SetSysColors(lpaRgbValues.Length, lpaElementsLocal, lpaRgbValuesLocal);
					return __result;
				}
			}
		}

		/// <summary>Sets the colors for the specified display elements.</summary>
		/// <param name="cElements">
		/// <para>Type: <b>int</b> The number of display elements in the <i>lpaElements</i> array.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setsyscolors#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpaElements">
		/// <para>Type: <b>const INT*</b> An array of integers that specify the display elements to be changed. For a list of display elements, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getsyscolor">GetSysColor</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setsyscolors#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpaRgbValues">
		/// <para>Type: <b>const COLORREF*</b> An array of <a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a> values that contain the new red, green, blue (RGB) color values for the display elements in the array pointed to by the <i>lpaElements</i> parameter. To generate a <a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a>, use the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-rgb">RGB</a> macro.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setsyscolors#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>BOOL</b> If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setsyscolors">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetSysColors(int cElements, int* lpaElements, winmdroot.Foundation.COLORREF* lpaRgbValues);

		/// <inheritdoc cref="DrawFocusRect(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL DrawFocusRect(SafeHandle hDC, in winmdroot.Foundation.RECT lprc)
		{
			bool hDCAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
				{
					winmdroot.Graphics.Gdi.HDC hDCLocal;
					if (hDC is object)
					{
						hDC.DangerousAddRef(ref hDCAddRef);
						hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
					}
					else
						hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
					winmdroot.Foundation.BOOL __result = PInvoke.DrawFocusRect(hDCLocal, lprcLocal);
					return __result;
				}
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
			}
		}

		/// <summary>The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus.</summary>
		/// <param name="hDC">A handle to the device context.</param>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the logical coordinates of the rectangle.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-drawfocusrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL DrawFocusRect(winmdroot.Graphics.Gdi.HDC hDC, winmdroot.Foundation.RECT* lprc);

		/// <inheritdoc cref="FillRect(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.HBRUSH)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int FillRect(SafeHandle hDC, in winmdroot.Foundation.RECT lprc, SafeHandle hbr)
		{
			bool hDCAddRef = false;
			bool hbrAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
				{
					winmdroot.Graphics.Gdi.HDC hDCLocal;
					if (hDC is object)
					{
						hDC.DangerousAddRef(ref hDCAddRef);
						hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
					}
					else
						hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
					winmdroot.Graphics.Gdi.HBRUSH hbrLocal;
					if (hbr is object)
					{
						hbr.DangerousAddRef(ref hbrAddRef);
						hbrLocal = (winmdroot.Graphics.Gdi.HBRUSH)hbr.DangerousGetHandle();
					}
					else
						hbrLocal = default(winmdroot.Graphics.Gdi.HBRUSH);
					int __result = PInvoke.FillRect(hDCLocal, lprcLocal, hbrLocal);
					return __result;
				}
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
				if (hbrAddRef)
					hbr.DangerousRelease();
			}
		}

		/// <summary>The FillRect function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle.</summary>
		/// <param name="hDC">A handle to the device context.</param>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the rectangle to be filled.</param>
		/// <param name="hbr">A handle to the brush used to fill the rectangle.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-fillrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int FillRect(winmdroot.Graphics.Gdi.HDC hDC, winmdroot.Foundation.RECT* lprc, winmdroot.Graphics.Gdi.HBRUSH hbr);

		/// <inheritdoc cref="FrameRect(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.HBRUSH)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe int FrameRect(SafeHandle hDC, in winmdroot.Foundation.RECT lprc, SafeHandle hbr)
		{
			bool hDCAddRef = false;
			bool hbrAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
				{
					winmdroot.Graphics.Gdi.HDC hDCLocal;
					if (hDC is object)
					{
						hDC.DangerousAddRef(ref hDCAddRef);
						hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
					}
					else
						hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
					winmdroot.Graphics.Gdi.HBRUSH hbrLocal;
					if (hbr is object)
					{
						hbr.DangerousAddRef(ref hbrAddRef);
						hbrLocal = (winmdroot.Graphics.Gdi.HBRUSH)hbr.DangerousGetHandle();
					}
					else
						hbrLocal = default(winmdroot.Graphics.Gdi.HBRUSH);
					int __result = PInvoke.FrameRect(hDCLocal, lprcLocal, hbrLocal);
					return __result;
				}
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
				if (hbrAddRef)
					hbr.DangerousRelease();
			}
		}

		/// <summary>The FrameRect function draws a border around the specified rectangle by using the specified brush. The width and height of the border are always one logical unit.</summary>
		/// <param name="hDC">A handle to the device context in which the border is drawn.</param>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the upper-left and lower-right corners of the rectangle.</param>
		/// <param name="hbr">A handle to the brush used to draw the border.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-framerect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe int FrameRect(winmdroot.Graphics.Gdi.HDC hDC, winmdroot.Foundation.RECT* lprc, winmdroot.Graphics.Gdi.HBRUSH hbr);

		/// <inheritdoc cref="InvertRect(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL InvertRect(SafeHandle hDC, in winmdroot.Foundation.RECT lprc)
		{
			bool hDCAddRef = false;
			try
			{
				fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
				{
					winmdroot.Graphics.Gdi.HDC hDCLocal;
					if (hDC is object)
					{
						hDC.DangerousAddRef(ref hDCAddRef);
						hDCLocal = (winmdroot.Graphics.Gdi.HDC)hDC.DangerousGetHandle();
					}
					else
						hDCLocal = default(winmdroot.Graphics.Gdi.HDC);
					winmdroot.Foundation.BOOL __result = PInvoke.InvertRect(hDCLocal, lprcLocal);
					return __result;
				}
			}
			finally
			{
				if (hDCAddRef)
					hDC.DangerousRelease();
			}
		}

		/// <summary>The InvertRect function inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel in the rectangle's interior.</summary>
		/// <param name="hDC">A handle to the device context.</param>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the rectangle to be inverted.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-invertrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL InvertRect(winmdroot.Graphics.Gdi.HDC hDC, winmdroot.Foundation.RECT* lprc);

		/// <inheritdoc cref="SetRect(winmdroot.Foundation.RECT*, int, int, int, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetRect(out winmdroot.Foundation.RECT lprc, int xLeft, int yTop, int xRight, int yBottom)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.SetRect(lprcLocal, xLeft, yTop, xRight, yBottom);
				return __result;
			}
		}

		/// <summary>The SetRect function sets the coordinates of the specified rectangle. This is equivalent to assigning the left, top, right, and bottom arguments to the appropriate members of the RECT structure.</summary>
		/// <param name="lprc">Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the rectangle to be set.</param>
		/// <param name="xLeft">Specifies the x-coordinate of the rectangle's upper-left corner.</param>
		/// <param name="yTop">Specifies the y-coordinate of the rectangle's upper-left corner.</param>
		/// <param name="xRight">Specifies the x-coordinate of the rectangle's lower-right corner.</param>
		/// <param name="yBottom">Specifies the y-coordinate of the rectangle's lower-right corner.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetRect(winmdroot.Foundation.RECT* lprc, int xLeft, int yTop, int xRight, int yBottom);

		/// <inheritdoc cref="SetRectEmpty(winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SetRectEmpty(out winmdroot.Foundation.RECT lprc)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.SetRectEmpty(lprcLocal);
				return __result;
			}
		}

		/// <summary>The SetRectEmpty function creates an empty rectangle in which all coordinates are set to zero.</summary>
		/// <param name="lprc">Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the coordinates of the rectangle.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setrectempty">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetRectEmpty(winmdroot.Foundation.RECT* lprc);

		/// <inheritdoc cref="CopyRect(winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL CopyRect(out winmdroot.Foundation.RECT lprcDst, in winmdroot.Foundation.RECT lprcSrc)
		{
			fixed (winmdroot.Foundation.RECT* lprcSrcLocal = &lprcSrc)
			{
				fixed (winmdroot.Foundation.RECT* lprcDstLocal = &lprcDst)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.CopyRect(lprcDstLocal, lprcSrcLocal);
					return __result;
				}
			}
		}

		/// <summary>The CopyRect function copies the coordinates of one rectangle to another.</summary>
		/// <param name="lprcDst">Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the logical coordinates of the source rectangle.</param>
		/// <param name="lprcSrc">Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure whose coordinates are to be copied in logical units.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-copyrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL CopyRect(winmdroot.Foundation.RECT* lprcDst, winmdroot.Foundation.RECT* lprcSrc);

		/// <inheritdoc cref="InflateRect(winmdroot.Foundation.RECT*, int, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL InflateRect(ref winmdroot.Foundation.RECT lprc, int dx, int dy)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.InflateRect(lprcLocal, dx, dy);
				return __result;
			}
		}

		/// <summary>The InflateRect function increases or decreases the width and height of the specified rectangle.</summary>
		/// <param name="lprc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that increases or decreases in size.</param>
		/// <param name="dx">The amount to increase or decrease the rectangle width. This parameter must be negative to decrease the width.</param>
		/// <param name="dy">The amount to increase or decrease the rectangle height. This parameter must be negative to decrease the height.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-inflaterect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL InflateRect(winmdroot.Foundation.RECT* lprc, int dx, int dy);

		/// <inheritdoc cref="IntersectRect(winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL IntersectRect(out winmdroot.Foundation.RECT lprcDst, in winmdroot.Foundation.RECT lprcSrc1, in winmdroot.Foundation.RECT lprcSrc2)
		{
			fixed (winmdroot.Foundation.RECT* lprcSrc2Local = &lprcSrc2)
			{
				fixed (winmdroot.Foundation.RECT* lprcSrc1Local = &lprcSrc1)
				{
					fixed (winmdroot.Foundation.RECT* lprcDstLocal = &lprcDst)
					{
						winmdroot.Foundation.BOOL __result = PInvoke.IntersectRect(lprcDstLocal, lprcSrc1Local, lprcSrc2Local);
						return __result;
					}
				}
			}
		}

		/// <summary>The IntersectRect function calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle.</summary>
		/// <param name="lprcDst">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that is to receive the intersection of the rectangles pointed to by the <i>lprcSrc1</i> and <i>lprcSrc2</i> parameters. This parameter cannot be <b>NULL</b>.</param>
		/// <param name="lprcSrc1">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the first source rectangle.</param>
		/// <param name="lprcSrc2">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the second source rectangle.</param>
		/// <returns>
		/// <para>If the rectangles intersect, the return value is nonzero. If the rectangles do not intersect, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-intersectrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL IntersectRect(winmdroot.Foundation.RECT* lprcDst, winmdroot.Foundation.RECT* lprcSrc1, winmdroot.Foundation.RECT* lprcSrc2);

		/// <inheritdoc cref="UnionRect(winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL UnionRect(out winmdroot.Foundation.RECT lprcDst, in winmdroot.Foundation.RECT lprcSrc1, in winmdroot.Foundation.RECT lprcSrc2)
		{
			fixed (winmdroot.Foundation.RECT* lprcSrc2Local = &lprcSrc2)
			{
				fixed (winmdroot.Foundation.RECT* lprcSrc1Local = &lprcSrc1)
				{
					fixed (winmdroot.Foundation.RECT* lprcDstLocal = &lprcDst)
					{
						winmdroot.Foundation.BOOL __result = PInvoke.UnionRect(lprcDstLocal, lprcSrc1Local, lprcSrc2Local);
						return __result;
					}
				}
			}
		}

		/// <summary>The UnionRect function creates the union of two rectangles. The union is the smallest rectangle that contains both source rectangles.</summary>
		/// <param name="lprcDst">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that will receive a rectangle containing the rectangles pointed to by the <i>lprcSrc1</i> and <i>lprcSrc2</i> parameters.</param>
		/// <param name="lprcSrc1">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the first source rectangle.</param>
		/// <param name="lprcSrc2">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the second source rectangle.</param>
		/// <returns>
		/// <para>If the specified structure contains a nonempty rectangle, the return value is nonzero. If the specified structure does not contain a nonempty rectangle, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-unionrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL UnionRect(winmdroot.Foundation.RECT* lprcDst, winmdroot.Foundation.RECT* lprcSrc1, winmdroot.Foundation.RECT* lprcSrc2);

		/// <inheritdoc cref="SubtractRect(winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL SubtractRect(out winmdroot.Foundation.RECT lprcDst, in winmdroot.Foundation.RECT lprcSrc1, in winmdroot.Foundation.RECT lprcSrc2)
		{
			fixed (winmdroot.Foundation.RECT* lprcSrc2Local = &lprcSrc2)
			{
				fixed (winmdroot.Foundation.RECT* lprcSrc1Local = &lprcSrc1)
				{
					fixed (winmdroot.Foundation.RECT* lprcDstLocal = &lprcDst)
					{
						winmdroot.Foundation.BOOL __result = PInvoke.SubtractRect(lprcDstLocal, lprcSrc1Local, lprcSrc2Local);
						return __result;
					}
				}
			}
		}

		/// <summary>The SubtractRect function determines the coordinates of a rectangle formed by subtracting one rectangle from another.</summary>
		/// <param name="lprcDst">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the coordinates of the rectangle determined by subtracting the rectangle pointed to by <i>lprcSrc2</i> from the rectangle pointed to by <i>lprcSrc1</i>.</param>
		/// <param name="lprcSrc1">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure from which the function subtracts the rectangle pointed to by <i>lprcSrc2</i>.</param>
		/// <param name="lprcSrc2">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that the function subtracts from the rectangle pointed to by <i>lprcSrc1</i>.</param>
		/// <returns>
		/// <para>If the resulting rectangle is empty, the return value is zero. If the resulting rectangle is not empty, the return value is nonzero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-subtractrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL SubtractRect(winmdroot.Foundation.RECT* lprcDst, winmdroot.Foundation.RECT* lprcSrc1, winmdroot.Foundation.RECT* lprcSrc2);

		/// <inheritdoc cref="OffsetRect(winmdroot.Foundation.RECT*, int, int)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL OffsetRect(ref winmdroot.Foundation.RECT lprc, int dx, int dy)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.OffsetRect(lprcLocal, dx, dy);
				return __result;
			}
		}

		/// <summary>The OffsetRect function moves the specified rectangle by the specified offsets.</summary>
		/// <param name="lprc">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the rectangle to be moved.</param>
		/// <param name="dx">Specifies the amount to move the rectangle left or right. This parameter must be a negative value to move the rectangle to the left.</param>
		/// <param name="dy">Specifies the amount to move the rectangle up or down. This parameter must be a negative value to move the rectangle up.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-offsetrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL OffsetRect(winmdroot.Foundation.RECT* lprc, int dx, int dy);

		/// <inheritdoc cref="IsRectEmpty(winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL IsRectEmpty(in winmdroot.Foundation.RECT lprc)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.IsRectEmpty(lprcLocal);
				return __result;
			}
		}

		/// <summary>The IsRectEmpty function determines whether the specified rectangle is empty.</summary>
		/// <param name="lprc">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the rectangle.</param>
		/// <returns>
		/// <para>If the rectangle is empty, the return value is nonzero. If the rectangle is not empty, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-isrectempty">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL IsRectEmpty(winmdroot.Foundation.RECT* lprc);

		/// <inheritdoc cref="EqualRect(winmdroot.Foundation.RECT*, winmdroot.Foundation.RECT*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EqualRect(in winmdroot.Foundation.RECT lprc1, in winmdroot.Foundation.RECT lprc2)
		{
			fixed (winmdroot.Foundation.RECT* lprc2Local = &lprc2)
			{
				fixed (winmdroot.Foundation.RECT* lprc1Local = &lprc1)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.EqualRect(lprc1Local, lprc2Local);
					return __result;
				}
			}
		}

		/// <summary>The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners.</summary>
		/// <param name="lprc1">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the first rectangle.</param>
		/// <param name="lprc2">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the second rectangle.</param>
		/// <returns>
		/// <para>If the two rectangles are identical, the return value is nonzero. If the two rectangles are not identical, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-equalrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EqualRect(winmdroot.Foundation.RECT* lprc1, winmdroot.Foundation.RECT* lprc2);

		/// <inheritdoc cref="PtInRect(winmdroot.Foundation.RECT*, global::System.Drawing.Point)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL PtInRect(in winmdroot.Foundation.RECT lprc, global::System.Drawing.Point pt)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.PtInRect(lprcLocal, pt);
				return __result;
			}
		}

		/// <summary>The PtInRect function determines whether the specified point lies within the specified rectangle.</summary>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the specified rectangle.</param>
		/// <param name="pt">A <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that contains the specified point.</param>
		/// <returns>
		/// <para>If the specified point lies within the rectangle, the return value is nonzero. If the specified point does not lie within the rectangle, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-ptinrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL PtInRect(winmdroot.Foundation.RECT* lprc, global::System.Drawing.Point pt);

		/// <inheritdoc cref="LoadBitmap(winmdroot.Foundation.HINSTANCE, winmdroot.Foundation.PCWSTR)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe DeleteObjectSafeHandle LoadBitmap(SafeHandle hInstance, string lpBitmapName)
		{
			bool hInstanceAddRef = false;
			try
			{
				fixed (char* lpBitmapNameLocal = lpBitmapName)
				{
					winmdroot.Foundation.HINSTANCE hInstanceLocal;
					if (hInstance is object)
					{
						hInstance.DangerousAddRef(ref hInstanceAddRef);
						hInstanceLocal = (winmdroot.Foundation.HINSTANCE)hInstance.DangerousGetHandle();
					}
					else
						hInstanceLocal = default(winmdroot.Foundation.HINSTANCE);
					winmdroot.Graphics.Gdi.HBITMAP __result = PInvoke.LoadBitmap(hInstanceLocal, lpBitmapNameLocal);
					return new DeleteObjectSafeHandle(__result, ownsHandle: true);
				}
			}
			finally
			{
				if (hInstanceAddRef)
					hInstance.DangerousRelease();
			}
		}

		/// <summary>The LoadBitmap function loads the specified bitmap resource from a module's executable file.</summary>
		/// <param name="hInstance">A handle to the instance of the module whose executable file contains the bitmap to be loaded.</param>
		/// <param name="lpBitmapName">A pointer to a null-terminated string that contains the name of the bitmap resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro can be used to create this value.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is the handle to the specified bitmap. If the function fails, the return value is <b>NULL</b>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-loadbitmapw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "LoadBitmapW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.HBITMAP LoadBitmap(winmdroot.Foundation.HINSTANCE hInstance, winmdroot.Foundation.PCWSTR lpBitmapName);

		/// <inheritdoc cref="ChangeDisplaySettings(winmdroot.Graphics.Gdi.DEVMODEW*, winmdroot.Graphics.Gdi.CDS_TYPE)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.DISP_CHANGE ChangeDisplaySettings(winmdroot.Graphics.Gdi.DEVMODEW? lpDevMode, winmdroot.Graphics.Gdi.CDS_TYPE dwFlags)
		{
			winmdroot.Graphics.Gdi.DEVMODEW lpDevModeLocal = lpDevMode.HasValue ? lpDevMode.Value : default(winmdroot.Graphics.Gdi.DEVMODEW);
			winmdroot.Graphics.Gdi.DISP_CHANGE __result = PInvoke.ChangeDisplaySettings(lpDevMode.HasValue ? &lpDevModeLocal : null, dwFlags);
			return __result;
		}

		/// <summary>The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.</summary>
		/// <param name="lpDevMode">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change. The <b>dmSize</b> member of <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> must be initialized to the size, in bytes, of the <b>DEVMODE</b> structure. The <b>dmDriverExtra</b> member of <b>DEVMODE</b> must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any or all of the following members of the <b>DEVMODE</b> structure. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changedisplaysettingsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags"></param>
		/// <returns>
		/// <para>The <b>ChangeDisplaySettings</b> function returns one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changedisplaysettingsw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "ChangeDisplaySettingsW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Graphics.Gdi.DISP_CHANGE ChangeDisplaySettings([Optional] winmdroot.Graphics.Gdi.DEVMODEW* lpDevMode, winmdroot.Graphics.Gdi.CDS_TYPE dwFlags);

		/// <inheritdoc cref="ChangeDisplaySettingsEx(winmdroot.Foundation.PCWSTR, winmdroot.Graphics.Gdi.DEVMODEW*, winmdroot.Foundation.HWND, winmdroot.Graphics.Gdi.CDS_TYPE, void*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.DISP_CHANGE ChangeDisplaySettingsEx(string lpszDeviceName, winmdroot.Graphics.Gdi.DEVMODEW? lpDevMode, winmdroot.Foundation.HWND hwnd, winmdroot.Graphics.Gdi.CDS_TYPE dwflags, void* lParam)
		{
			fixed (char* lpszDeviceNameLocal = lpszDeviceName)
			{
				winmdroot.Graphics.Gdi.DEVMODEW lpDevModeLocal = lpDevMode.HasValue ? lpDevMode.Value : default(winmdroot.Graphics.Gdi.DEVMODEW);
				winmdroot.Graphics.Gdi.DISP_CHANGE __result = PInvoke.ChangeDisplaySettingsEx(lpszDeviceNameLocal, lpDevMode.HasValue ? &lpDevModeLocal : null, hwnd, dwflags, lParam);
				return __result;
			}
		}

		/// <summary>The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode.</summary>
		/// <param name="lpszDeviceName">
		/// <para>A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaydevicesa">EnumDisplayDevices</a> are valid. See <b>EnumDisplayDevices</b> for further information on the names associated with these display devices. The <i>lpszDeviceName</i> parameter can be <b>NULL</b>. A <b>NULL</b> value specifies the default display device. The default device can be determined by calling <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaydevicesa">EnumDisplayDevices</a> and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changedisplaysettingsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpDevMode">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change. The <b>dmSize</b> member must be initialized to the size, in bytes, of the <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure. The <b>dmDriverExtra</b> member must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any of the following members of the <b>DEVMODE</b> structure. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changedisplaysettingsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hwnd">Reserved; must be <b>NULL</b>.</param>
		/// <param name="dwflags"></param>
		/// <param name="lParam">If <i>dwFlags</i> is <b>CDS_VIDEOPARAMETERS</b>, <i>lParam</i> is a pointer to a <a href="https://docs.microsoft.com/previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure. Otherwise <i>lParam</i> must be <b>NULL</b>.</param>
		/// <returns>
		/// <para>The <b>ChangeDisplaySettingsEx</b> function returns one of the following values. </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-changedisplaysettingsexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "ChangeDisplaySettingsExW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Graphics.Gdi.DISP_CHANGE ChangeDisplaySettingsEx(winmdroot.Foundation.PCWSTR lpszDeviceName, [Optional] winmdroot.Graphics.Gdi.DEVMODEW* lpDevMode, winmdroot.Foundation.HWND hwnd, winmdroot.Graphics.Gdi.CDS_TYPE dwflags, [Optional] void* lParam);

		/// <inheritdoc cref="EnumDisplaySettings(winmdroot.Foundation.PCWSTR, winmdroot.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE, winmdroot.Graphics.Gdi.DEVMODEW*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EnumDisplaySettings(string lpszDeviceName, winmdroot.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE iModeNum, ref winmdroot.Graphics.Gdi.DEVMODEW lpDevMode)
		{
			fixed (winmdroot.Graphics.Gdi.DEVMODEW* lpDevModeLocal = &lpDevMode)
			{
				fixed (char* lpszDeviceNameLocal = lpszDeviceName)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.EnumDisplaySettings(lpszDeviceNameLocal, iModeNum, lpDevModeLocal);
					return __result;
				}
			}
		}

		/// <summary>The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.</summary>
		/// <param name="lpszDeviceName">
		/// <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information. This parameter is either <b>NULL</b> or a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-display_devicea">DISPLAY_DEVICE</a>.<b>DeviceName</b> returned from <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaydevicesa">EnumDisplayDevices</a>. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaysettingsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="iModeNum"></param>
		/// <param name="lpDevMode">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <c>sizeof(DEVMODE)</c>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data. The <b>EnumDisplaySettings</b> function sets values for the following five <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> members: </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaysettingsw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaysettingsw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "EnumDisplaySettingsW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EnumDisplaySettings(winmdroot.Foundation.PCWSTR lpszDeviceName, winmdroot.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE iModeNum, winmdroot.Graphics.Gdi.DEVMODEW* lpDevMode);

		/// <inheritdoc cref="EnumDisplaySettingsEx(winmdroot.Foundation.PCWSTR, winmdroot.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE, winmdroot.Graphics.Gdi.DEVMODEW*, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EnumDisplaySettingsEx(string lpszDeviceName, winmdroot.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE iModeNum, ref winmdroot.Graphics.Gdi.DEVMODEW lpDevMode, uint dwFlags)
		{
			fixed (winmdroot.Graphics.Gdi.DEVMODEW* lpDevModeLocal = &lpDevMode)
			{
				fixed (char* lpszDeviceNameLocal = lpszDeviceName)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.EnumDisplaySettingsEx(lpszDeviceNameLocal, iModeNum, lpDevModeLocal, dwFlags);
					return __result;
				}
			}
		}

		/// <summary>The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.</summary>
		/// <param name="lpszDeviceName">
		/// <para>A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information. This parameter is either <b>NULL</b> or a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-display_devicea">DISPLAY_DEVICE</a>. <b>DeviceName</b> returned from <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-enumdisplaydevicesa">EnumDisplayDevices</a>. A <b>NULL</b> value specifies the current display device on the computer that the calling thread is running on.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaysettingsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="iModeNum"></param>
		/// <param name="lpDevMode">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettingsEx</b>, set the <b>dmSize</b> member to <b>sizeof</b> (<a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a>), and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data. The <b>EnumDisplaySettingsEx</b> function will populate the <b>dmFields</b> member of the <b>lpDevMode</b> and one or more other members of the <a href="https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure. To determine which members were set by the call to <b>EnumDisplaySettingsEx</b>, inspect the <i>dmFields</i> bitmask. Some of the fields typically populated by this function include: </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaysettingsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">
		/// <para>This parameter can be the following value. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaysettingsexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaysettingsexw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "EnumDisplaySettingsExW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EnumDisplaySettingsEx(winmdroot.Foundation.PCWSTR lpszDeviceName, winmdroot.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE iModeNum, winmdroot.Graphics.Gdi.DEVMODEW* lpDevMode, uint dwFlags);

		/// <inheritdoc cref="EnumDisplayDevices(winmdroot.Foundation.PCWSTR, uint, winmdroot.Graphics.Gdi.DISPLAY_DEVICEW*, uint)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EnumDisplayDevices(string lpDevice, uint iDevNum, ref winmdroot.Graphics.Gdi.DISPLAY_DEVICEW lpDisplayDevice, uint dwFlags)
		{
			fixed (winmdroot.Graphics.Gdi.DISPLAY_DEVICEW* lpDisplayDeviceLocal = &lpDisplayDevice)
			{
				fixed (char* lpDeviceLocal = lpDevice)
				{
					winmdroot.Foundation.BOOL __result = PInvoke.EnumDisplayDevices(lpDeviceLocal, iDevNum, lpDisplayDeviceLocal, dwFlags);
					return __result;
				}
			}
		}

		/// <summary>The EnumDisplayDevices function lets you obtain information about the display devices in the current session.</summary>
		/// <param name="lpDevice">
		/// <para>A pointer to the device name. If <b>NULL</b>, function returns information for the display adapter(s) on the machine, based on <i>iDevNum</i>. For more information, see Remarks.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaydevicesw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="iDevNum">
		/// <para>An index value that specifies the display device of interest. The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaydevicesw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpDisplayDevice">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-display_devicea">DISPLAY_DEVICE</a> structure that receives information about the display device specified by <i>iDevNum</i>. Before calling <b>EnumDisplayDevices</b>, you must initialize the <b>cb</b> member of <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-display_devicea">DISPLAY_DEVICE</a> to the size, in bytes, of <b>DISPLAY_DEVICE</b>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaydevicesw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-display_devicea">DISPLAY_DEVICE</a> structure returned in <i>lpDisplayDevice</i>. The resulting device interface name can be used with <a href="https://docs.microsoft.com/windows-hardware/drivers/install/setupapi">SetupAPI functions</a> and serves as a link between GDI monitor devices and SetupAPI monitor devices.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The function fails if <i>iDevNum</i> is greater than the largest device index.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaydevicesw">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "EnumDisplayDevicesW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EnumDisplayDevices(winmdroot.Foundation.PCWSTR lpDevice, uint iDevNum, winmdroot.Graphics.Gdi.DISPLAY_DEVICEW* lpDisplayDevice, uint dwFlags);

		/// <summary>The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point.</summary>
		/// <param name="pt">A <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that specifies the point of interest in virtual-screen coordinates.</param>
		/// <param name="dwFlags">Determines the function's return value if the point is not contained within any display monitor.</param>
		/// <returns>
		/// <para>If the point is contained by a display monitor, the return value is an <b>HMONITOR</b> handle to that display monitor. If the point is not contained by a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-monitorfrompoint">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.HMONITOR MonitorFromPoint(global::System.Drawing.Point pt, winmdroot.Graphics.Gdi.MONITOR_FROM_FLAGS dwFlags);

		/// <inheritdoc cref="MonitorFromRect(winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.MONITOR_FROM_FLAGS)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Graphics.Gdi.HMONITOR MonitorFromRect(in winmdroot.Foundation.RECT lprc, winmdroot.Graphics.Gdi.MONITOR_FROM_FLAGS dwFlags)
		{
			fixed (winmdroot.Foundation.RECT* lprcLocal = &lprc)
			{
				winmdroot.Graphics.Gdi.HMONITOR __result = PInvoke.MonitorFromRect(lprcLocal, dwFlags);
				return __result;
			}
		}

		/// <summary>The MonitorFromRect function retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.</summary>
		/// <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the rectangle of interest in virtual-screen coordinates.</param>
		/// <param name="dwFlags">Determines the function's return value if the rectangle does not intersect any display monitor.</param>
		/// <returns>
		/// <para>If the rectangle intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the rectangle. If the rectangle does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-monitorfromrect">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Graphics.Gdi.HMONITOR MonitorFromRect(winmdroot.Foundation.RECT* lprc, winmdroot.Graphics.Gdi.MONITOR_FROM_FLAGS dwFlags);

		/// <summary>The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.</summary>
		/// <param name="hwnd">A handle to the window of interest.</param>
		/// <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
		/// <returns>
		/// <para>If the window intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the window. If the window does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-monitorfromwindow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern winmdroot.Graphics.Gdi.HMONITOR MonitorFromWindow(winmdroot.Foundation.HWND hwnd, winmdroot.Graphics.Gdi.MONITOR_FROM_FLAGS dwFlags);

		/// <inheritdoc cref="GetMonitorInfo(winmdroot.Graphics.Gdi.HMONITOR, winmdroot.Graphics.Gdi.MONITORINFO*)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL GetMonitorInfo(winmdroot.Graphics.Gdi.HMONITOR hMonitor, ref winmdroot.Graphics.Gdi.MONITORINFO lpmi)
		{
			fixed (winmdroot.Graphics.Gdi.MONITORINFO* lpmiLocal = &lpmi)
			{
				winmdroot.Foundation.BOOL __result = PInvoke.GetMonitorInfo(hMonitor, lpmiLocal);
				return __result;
			}
		}

		/// <summary>The GetMonitorInfo function retrieves information about a display monitor.</summary>
		/// <param name="hMonitor">A handle to the display monitor of interest.</param>
		/// <param name="lpmi">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure that receives information about the specified display monitor. You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure is a superset of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmonitorinfow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmonitorinfow">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, EntryPoint = "GetMonitorInfoW")]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetMonitorInfo(winmdroot.Graphics.Gdi.HMONITOR hMonitor, winmdroot.Graphics.Gdi.MONITORINFO* lpmi);

		/// <inheritdoc cref="EnumDisplayMonitors(winmdroot.Graphics.Gdi.HDC, winmdroot.Foundation.RECT*, winmdroot.Graphics.Gdi.MONITORENUMPROC, winmdroot.Foundation.LPARAM)"/>
		[SupportedOSPlatform("windows5.0")]
		internal static unsafe winmdroot.Foundation.BOOL EnumDisplayMonitors(SafeHandle hdc, winmdroot.Foundation.RECT? lprcClip, winmdroot.Graphics.Gdi.MONITORENUMPROC lpfnEnum, winmdroot.Foundation.LPARAM dwData)
		{
			bool hdcAddRef = false;
			try
			{
				winmdroot.Graphics.Gdi.HDC hdcLocal;
				if (hdc is object)
				{
					hdc.DangerousAddRef(ref hdcAddRef);
					hdcLocal = (winmdroot.Graphics.Gdi.HDC)hdc.DangerousGetHandle();
				}
				else
					hdcLocal = default(winmdroot.Graphics.Gdi.HDC);
				winmdroot.Foundation.RECT lprcClipLocal = lprcClip.HasValue ? lprcClip.Value : default(winmdroot.Foundation.RECT);
				winmdroot.Foundation.BOOL __result = PInvoke.EnumDisplayMonitors(hdcLocal, lprcClip.HasValue ? &lprcClipLocal : null, lpfnEnum, dwData);
				return __result;
			}
			finally
			{
				if (hdcAddRef)
					hdc.DangerousRelease();
			}
		}

		/// <summary>The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors.</summary>
		/// <param name="hdc">
		/// <para>A handle to a display device context that defines the visible region of interest. If this parameter is <b>NULL</b>, the <i>hdcMonitor</i> parameter passed to the callback function will be <b>NULL</b>, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaymonitors#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lprcClip">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies a clipping rectangle. The region of interest is the intersection of the clipping rectangle with the visible region specified by <i>hdc</i>. If <i>hdc</i> is non-<b>NULL</b>, the coordinates of the clipping rectangle are relative to the origin of the <i>hdc</i>. If <i>hdc</i> is <b>NULL</b>, the coordinates are virtual-screen coordinates. This parameter can be <b>NULL</b> if you don't want to clip the region specified by <i>hdc</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaymonitors#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpfnEnum">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> application-defined callback function.</param>
		/// <param name="dwData">Application-defined data that <b>EnumDisplayMonitors</b> passes directly to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> function.</param>
		/// <returns>
		/// <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-enumdisplaymonitors">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.0")]
		internal static extern unsafe winmdroot.Foundation.BOOL EnumDisplayMonitors(winmdroot.Graphics.Gdi.HDC hdc, [Optional] winmdroot.Foundation.RECT* lprcClip, winmdroot.Graphics.Gdi.MONITORENUMPROC lpfnEnum, winmdroot.Foundation.LPARAM dwData);

		/// <summary>Sets the last-error code.</summary>
		/// <param name="dwErrCode">The last-error code for the thread.</param>
		/// <param name="dwType">This parameter is ignored.</param>
		/// <remarks>
		/// <para>The last-error code is kept in thread local storage so that multiple threads do not overwrite each other's values. Most functions call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> or <b>SetLastErrorEx</b> only when they fail. However, some system functions call <b>SetLastError</b> or <b>SetLastErrorEx</b> under conditions of success; those cases are noted in each function's documentation. Applications can optionally retrieve the value set by this function by using the <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function immediately after a function fails. Error codes are 32-bit values (bit 31 is the most significant bit). Bit 29 is reserved for application-defined error codes; no system error code has this bit set. If you are defining an error code for your application, set this bit to indicate that the error code has been defined by the application and to ensure that your error code does not conflict with any system-defined error codes.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlasterrorex#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern void SetLastErrorEx(winmdroot.Foundation.WIN32_ERROR dwErrCode, uint dwType);

		/// <inheritdoc cref="SetUserObjectSecurity(winmdroot.Foundation.HANDLE, winmdroot.Security.OBJECT_SECURITY_INFORMATION*, winmdroot.Security.PSECURITY_DESCRIPTOR)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL SetUserObjectSecurity(SafeHandle hObj, in winmdroot.Security.OBJECT_SECURITY_INFORMATION pSIRequested, winmdroot.Security.PSECURITY_DESCRIPTOR pSID)
		{
			bool hObjAddRef = false;
			try
			{
				fixed (winmdroot.Security.OBJECT_SECURITY_INFORMATION* pSIRequestedLocal = &pSIRequested)
				{
					winmdroot.Foundation.HANDLE hObjLocal;
					if (hObj is object)
					{
						hObj.DangerousAddRef(ref hObjAddRef);
						hObjLocal = (winmdroot.Foundation.HANDLE)hObj.DangerousGetHandle();
					}
					else
						hObjLocal = default(winmdroot.Foundation.HANDLE);
					winmdroot.Foundation.BOOL __result = PInvoke.SetUserObjectSecurity(hObjLocal, pSIRequestedLocal, pSID);
					return __result;
				}
			}
			finally
			{
				if (hObjAddRef)
					hObj.DangerousRelease();
			}
		}

		/// <summary>Sets the security of a user object. This can be, for example, a window or a DDE conversation.</summary>
		/// <param name="hObj">A handle to a user object for which security information is set.</param>
		/// <param name="pSIRequested"></param>
		/// <param name="pSID">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> structure that contains the new security information.</para>
		/// <para>This buffer must be aligned on a 4-byte boundary.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setuserobjectsecurity#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setuserobjectsecurity">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe winmdroot.Foundation.BOOL SetUserObjectSecurity(winmdroot.Foundation.HANDLE hObj, winmdroot.Security.OBJECT_SECURITY_INFORMATION* pSIRequested, winmdroot.Security.PSECURITY_DESCRIPTOR pSID);

		/// <inheritdoc cref="GetUserObjectSecurity(winmdroot.Foundation.HANDLE, uint*, winmdroot.Security.PSECURITY_DESCRIPTOR, uint, uint*)"/>
		[SupportedOSPlatform("windows5.1.2600")]
		internal static unsafe winmdroot.Foundation.BOOL GetUserObjectSecurity(SafeHandle hObj, in uint pSIRequested, winmdroot.Security.PSECURITY_DESCRIPTOR pSID, uint nLength, out uint lpnLengthNeeded)
		{
			bool hObjAddRef = false;
			try
			{
				fixed (uint* lpnLengthNeededLocal = &lpnLengthNeeded)
				{
					fixed (uint* pSIRequestedLocal = &pSIRequested)
					{
						winmdroot.Foundation.HANDLE hObjLocal;
						if (hObj is object)
						{
							hObj.DangerousAddRef(ref hObjAddRef);
							hObjLocal = (winmdroot.Foundation.HANDLE)hObj.DangerousGetHandle();
						}
						else
							hObjLocal = default(winmdroot.Foundation.HANDLE);
						winmdroot.Foundation.BOOL __result = PInvoke.GetUserObjectSecurity(hObjLocal, pSIRequestedLocal, pSID, nLength, lpnLengthNeededLocal);
						return __result;
					}
				}
			}
			finally
			{
				if (hObjAddRef)
					hObj.DangerousRelease();
			}
		}

		/// <summary>Retrieves security information for the specified user object.</summary>
		/// <param name="hObj">A handle to the user object for which to return security information.</param>
		/// <param name="pSIRequested">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that specifies the security information being requested.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getuserobjectsecurity#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pSID">
		/// <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> structure in <a href="https://docs.microsoft.com/windows/desktop/SecGloss/s-gly">self-relative</a> format that contains the requested information when the function returns. This buffer must be aligned on a 4-byte boundary.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getuserobjectsecurity#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nLength">The length, in bytes, of the buffer pointed to by the <i>pSD</i> parameter.</param>
		/// <param name="lpnLengthNeeded">A pointer to a variable to receive the number of bytes required to store the complete <a href="https://docs.microsoft.com/windows/desktop/SecGloss/s-gly">security descriptor</a>. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns <b>FALSE</b> and none of the security descriptor is copied to the buffer. Otherwise, the entire security descriptor is copied.</param>
		/// <returns>
		/// <para>If the function succeeds, the function returns nonzero.</para>
		/// <para>If the function fails, it returns zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getuserobjectsecurity">Learn more about this API from docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true, SetLastError = true)]
		[DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		[SupportedOSPlatform("windows5.1.2600")]
		internal static extern unsafe winmdroot.Foundation.BOOL GetUserObjectSecurity(winmdroot.Foundation.HANDLE hObj, uint* pSIRequested, winmdroot.Security.PSECURITY_DESCRIPTOR pSID, uint nLength, uint* lpnLengthNeeded);
	}
}
